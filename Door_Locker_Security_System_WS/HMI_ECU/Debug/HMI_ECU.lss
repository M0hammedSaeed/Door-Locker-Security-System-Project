
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000021c  00800060  000032fe  00003392  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080027c  0080027c  000035ae  2**0
                  ALLOC
  3 .stab         000034ec  00000000  00000000  000035b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001666  00000000  00000000  00006a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008102  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000082a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00008494  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000a89f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000bc25  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000cdfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000cfbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000d2b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dc20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 f5 09 	jmp	0x13ea	; 0x13ea <__vector_4>
      14:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <__vector_7>
      20:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__vector_8>
      24:	0c 94 29 09 	jmp	0x1252	; 0x1252 <__vector_9>
      28:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__vector_10>
      2c:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_13>
      38:	0c 94 7d 07 	jmp	0xefa	; 0xefa <__vector_14>
      3c:	0c 94 4a 07 	jmp	0xe94	; 0xe94 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <main>
      8a:	0c 94 7d 19 	jmp	0x32fa	; 0x32fa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 01 19 	jmp	0x3202	; 0x3202 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e7       	ldi	r26, 0x73	; 115
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1d 19 	jmp	0x323a	; 0x323a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0d 19 	jmp	0x321a	; 0x321a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0d 19 	jmp	0x321a	; 0x321a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 01 19 	jmp	0x3202	; 0x3202 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e7       	ldi	r24, 0x73	; 115
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1d 19 	jmp	0x323a	; 0x323a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 09 19 	jmp	0x3212	; 0x3212 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 e7       	ldi	r22, 0x73	; 115
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 25 19 	jmp	0x324a	; 0x324a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 0d 19 	jmp	0x321a	; 0x321a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 0d 19 	jmp	0x321a	; 0x321a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 0d 19 	jmp	0x321a	; 0x321a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 11 19 	jmp	0x3222	; 0x3222 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 2d 19 	jmp	0x325a	; 0x325a <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 09 19 	jmp	0x3212	; 0x3212 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 25 19 	jmp	0x324a	; 0x324a <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e5 58       	subi	r30, 0x85	; 133
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <__vector_13>:

/*
 * [Description]: The ISR's specific For RX Complete Interrupt Enable
 */
ISR(USART_RXC_vect)
{
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	/* Call the Call Back function in the application after the Event is Occur */
	if(g_Ptr_To_Fun_RXC != NULL_PTR)
     e58:	80 91 7c 02 	lds	r24, 0x027C
     e5c:	90 91 7d 02 	lds	r25, 0x027D
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	29 f0       	breq	.+10     	; 0xe6e <__vector_13+0x40>
	{
		/* This is called --> Call Back Notification */
		/* another method to call the function using pointer to function g_Ptr_To_Fun_RXC(); */
		(*g_Ptr_To_Fun_RXC)();
     e64:	e0 91 7c 02 	lds	r30, 0x027C
     e68:	f0 91 7d 02 	lds	r31, 0x027D
     e6c:	09 95       	icall
	}
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	bf 91       	pop	r27
     e78:	af 91       	pop	r26
     e7a:	9f 91       	pop	r25
     e7c:	8f 91       	pop	r24
     e7e:	7f 91       	pop	r23
     e80:	6f 91       	pop	r22
     e82:	5f 91       	pop	r21
     e84:	4f 91       	pop	r20
     e86:	3f 91       	pop	r19
     e88:	2f 91       	pop	r18
     e8a:	0f 90       	pop	r0
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	0f 90       	pop	r0
     e90:	1f 90       	pop	r1
     e92:	18 95       	reti

00000e94 <__vector_15>:

/*
 * [Description]: The ISR's specific For TX Complete Interrupt Enable
 */
ISR(USART_TXC_vect)
{
     e94:	1f 92       	push	r1
     e96:	0f 92       	push	r0
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	0f 92       	push	r0
     e9c:	11 24       	eor	r1, r1
     e9e:	2f 93       	push	r18
     ea0:	3f 93       	push	r19
     ea2:	4f 93       	push	r20
     ea4:	5f 93       	push	r21
     ea6:	6f 93       	push	r22
     ea8:	7f 93       	push	r23
     eaa:	8f 93       	push	r24
     eac:	9f 93       	push	r25
     eae:	af 93       	push	r26
     eb0:	bf 93       	push	r27
     eb2:	ef 93       	push	r30
     eb4:	ff 93       	push	r31
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
	/* Call the Call Back function in the application after the Event is Occur */
	if(g_Ptr_To_Fun_TXC != NULL_PTR)
     ebe:	80 91 7e 02 	lds	r24, 0x027E
     ec2:	90 91 7f 02 	lds	r25, 0x027F
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	29 f0       	breq	.+10     	; 0xed4 <__vector_15+0x40>
	{
		/* This is called --> Call Back Notification */
		/* another method to call the function using pointer to function g_Ptr_To_Fun_TXC(); */
		(*g_Ptr_To_Fun_TXC)();
     eca:	e0 91 7e 02 	lds	r30, 0x027E
     ece:	f0 91 7f 02 	lds	r31, 0x027F
     ed2:	09 95       	icall
	}
}
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	ff 91       	pop	r31
     eda:	ef 91       	pop	r30
     edc:	bf 91       	pop	r27
     ede:	af 91       	pop	r26
     ee0:	9f 91       	pop	r25
     ee2:	8f 91       	pop	r24
     ee4:	7f 91       	pop	r23
     ee6:	6f 91       	pop	r22
     ee8:	5f 91       	pop	r21
     eea:	4f 91       	pop	r20
     eec:	3f 91       	pop	r19
     eee:	2f 91       	pop	r18
     ef0:	0f 90       	pop	r0
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	0f 90       	pop	r0
     ef6:	1f 90       	pop	r1
     ef8:	18 95       	reti

00000efa <__vector_14>:

/*
 * [Description]: The ISR's specific For USART Data Register Empty Interrupt Enable
 */
ISR(USART_UDRE_vect)
{
     efa:	1f 92       	push	r1
     efc:	0f 92       	push	r0
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	0f 92       	push	r0
     f02:	11 24       	eor	r1, r1
     f04:	2f 93       	push	r18
     f06:	3f 93       	push	r19
     f08:	4f 93       	push	r20
     f0a:	5f 93       	push	r21
     f0c:	6f 93       	push	r22
     f0e:	7f 93       	push	r23
     f10:	8f 93       	push	r24
     f12:	9f 93       	push	r25
     f14:	af 93       	push	r26
     f16:	bf 93       	push	r27
     f18:	ef 93       	push	r30
     f1a:	ff 93       	push	r31
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
	/* Call the Call Back function in the application after the Event is Occur */
	if(g_Ptr_To_Fun_UDRE != NULL_PTR)
     f24:	80 91 80 02 	lds	r24, 0x0280
     f28:	90 91 81 02 	lds	r25, 0x0281
     f2c:	00 97       	sbiw	r24, 0x00	; 0
     f2e:	29 f0       	breq	.+10     	; 0xf3a <__vector_14+0x40>
	{
		/* This is called --> Call Back Notification */
		/* another method to call the function using pointer to function g_Ptr_To_Fun_UDRE(); */
		(*g_Ptr_To_Fun_UDRE)();
     f30:	e0 91 80 02 	lds	r30, 0x0280
     f34:	f0 91 81 02 	lds	r31, 0x0281
     f38:	09 95       	icall
	}
}
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	ff 91       	pop	r31
     f40:	ef 91       	pop	r30
     f42:	bf 91       	pop	r27
     f44:	af 91       	pop	r26
     f46:	9f 91       	pop	r25
     f48:	8f 91       	pop	r24
     f4a:	7f 91       	pop	r23
     f4c:	6f 91       	pop	r22
     f4e:	5f 91       	pop	r21
     f50:	4f 91       	pop	r20
     f52:	3f 91       	pop	r19
     f54:	2f 91       	pop	r18
     f56:	0f 90       	pop	r0
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	0f 90       	pop	r0
     f5c:	1f 90       	pop	r1
     f5e:	18 95       	reti

00000f60 <USART_Init>:
 * [Description]  : Functional responsible for Initialize the UART device.
 * [Args]  : Void
 * [Return]: Void
 */
void USART_Init(void)
{
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	00 d0       	rcall	.+0      	; 0xf66 <USART_Init+0x6>
     f66:	00 d0       	rcall	.+0      	; 0xf68 <USART_Init+0x8>
     f68:	0f 92       	push	r0
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
	uint8  UCSRA_Init = 0;
     f6e:	1d 82       	std	Y+5, r1	; 0x05
	uint8  UCSRB_Init = 0;
     f70:	1c 82       	std	Y+4, r1	; 0x04
	uint8  UCSRC_Init = 0;
     f72:	1b 82       	std	Y+3, r1	; 0x03
	uint16 UBRR_Init  = 0;
     f74:	1a 82       	std	Y+2, r1	; 0x02
     f76:	19 82       	std	Y+1, r1	; 0x01
	/* Set the USART Operation Mode and the USART Double Transmission Speed */
#if(USART_OperationMode_SELECTOR == USART_ASYNCHRONOUS_MODE) && (USART_DoubleSpeedStatus == USART_DoubleSpeedDisabled)
	UBRR_Init =  (uint16)(((F_CPU / (USART_BAUDRATE_SELECTOR * 16UL))) - 1); /* Calculate the UBRR register value */

	#elif(USART_OperationMode_SELECTOR == USART_ASYNCHRONOUS_MODE) && (USART_DoubleSpeedStatus == USART_DoubleSpeedEnabled)
	UCSRA_Init |= (1<<UCSRA_U2X); /* U2X = 1 for double transmission speed */
     f78:	8d 81       	ldd	r24, Y+5	; 0x05
     f7a:	82 60       	ori	r24, 0x02	; 2
     f7c:	8d 83       	std	Y+5, r24	; 0x05
	UBRR_Init = (uint16)(((F_CPU / (USART_BAUDRATE_SELECTOR * 8UL))) - 1); /* Calculate the UBRR register value */
     f7e:	87 e6       	ldi	r24, 0x67	; 103
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	9a 83       	std	Y+2, r25	; 0x02
     f84:	89 83       	std	Y+1, r24	; 0x01
		break;
	case USART_7BitsDataSize: /* For 7-bit data mode */
		UCSRC_Init |= (1<<UCSRC_UCSZ1);
		break;
	case USART_8BitsDataSize: /* For 8-bit data mode */
		UCSRC_Init |= (1<<UCSRC_UCSZ1) | (1<<UCSRC_UCSZ0);
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	86 60       	ori	r24, 0x06	; 6
     f8a:	8b 83       	std	Y+3, r24	; 0x03

	/* Set the USART Parity Check */
	UCSRC_Init |= USART_ParityCheck;


	UCSRA_REG = UCSRA_Init;
     f8c:	eb e2       	ldi	r30, 0x2B	; 43
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	8d 81       	ldd	r24, Y+5	; 0x05
     f92:	80 83       	st	Z, r24
	/* Receiver Enable and Transmitter Enable */
	UCSRB_REG = UCSRB_Init | (1<<UCSRB_RXEN) | (1<<UCSRB_TXEN);
     f94:	ea e2       	ldi	r30, 0x2A	; 42
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	8c 81       	ldd	r24, Y+4	; 0x04
     f9a:	88 61       	ori	r24, 0x18	; 24
     f9c:	80 83       	st	Z, r24
	/* The URSEL must be one when writing the UCSRC */
	UCSRC_REG = UCSRC_Init |(1<<UCSRC_URSEL);
     f9e:	e0 e4       	ldi	r30, 0x40	; 64
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	80 68       	ori	r24, 0x80	; 128
     fa6:	80 83       	st	Z, r24
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH_REG = (uint8)(UBRR_Init >> 8);
     fa8:	e0 e4       	ldi	r30, 0x40	; 64
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	9a 81       	ldd	r25, Y+2	; 0x02
     fb0:	89 2f       	mov	r24, r25
     fb2:	99 27       	eor	r25, r25
     fb4:	80 83       	st	Z, r24
	UBRRL_REG = (uint8)UBRR_Init;
     fb6:	e9 e2       	ldi	r30, 0x29	; 41
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	80 83       	st	Z, r24
}
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <USART_sendByte>:
 * [Description]  : Functional responsible for send byte to another UART device.
 * [Args]  : constant uint16
 * [Return]: Void
 */
void USART_sendByte(const uint16 data)
{
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <USART_sendByte+0x6>
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
     fd8:	9a 83       	std	Y+2, r25	; 0x02
     fda:	89 83       	std	Y+1, r24	; 0x01
#elif USART_InterruptStatus == DISABLE
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while((UCSRA_REG & (1<<UCSRA_UDRE)) == 0);
     fdc:	eb e2       	ldi	r30, 0x2B	; 43
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	80 72       	andi	r24, 0x20	; 32
     fe8:	90 70       	andi	r25, 0x00	; 0
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	b9 f3       	breq	.-18     	; 0xfdc <USART_sendByte+0xe>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR_REG = (uint8)data;
     fee:	ec e2       	ldi	r30, 0x2C	; 44
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	80 83       	st	Z, r24
#endif

}
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <USART_recieveByte>:
* [Description]  : Functional responsible for receive byte from another UART device.
* [Args]  : void
* [Return]: uint16
*/
uint16 USART_recieveByte(void)
{
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	00 d0       	rcall	.+0      	; 0x1006 <USART_recieveByte+0x6>
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
	uint16 data = 0;
    100a:	1a 82       	std	Y+2, r1	; 0x02
    100c:	19 82       	std	Y+1, r1	; 0x01
		 */
		data |= UDR_REG;
	}
#elif USART_InterruptStatus == DISABLE
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while((UCSRA_REG & (1<<UCSRA_RXC)) == 0);
    100e:	eb e2       	ldi	r30, 0x2B	; 43
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	88 23       	and	r24, r24
    1016:	dc f7       	brge	.-10     	; 0x100e <USART_recieveByte+0xe>
	}
	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	data |= UDR_REG;
    1018:	ec e2       	ldi	r30, 0x2C	; 44
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	9a 81       	ldd	r25, Y+2	; 0x02
    1026:	82 2b       	or	r24, r18
    1028:	93 2b       	or	r25, r19
    102a:	9a 83       	std	Y+2, r25	; 0x02
    102c:	89 83       	std	Y+1, r24	; 0x01
#endif
	return data;
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	08 95       	ret

0000103c <USART_sendString>:
* [Description]  : Send the required string through UART to the other UART device.
* [Args]  : pointer to constant uint8
* [Return]: Void
*/
void USART_sendString(const uint8 *Str)
{
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	00 d0       	rcall	.+0      	; 0x1042 <USART_sendString+0x6>
    1042:	0f 92       	push	r0
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	9b 83       	std	Y+3, r25	; 0x03
    104a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    104c:	19 82       	std	Y+1, r1	; 0x01
    104e:	11 c0       	rjmp	.+34     	; 0x1072 <USART_sendString+0x36>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		USART_sendByte(Str[i++]);
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	9b 81       	ldd	r25, Y+3	; 0x03
    105a:	fc 01       	movw	r30, r24
    105c:	e2 0f       	add	r30, r18
    105e:	f3 1f       	adc	r31, r19
    1060:	80 81       	ld	r24, Z
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	8f 5f       	subi	r24, 0xFF	; 255
    106a:	89 83       	std	Y+1, r24	; 0x01
    106c:	c9 01       	movw	r24, r18
    106e:	0e 94 e7 07 	call	0xfce	; 0xfce <USART_sendByte>
void USART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	9b 81       	ldd	r25, Y+3	; 0x03
    107c:	fc 01       	movw	r30, r24
    107e:	e2 0f       	add	r30, r18
    1080:	f3 1f       	adc	r31, r19
    1082:	80 81       	ld	r24, Z
    1084:	88 23       	and	r24, r24
    1086:	21 f7       	brne	.-56     	; 0x1050 <USART_sendString+0x14>
		USART_sendByteBlocking(Str[i]);
		Str++;
	}
	*******************************************************************/

}
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	08 95       	ret

00001094 <USART_receiveString>:
* [Description]  : Receive the required string until pressed Enter Key through UART from the other UART device.
* [Args]  : pointer to constant uint8
* [Return]: Void
*/
void USART_receiveString(uint8 *Str)
{
    1094:	0f 93       	push	r16
    1096:	1f 93       	push	r17
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	00 d0       	rcall	.+0      	; 0x109e <USART_receiveString+0xa>
    109e:	0f 92       	push	r0
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    10a4:	9b 83       	std	Y+3, r25	; 0x03
    10a6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    10a8:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = USART_recieveByte();
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	9b 81       	ldd	r25, Y+3	; 0x03
    10b4:	8c 01       	movw	r16, r24
    10b6:	02 0f       	add	r16, r18
    10b8:	13 1f       	adc	r17, r19
    10ba:	0e 94 00 08 	call	0x1000	; 0x1000 <USART_recieveByte>
    10be:	f8 01       	movw	r30, r16
    10c0:	80 83       	st	Z, r24
    10c2:	0f c0       	rjmp	.+30     	; 0x10e2 <USART_receiveString+0x4e>

	/* Receive the whole string until the pressed Enter Key */
	while(Str[i] != 13)
	{
		i++;
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	8f 5f       	subi	r24, 0xFF	; 255
    10c8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = USART_recieveByte();
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	9b 81       	ldd	r25, Y+3	; 0x03
    10d4:	8c 01       	movw	r16, r24
    10d6:	02 0f       	add	r16, r18
    10d8:	13 1f       	adc	r17, r19
    10da:	0e 94 00 08 	call	0x1000	; 0x1000 <USART_recieveByte>
    10de:	f8 01       	movw	r30, r16
    10e0:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = USART_recieveByte();

	/* Receive the whole string until the pressed Enter Key */
	while(Str[i] != 13)
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	9b 81       	ldd	r25, Y+3	; 0x03
    10ec:	fc 01       	movw	r30, r24
    10ee:	e2 0f       	add	r30, r18
    10f0:	f3 1f       	adc	r31, r19
    10f2:	80 81       	ld	r24, Z
    10f4:	8d 30       	cpi	r24, 0x0D	; 13
    10f6:	31 f7       	brne	.-52     	; 0x10c4 <USART_receiveString+0x30>
	{
		i++;
		Str[i] = USART_recieveByte();
	}
	/* After receiving the whole string plus pressed Enter Key, replace the Enter Key with '\0' */
	Str[i] = '\0';
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	9b 81       	ldd	r25, Y+3	; 0x03
    1102:	fc 01       	movw	r30, r24
    1104:	e2 0f       	add	r30, r18
    1106:	f3 1f       	adc	r31, r19
    1108:	10 82       	st	Z, r1
}
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	cf 91       	pop	r28
    1112:	df 91       	pop	r29
    1114:	1f 91       	pop	r17
    1116:	0f 91       	pop	r16
    1118:	08 95       	ret

0000111a <USART_RXC_SetCallBack>:
*                  Every set callback function follow specific interrupt.
* [Args]  : Pointer To Function take void and return void
* [Return]: Void
*/
void USART_RXC_SetCallBack(void (*Ptr_To_fun)(void))
{
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	00 d0       	rcall	.+0      	; 0x1120 <USART_RXC_SetCallBack+0x6>
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	9a 83       	std	Y+2, r25	; 0x02
    1126:	89 83       	std	Y+1, r24	; 0x01
	g_Ptr_To_Fun_RXC = (volatile void *)Ptr_To_fun;
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	9a 81       	ldd	r25, Y+2	; 0x02
    112c:	90 93 7d 02 	sts	0x027D, r25
    1130:	80 93 7c 02 	sts	0x027C, r24
}
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <USART_TXC_SetCallBack>:

void USART_TXC_SetCallBack(void (*Ptr_To_fun)(void))
{
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	00 d0       	rcall	.+0      	; 0x1144 <USART_TXC_SetCallBack+0x6>
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	9a 83       	std	Y+2, r25	; 0x02
    114a:	89 83       	std	Y+1, r24	; 0x01
	g_Ptr_To_Fun_TXC = (volatile void *)Ptr_To_fun;
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	9a 81       	ldd	r25, Y+2	; 0x02
    1150:	90 93 7f 02 	sts	0x027F, r25
    1154:	80 93 7e 02 	sts	0x027E, r24
}
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <USART_UDRE_SetCallBack>:

void USART_UDRE_SetCallBack(void (*Ptr_To_fun)(void))
{
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	00 d0       	rcall	.+0      	; 0x1168 <USART_UDRE_SetCallBack+0x6>
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62
    116c:	9a 83       	std	Y+2, r25	; 0x02
    116e:	89 83       	std	Y+1, r24	; 0x01
	g_Ptr_To_Fun_UDRE = (volatile void *)Ptr_To_fun;
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	9a 81       	ldd	r25, Y+2	; 0x02
    1174:	90 93 81 02 	sts	0x0281, r25
    1178:	80 93 80 02 	sts	0x0280, r24
}
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	08 95       	ret

00001186 <__vector_11>:

/*
 * [Description]: The ISR's specific For TIMER0
 */
ISR(TIMER0_OVF_vect)
{
    1186:	1f 92       	push	r1
    1188:	0f 92       	push	r0
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	0f 92       	push	r0
    118e:	11 24       	eor	r1, r1
    1190:	2f 93       	push	r18
    1192:	3f 93       	push	r19
    1194:	4f 93       	push	r20
    1196:	5f 93       	push	r21
    1198:	6f 93       	push	r22
    119a:	7f 93       	push	r23
    119c:	8f 93       	push	r24
    119e:	9f 93       	push	r25
    11a0:	af 93       	push	r26
    11a2:	bf 93       	push	r27
    11a4:	ef 93       	push	r30
    11a6:	ff 93       	push	r31
    11a8:	df 93       	push	r29
    11aa:	cf 93       	push	r28
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
	/* Call the Call Back function in the application after the Event is Occur */
	if(g_Ptr_To_Fun_TIMER_0 != NULL_PTR)
    11b0:	80 91 82 02 	lds	r24, 0x0282
    11b4:	90 91 83 02 	lds	r25, 0x0283
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	29 f0       	breq	.+10     	; 0x11c6 <__vector_11+0x40>
	{
		/* This is called --> Call Back Notification */
		/* another method to call the function using pointer to function g_Ptr_To_Fun_0(); */
		(*g_Ptr_To_Fun_TIMER_0)();
    11bc:	e0 91 82 02 	lds	r30, 0x0282
    11c0:	f0 91 83 02 	lds	r31, 0x0283
    11c4:	09 95       	icall
	}
}
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	ff 91       	pop	r31
    11cc:	ef 91       	pop	r30
    11ce:	bf 91       	pop	r27
    11d0:	af 91       	pop	r26
    11d2:	9f 91       	pop	r25
    11d4:	8f 91       	pop	r24
    11d6:	7f 91       	pop	r23
    11d8:	6f 91       	pop	r22
    11da:	5f 91       	pop	r21
    11dc:	4f 91       	pop	r20
    11de:	3f 91       	pop	r19
    11e0:	2f 91       	pop	r18
    11e2:	0f 90       	pop	r0
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	0f 90       	pop	r0
    11e8:	1f 90       	pop	r1
    11ea:	18 95       	reti

000011ec <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    11ec:	1f 92       	push	r1
    11ee:	0f 92       	push	r0
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	0f 92       	push	r0
    11f4:	11 24       	eor	r1, r1
    11f6:	2f 93       	push	r18
    11f8:	3f 93       	push	r19
    11fa:	4f 93       	push	r20
    11fc:	5f 93       	push	r21
    11fe:	6f 93       	push	r22
    1200:	7f 93       	push	r23
    1202:	8f 93       	push	r24
    1204:	9f 93       	push	r25
    1206:	af 93       	push	r26
    1208:	bf 93       	push	r27
    120a:	ef 93       	push	r30
    120c:	ff 93       	push	r31
    120e:	df 93       	push	r29
    1210:	cf 93       	push	r28
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_TIMER_0 != NULL_PTR)
    1216:	80 91 82 02 	lds	r24, 0x0282
    121a:	90 91 83 02 	lds	r25, 0x0283
    121e:	00 97       	sbiw	r24, 0x00	; 0
    1220:	29 f0       	breq	.+10     	; 0x122c <__vector_10+0x40>
	{
		(*g_Ptr_To_Fun_TIMER_0)();
    1222:	e0 91 82 02 	lds	r30, 0x0282
    1226:	f0 91 83 02 	lds	r31, 0x0283
    122a:	09 95       	icall
	}
}
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	ff 91       	pop	r31
    1232:	ef 91       	pop	r30
    1234:	bf 91       	pop	r27
    1236:	af 91       	pop	r26
    1238:	9f 91       	pop	r25
    123a:	8f 91       	pop	r24
    123c:	7f 91       	pop	r23
    123e:	6f 91       	pop	r22
    1240:	5f 91       	pop	r21
    1242:	4f 91       	pop	r20
    1244:	3f 91       	pop	r19
    1246:	2f 91       	pop	r18
    1248:	0f 90       	pop	r0
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	0f 90       	pop	r0
    124e:	1f 90       	pop	r1
    1250:	18 95       	reti

00001252 <__vector_9>:

/*
 * [Description]: The ISR's specific For TIMER1
 */
ISR(TIMER1_OVF_vect)
{
    1252:	1f 92       	push	r1
    1254:	0f 92       	push	r0
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	0f 92       	push	r0
    125a:	11 24       	eor	r1, r1
    125c:	2f 93       	push	r18
    125e:	3f 93       	push	r19
    1260:	4f 93       	push	r20
    1262:	5f 93       	push	r21
    1264:	6f 93       	push	r22
    1266:	7f 93       	push	r23
    1268:	8f 93       	push	r24
    126a:	9f 93       	push	r25
    126c:	af 93       	push	r26
    126e:	bf 93       	push	r27
    1270:	ef 93       	push	r30
    1272:	ff 93       	push	r31
    1274:	df 93       	push	r29
    1276:	cf 93       	push	r28
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_TIMER_1 != NULL_PTR)
    127c:	80 91 84 02 	lds	r24, 0x0284
    1280:	90 91 85 02 	lds	r25, 0x0285
    1284:	00 97       	sbiw	r24, 0x00	; 0
    1286:	29 f0       	breq	.+10     	; 0x1292 <__vector_9+0x40>
	{
		(*g_Ptr_To_Fun_TIMER_1)();
    1288:	e0 91 84 02 	lds	r30, 0x0284
    128c:	f0 91 85 02 	lds	r31, 0x0285
    1290:	09 95       	icall
	}
}
    1292:	cf 91       	pop	r28
    1294:	df 91       	pop	r29
    1296:	ff 91       	pop	r31
    1298:	ef 91       	pop	r30
    129a:	bf 91       	pop	r27
    129c:	af 91       	pop	r26
    129e:	9f 91       	pop	r25
    12a0:	8f 91       	pop	r24
    12a2:	7f 91       	pop	r23
    12a4:	6f 91       	pop	r22
    12a6:	5f 91       	pop	r21
    12a8:	4f 91       	pop	r20
    12aa:	3f 91       	pop	r19
    12ac:	2f 91       	pop	r18
    12ae:	0f 90       	pop	r0
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	0f 90       	pop	r0
    12b4:	1f 90       	pop	r1
    12b6:	18 95       	reti

000012b8 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    12b8:	1f 92       	push	r1
    12ba:	0f 92       	push	r0
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	0f 92       	push	r0
    12c0:	11 24       	eor	r1, r1
    12c2:	2f 93       	push	r18
    12c4:	3f 93       	push	r19
    12c6:	4f 93       	push	r20
    12c8:	5f 93       	push	r21
    12ca:	6f 93       	push	r22
    12cc:	7f 93       	push	r23
    12ce:	8f 93       	push	r24
    12d0:	9f 93       	push	r25
    12d2:	af 93       	push	r26
    12d4:	bf 93       	push	r27
    12d6:	ef 93       	push	r30
    12d8:	ff 93       	push	r31
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_TIMER_1 != NULL_PTR)
    12e2:	80 91 84 02 	lds	r24, 0x0284
    12e6:	90 91 85 02 	lds	r25, 0x0285
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	29 f0       	breq	.+10     	; 0x12f8 <__vector_7+0x40>
	{
		(*g_Ptr_To_Fun_TIMER_1)();
    12ee:	e0 91 84 02 	lds	r30, 0x0284
    12f2:	f0 91 85 02 	lds	r31, 0x0285
    12f6:	09 95       	icall
	}
}
    12f8:	cf 91       	pop	r28
    12fa:	df 91       	pop	r29
    12fc:	ff 91       	pop	r31
    12fe:	ef 91       	pop	r30
    1300:	bf 91       	pop	r27
    1302:	af 91       	pop	r26
    1304:	9f 91       	pop	r25
    1306:	8f 91       	pop	r24
    1308:	7f 91       	pop	r23
    130a:	6f 91       	pop	r22
    130c:	5f 91       	pop	r21
    130e:	4f 91       	pop	r20
    1310:	3f 91       	pop	r19
    1312:	2f 91       	pop	r18
    1314:	0f 90       	pop	r0
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	0f 90       	pop	r0
    131a:	1f 90       	pop	r1
    131c:	18 95       	reti

0000131e <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
    131e:	1f 92       	push	r1
    1320:	0f 92       	push	r0
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	0f 92       	push	r0
    1326:	11 24       	eor	r1, r1
    1328:	2f 93       	push	r18
    132a:	3f 93       	push	r19
    132c:	4f 93       	push	r20
    132e:	5f 93       	push	r21
    1330:	6f 93       	push	r22
    1332:	7f 93       	push	r23
    1334:	8f 93       	push	r24
    1336:	9f 93       	push	r25
    1338:	af 93       	push	r26
    133a:	bf 93       	push	r27
    133c:	ef 93       	push	r30
    133e:	ff 93       	push	r31
    1340:	df 93       	push	r29
    1342:	cf 93       	push	r28
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_TIMER_1 != NULL_PTR)
    1348:	80 91 84 02 	lds	r24, 0x0284
    134c:	90 91 85 02 	lds	r25, 0x0285
    1350:	00 97       	sbiw	r24, 0x00	; 0
    1352:	29 f0       	breq	.+10     	; 0x135e <__vector_8+0x40>
	{
		(*g_Ptr_To_Fun_TIMER_1)();
    1354:	e0 91 84 02 	lds	r30, 0x0284
    1358:	f0 91 85 02 	lds	r31, 0x0285
    135c:	09 95       	icall
	}
}
    135e:	cf 91       	pop	r28
    1360:	df 91       	pop	r29
    1362:	ff 91       	pop	r31
    1364:	ef 91       	pop	r30
    1366:	bf 91       	pop	r27
    1368:	af 91       	pop	r26
    136a:	9f 91       	pop	r25
    136c:	8f 91       	pop	r24
    136e:	7f 91       	pop	r23
    1370:	6f 91       	pop	r22
    1372:	5f 91       	pop	r21
    1374:	4f 91       	pop	r20
    1376:	3f 91       	pop	r19
    1378:	2f 91       	pop	r18
    137a:	0f 90       	pop	r0
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	0f 90       	pop	r0
    1380:	1f 90       	pop	r1
    1382:	18 95       	reti

00001384 <__vector_5>:

/*
 * [Description]: The ISR's specific For TIMER1
 */
ISR(TIMER2_OVF_vect)
{
    1384:	1f 92       	push	r1
    1386:	0f 92       	push	r0
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	0f 92       	push	r0
    138c:	11 24       	eor	r1, r1
    138e:	2f 93       	push	r18
    1390:	3f 93       	push	r19
    1392:	4f 93       	push	r20
    1394:	5f 93       	push	r21
    1396:	6f 93       	push	r22
    1398:	7f 93       	push	r23
    139a:	8f 93       	push	r24
    139c:	9f 93       	push	r25
    139e:	af 93       	push	r26
    13a0:	bf 93       	push	r27
    13a2:	ef 93       	push	r30
    13a4:	ff 93       	push	r31
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_TIMER_2 != NULL_PTR)
    13ae:	80 91 86 02 	lds	r24, 0x0286
    13b2:	90 91 87 02 	lds	r25, 0x0287
    13b6:	00 97       	sbiw	r24, 0x00	; 0
    13b8:	29 f0       	breq	.+10     	; 0x13c4 <__vector_5+0x40>
	{
		(*g_Ptr_To_Fun_TIMER_2)();
    13ba:	e0 91 86 02 	lds	r30, 0x0286
    13be:	f0 91 87 02 	lds	r31, 0x0287
    13c2:	09 95       	icall
	}
}
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	ff 91       	pop	r31
    13ca:	ef 91       	pop	r30
    13cc:	bf 91       	pop	r27
    13ce:	af 91       	pop	r26
    13d0:	9f 91       	pop	r25
    13d2:	8f 91       	pop	r24
    13d4:	7f 91       	pop	r23
    13d6:	6f 91       	pop	r22
    13d8:	5f 91       	pop	r21
    13da:	4f 91       	pop	r20
    13dc:	3f 91       	pop	r19
    13de:	2f 91       	pop	r18
    13e0:	0f 90       	pop	r0
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	0f 90       	pop	r0
    13e6:	1f 90       	pop	r1
    13e8:	18 95       	reti

000013ea <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    13ea:	1f 92       	push	r1
    13ec:	0f 92       	push	r0
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	0f 92       	push	r0
    13f2:	11 24       	eor	r1, r1
    13f4:	2f 93       	push	r18
    13f6:	3f 93       	push	r19
    13f8:	4f 93       	push	r20
    13fa:	5f 93       	push	r21
    13fc:	6f 93       	push	r22
    13fe:	7f 93       	push	r23
    1400:	8f 93       	push	r24
    1402:	9f 93       	push	r25
    1404:	af 93       	push	r26
    1406:	bf 93       	push	r27
    1408:	ef 93       	push	r30
    140a:	ff 93       	push	r31
    140c:	df 93       	push	r29
    140e:	cf 93       	push	r28
    1410:	cd b7       	in	r28, 0x3d	; 61
    1412:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_TIMER_2 != NULL_PTR)
    1414:	80 91 86 02 	lds	r24, 0x0286
    1418:	90 91 87 02 	lds	r25, 0x0287
    141c:	00 97       	sbiw	r24, 0x00	; 0
    141e:	29 f0       	breq	.+10     	; 0x142a <__vector_4+0x40>
	{
		(*g_Ptr_To_Fun_TIMER_2)();
    1420:	e0 91 86 02 	lds	r30, 0x0286
    1424:	f0 91 87 02 	lds	r31, 0x0287
    1428:	09 95       	icall
	}
}
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	ff 91       	pop	r31
    1430:	ef 91       	pop	r30
    1432:	bf 91       	pop	r27
    1434:	af 91       	pop	r26
    1436:	9f 91       	pop	r25
    1438:	8f 91       	pop	r24
    143a:	7f 91       	pop	r23
    143c:	6f 91       	pop	r22
    143e:	5f 91       	pop	r21
    1440:	4f 91       	pop	r20
    1442:	3f 91       	pop	r19
    1444:	2f 91       	pop	r18
    1446:	0f 90       	pop	r0
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	0f 90       	pop	r0
    144c:	1f 90       	pop	r1
    144e:	18 95       	reti

00001450 <TIMER_Init>:
 *                  The same time from Configuration of timer .
 * [Args]  : void
 * [RUTURN]: Void
 */
void TIMER_Init(void)
{
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62

		TCCR1A_REG |= TIMER1_MODE_PWM_PHASECORRECT_10_BIT_A_MSK;
		TCCR1B_REG |= TIMER1_MODE_PWM_PHASECORRECT_10_BIT_B_MSK;
		break;
	case TIMER1_MODE_CTC_MSK:
		TCCR1A_REG &= TIMER1_MODE_clr_A_MSK;
    1458:	af e4       	ldi	r26, 0x4F	; 79
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	ef e4       	ldi	r30, 0x4F	; 79
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	8c 7f       	andi	r24, 0xFC	; 252
    1464:	8c 93       	st	X, r24
		TCCR1B_REG &= TIMER1_MODE_clr_B_MSK;
    1466:	ae e4       	ldi	r26, 0x4E	; 78
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	ee e4       	ldi	r30, 0x4E	; 78
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	87 7e       	andi	r24, 0xE7	; 231
    1472:	8c 93       	st	X, r24

		TCCR1A_REG |= TIMER1_MODE_CTC_A_MSK;
    1474:	af e4       	ldi	r26, 0x4F	; 79
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	ef e4       	ldi	r30, 0x4F	; 79
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	8c 60       	ori	r24, 0x0C	; 12
    1480:	8c 93       	st	X, r24
		TCCR1B_REG |= TIMER1_MODE_CTC_B_MSK;
    1482:	ae e4       	ldi	r26, 0x4E	; 78
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	ee e4       	ldi	r30, 0x4E	; 78
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	88 60       	ori	r24, 0x08	; 8
    148e:	8c 93       	st	X, r24
	case TIMER1_CLK_WITH_256_PRESCALER_MSK:
		TCCR1B_REG &= TIMER1_CLK_WITH_PRESCALER_clr_MSK;
		TCCR1B_REG |= TIMER1_CLK_WITH_256_PRESCALER_MSK;
		break;
	case TIMER1_CLK_WITH_1024_PRESCALER_MSK:
		TCCR1B_REG &= TIMER1_CLK_WITH_PRESCALER_clr_MSK;
    1490:	ae e4       	ldi	r26, 0x4E	; 78
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	ee e4       	ldi	r30, 0x4E	; 78
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	88 7f       	andi	r24, 0xF8	; 248
    149c:	8c 93       	st	X, r24
		TCCR1B_REG |= TIMER1_CLK_WITH_1024_PRESCALER_MSK;
    149e:	ae e4       	ldi	r26, 0x4E	; 78
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	ee e4       	ldi	r30, 0x4E	; 78
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	85 60       	ori	r24, 0x05	; 5
    14aa:	8c 93       	st	X, r24
		TCCR1B_REG |= TIMER1_EXTERNAL_CLK_WITH_RISING_EDGE_MSK;
		break;
	}

	/* Initial value for Timer/Counter1 */
	TCNT1_REG = TIMER1_INITIAL_VALUE;
    14ac:	ec e4       	ldi	r30, 0x4C	; 76
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	11 82       	std	Z+1, r1	; 0x01
    14b2:	10 82       	st	Z, r1

	/* Compare value for Timer/Counter0 */
	OCR1A_REG = TIMER1_COMPARE_A_VALUE;
    14b4:	ea e4       	ldi	r30, 0x4A	; 74
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	8d e0       	ldi	r24, 0x0D	; 13
    14ba:	93 e0       	ldi	r25, 0x03	; 3
    14bc:	91 83       	std	Z+1, r25	; 0x01
    14be:	80 83       	st	Z, r24
	OCR1B_REG = TIMER1_COMPARE_B_VALUE;
    14c0:	e8 e4       	ldi	r30, 0x48	; 72
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	11 82       	std	Z+1, r1	; 0x01
    14c6:	10 82       	st	Z, r1
	/* Compare value for Timer/Counter2 */
	OCR2_REG = TIMER2_COMPARE_VALUE;
#endif

	/* To enable TIMER's Interrupt */
	TIMER_EnableInterrupt();
    14c8:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <TIMER_EnableInterrupt>
}
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	08 95       	ret

000014d2 <TIMER_EnableInterrupt>:
 *                  Depend on Timer That you made it Enable.
 * [Args]  : void
 * [RUTURN]: Void
 */
void TIMER_EnableInterrupt(void)
{
    14d2:	df 93       	push	r29
    14d4:	cf 93       	push	r28
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
#if TIMER1 == ENABLE

#if TIMER1_OVF_INT_EN == ENABLE
	SET_BIT(TIMSK_REG,TIMSK_TOIE1);
#elif TIMER1_COMPA_INT_EN == ENABLE
	SET_BIT(TIMSK_REG,TIMSK_OCIE1A);
    14da:	a9 e5       	ldi	r26, 0x59	; 89
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e9 e5       	ldi	r30, 0x59	; 89
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	80 61       	ori	r24, 0x10	; 16
    14e6:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,TIMSK_TOIE2);
#elif TIMER2_COMP_INT_EN == ENABLE
	SET_BIT(TIMSK_REG,TIMSK_OCIE2);
#endif
#endif
}
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <TIMER0_SetCallBack>:
 *                  Every set callback function follow specific Timer.
 * [Args]  : Pointer To Function take void and return void
 * [RUTURN]: Void
 */
void TIMER0_SetCallBack(void (*Ptr_To_fun)(void))
{
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <TIMER0_SetCallBack+0x6>
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	9a 83       	std	Y+2, r25	; 0x02
    14fa:	89 83       	std	Y+1, r24	; 0x01
	g_Ptr_To_Fun_TIMER_0 = (volatile void *)Ptr_To_fun;
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1500:	90 93 83 02 	sts	0x0283, r25
    1504:	80 93 82 02 	sts	0x0282, r24
}
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	08 95       	ret

00001512 <TIMER1_SetCallBack>:

void TIMER1_SetCallBack(void (*Ptr_To_fun)(void))
{
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	00 d0       	rcall	.+0      	; 0x1518 <TIMER1_SetCallBack+0x6>
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	9a 83       	std	Y+2, r25	; 0x02
    151e:	89 83       	std	Y+1, r24	; 0x01
	g_Ptr_To_Fun_TIMER_1 = (volatile void *)Ptr_To_fun;
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	9a 81       	ldd	r25, Y+2	; 0x02
    1524:	90 93 85 02 	sts	0x0285, r25
    1528:	80 93 84 02 	sts	0x0284, r24
}
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	08 95       	ret

00001536 <TIMER2_SetCallBack>:

void TIMER2_SetCallBack(void (*Ptr_To_fun)(void))
{
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	00 d0       	rcall	.+0      	; 0x153c <TIMER2_SetCallBack+0x6>
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	9a 83       	std	Y+2, r25	; 0x02
    1542:	89 83       	std	Y+1, r24	; 0x01
	g_Ptr_To_Fun_TIMER_2 = (volatile void *)Ptr_To_fun;
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	9a 81       	ldd	r25, Y+2	; 0x02
    1548:	90 93 87 02 	sts	0x0287, r25
    154c:	80 93 86 02 	sts	0x0286, r24
}
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <TIMER_DeInit>:
 * [DISCRIPTION]  : This function is responsible to De-initialization all Timers
 * [Args]  : void
 * [RUTURN]: Void
 */
void TIMER_DeInit(void)
{
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
	/* TIMER0 De-init */
	TCCR0_REG = 0;
    1562:	e3 e5       	ldi	r30, 0x53	; 83
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	10 82       	st	Z, r1
	/* TIMER2 De-init */
	TCCR2_REG = 0;
    1568:	e5 e4       	ldi	r30, 0x45	; 69
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	10 82       	st	Z, r1

	/* TIMER1 De-init */
	TCCR1A_REG = 0;
    156e:	ef e4       	ldi	r30, 0x4F	; 79
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	10 82       	st	Z, r1
	TCCR1B_REG = 0;
    1574:	ee e4       	ldi	r30, 0x4E	; 78
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	10 82       	st	Z, r1
}
    157a:	cf 91       	pop	r28
    157c:	df 91       	pop	r29
    157e:	08 95       	ret

00001580 <Timer0_PWM_DutyCycle>:
 *					 5. Setup the direction for OC0 as output pin.
 * [Args]  : required input duty cycle
 * [RUTURN]: Void
 */
void Timer0_PWM_DutyCycle(uint8 duty_cycle)
{
    1580:	0f 93       	push	r16
    1582:	1f 93       	push	r17
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	0f 92       	push	r0
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	89 83       	std	Y+1, r24	; 0x01
	/* Initial value for Timer/Counter0 */
	TCNT0_REG = TIMER0_INITIAL_VALUE;
    1590:	e2 e5       	ldi	r30, 0x52	; 82
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	10 82       	st	Z, r1

	/* Set Compare value */
	OCR0_REG = ((float32)duty_cycle / 100) * 255;
    1596:	0c e5       	ldi	r16, 0x5C	; 92
    1598:	10 e0       	ldi	r17, 0x00	; 0
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	88 2f       	mov	r24, r24
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	a0 e0       	ldi	r26, 0x00	; 0
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	bc 01       	movw	r22, r24
    15a6:	cd 01       	movw	r24, r26
    15a8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	bc 01       	movw	r22, r24
    15b2:	cd 01       	movw	r24, r26
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	48 ec       	ldi	r20, 0xC8	; 200
    15ba:	52 e4       	ldi	r21, 0x42	; 66
    15bc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	bc 01       	movw	r22, r24
    15c6:	cd 01       	movw	r24, r26
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	4f e7       	ldi	r20, 0x7F	; 127
    15ce:	53 e4       	ldi	r21, 0x43	; 67
    15d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	bc 01       	movw	r22, r24
    15da:	cd 01       	movw	r24, r26
    15dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	f8 01       	movw	r30, r16
    15e6:	80 83       	st	Z, r24

#if (TIMER0_MODE_SELECTOR == TIMER0_MODE_PWM_PHASECORRECT_MSK)
	TCCR0_REG &= TIMER0_MODE_clr_MSK;
    15e8:	a3 e5       	ldi	r26, 0x53	; 83
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	e3 e5       	ldi	r30, 0x53	; 83
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	87 7b       	andi	r24, 0xB7	; 183
    15f4:	8c 93       	st	X, r24
	TCCR0_REG |= TIMER0_MODE_PWM_PHASECORRECT_MSK;
    15f6:	a3 e5       	ldi	r26, 0x53	; 83
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e3 e5       	ldi	r30, 0x53	; 83
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	80 64       	ori	r24, 0x40	; 64
    1602:	8c 93       	st	X, r24
	TCCR0_REG &= TIMER0_MODE_clr_MSK;
	TCCR0_REG |= TIMER0_MODE_FASTPWM_MSK;
#endif

#if TIMER0_OC0_BEHAVIOR_SELECTOR == TIMER0_OC0_NON_INVERTING_MSK
	TCCR0_REG &= TIMER0_OC0_clr_MSK;
    1604:	a3 e5       	ldi	r26, 0x53	; 83
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e3 e5       	ldi	r30, 0x53	; 83
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	8f 7c       	andi	r24, 0xCF	; 207
    1610:	8c 93       	st	X, r24
	GPIO_SetPinDir(TIMER0_OC0_PORT, TIMER0_OC0_Pin, pin_output);
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	63 e0       	ldi	r22, 0x03	; 3
    1616:	41 e0       	ldi	r20, 0x01	; 1
    1618:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <GPIO_SetPinDir>
	TCCR0_REG |= TIMER0_OC0_NON_INVERTING_MSK;
    161c:	a3 e5       	ldi	r26, 0x53	; 83
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e3 e5       	ldi	r30, 0x53	; 83
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	80 62       	ori	r24, 0x20	; 32
    1628:	8c 93       	st	X, r24
	case TIMER0_CLK_WITH_NO_PRESCALER_MSK:
		TCCR0_REG &= TIMER0_CLK_WITH_PRESCALER_clr_MSK;
		TCCR0_REG |= TIMER0_CLK_WITH_NO_PRESCALER_MSK;
		break;
	case TIMER0_CLK_WITH_8_PRESCALER_MSK:
		TCCR0_REG &= TIMER0_CLK_WITH_PRESCALER_clr_MSK;
    162a:	a3 e5       	ldi	r26, 0x53	; 83
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e3 e5       	ldi	r30, 0x53	; 83
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	88 7f       	andi	r24, 0xF8	; 248
    1636:	8c 93       	st	X, r24
		TCCR0_REG |= TIMER0_CLK_WITH_8_PRESCALER_MSK;
    1638:	a3 e5       	ldi	r26, 0x53	; 83
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	e3 e5       	ldi	r30, 0x53	; 83
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	82 60       	ori	r24, 0x02	; 2
    1644:	8c 93       	st	X, r24
	case TIMER0_EXTERNAL_CLK_WITH_RISING_EDGE_MSK:
		TCCR0_REG &= TIMER0_CLK_WITH_PRESCALER_clr_MSK;
		TCCR0_REG |= TIMER0_EXTERNAL_CLK_WITH_RISING_EDGE_MSK;
		break;
	}
}
    1646:	0f 90       	pop	r0
    1648:	cf 91       	pop	r28
    164a:	df 91       	pop	r29
    164c:	1f 91       	pop	r17
    164e:	0f 91       	pop	r16
    1650:	08 95       	ret

00001652 <Timer1_PWM_DutyCycle>:
 *					 5. Setup the direction for OC1B as output pin.
 * [Args]  : required input duty cycle
 * [RUTURN]: Void
 */
void Timer1_PWM_DutyCycle(uint16  duty_cycle)
{
    1652:	0f 93       	push	r16
    1654:	1f 93       	push	r17
    1656:	df 93       	push	r29
    1658:	cf 93       	push	r28
    165a:	00 d0       	rcall	.+0      	; 0x165c <Timer1_PWM_DutyCycle+0xa>
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	9a 83       	std	Y+2, r25	; 0x02
    1662:	89 83       	std	Y+1, r24	; 0x01
	/* Initial value for Timer/Counter1 */
	TCNT1_REG = TIMER1_INITIAL_VALUE;
    1664:	ec e4       	ldi	r30, 0x4C	; 76
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	11 82       	std	Z+1, r1	; 0x01
    166a:	10 82       	st	Z, r1
	/*
	 * use fast mode with top value at OCRA reg
	 * diconnect OC1A PIN ,and generate the PWM on OC1B PIN
	 */
	/* Compare value for Timer/Counter0 */
	OCR1A_REG = TIMER1_COMPARE_A_VALUE;
    166c:	ea e4       	ldi	r30, 0x4A	; 74
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	8d e0       	ldi	r24, 0x0D	; 13
    1672:	93 e0       	ldi	r25, 0x03	; 3
    1674:	91 83       	std	Z+1, r25	; 0x01
    1676:	80 83       	st	Z, r24
	OCR1B_REG = ((float32)duty_cycle / 100) * 65535;
    1678:	08 e4       	ldi	r16, 0x48	; 72
    167a:	10 e0       	ldi	r17, 0x00	; 0
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	9a 81       	ldd	r25, Y+2	; 0x02
    1680:	cc 01       	movw	r24, r24
    1682:	a0 e0       	ldi	r26, 0x00	; 0
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	bc 01       	movw	r22, r24
    1688:	cd 01       	movw	r24, r26
    168a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	bc 01       	movw	r22, r24
    1694:	cd 01       	movw	r24, r26
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	48 ec       	ldi	r20, 0xC8	; 200
    169c:	52 e4       	ldi	r21, 0x42	; 66
    169e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	bc 01       	movw	r22, r24
    16a8:	cd 01       	movw	r24, r26
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	3f ef       	ldi	r19, 0xFF	; 255
    16ae:	4f e7       	ldi	r20, 0x7F	; 127
    16b0:	57 e4       	ldi	r21, 0x47	; 71
    16b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	bc 01       	movw	r22, r24
    16bc:	cd 01       	movw	r24, r26
    16be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	f8 01       	movw	r30, r16
    16c8:	91 83       	std	Z+1, r25	; 0x01
    16ca:	80 83       	st	Z, r24

	TCCR1A_REG |= TIMER1_MODE_FAST_PWM_A_MSK;
	TCCR1B_REG |= TIMER1_MODE_FAST_PWM_B_MSK;
#endif

	GPIO_SetPinDir(TIMER1_OC1B_PORT, TIMER1_OC1B_Pin, pin_output);
    16cc:	83 e0       	ldi	r24, 0x03	; 3
    16ce:	64 e0       	ldi	r22, 0x04	; 4
    16d0:	41 e0       	ldi	r20, 0x01	; 1
    16d2:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <GPIO_SetPinDir>
	case TIMER1_CLK_WITH_256_PRESCALER_MSK:
		TCCR1B_REG &= TIMER1_CLK_WITH_PRESCALER_clr_MSK;
		TCCR1B_REG |= TIMER1_CLK_WITH_256_PRESCALER_MSK;
		break;
	case TIMER1_CLK_WITH_1024_PRESCALER_MSK:
		TCCR1B_REG &= TIMER1_CLK_WITH_PRESCALER_clr_MSK;
    16d6:	ae e4       	ldi	r26, 0x4E	; 78
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	ee e4       	ldi	r30, 0x4E	; 78
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	88 7f       	andi	r24, 0xF8	; 248
    16e2:	8c 93       	st	X, r24
		TCCR1B_REG |= TIMER1_CLK_WITH_1024_PRESCALER_MSK;
    16e4:	ae e4       	ldi	r26, 0x4E	; 78
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	ee e4       	ldi	r30, 0x4E	; 78
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	85 60       	ori	r24, 0x05	; 5
    16f0:	8c 93       	st	X, r24
	case TIMER1_EXTERNAL_CLK_WITH_RISING_EDGE_MSK:
		TCCR1B_REG &= TIMER1_CLK_WITH_PRESCALER_clr_MSK;
		TCCR1B_REG |= TIMER1_EXTERNAL_CLK_WITH_RISING_EDGE_MSK;
		break;
	}
}
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	cf 91       	pop	r28
    16f8:	df 91       	pop	r29
    16fa:	1f 91       	pop	r17
    16fc:	0f 91       	pop	r16
    16fe:	08 95       	ret

00001700 <Timer2_PWM_DutyCycle>:
 *					 5. Setup the direction for OCR2 as output pin.
 * [Args]  : required input duty cycle
 * [RUTURN]: Void
 */
void Timer2_PWM_DutyCycle(uint8 duty_cycle)
{
    1700:	0f 93       	push	r16
    1702:	1f 93       	push	r17
    1704:	df 93       	push	r29
    1706:	cf 93       	push	r28
    1708:	0f 92       	push	r0
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
    170e:	89 83       	std	Y+1, r24	; 0x01

	/* Initial value for Timer/Counter2 */
	TCNT2_REG = TIMER2_INITIAL_VALUE;
    1710:	e4 e4       	ldi	r30, 0x44	; 68
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	10 82       	st	Z, r1

	/* Compare value for Timer/Counter2 */
	OCR2_REG = ((float32)duty_cycle / 100) * 255;
    1716:	03 e4       	ldi	r16, 0x43	; 67
    1718:	10 e0       	ldi	r17, 0x00	; 0
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	88 2f       	mov	r24, r24
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	a0 e0       	ldi	r26, 0x00	; 0
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	bc 01       	movw	r22, r24
    1726:	cd 01       	movw	r24, r26
    1728:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	bc 01       	movw	r22, r24
    1732:	cd 01       	movw	r24, r26
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	48 ec       	ldi	r20, 0xC8	; 200
    173a:	52 e4       	ldi	r21, 0x42	; 66
    173c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	bc 01       	movw	r22, r24
    1746:	cd 01       	movw	r24, r26
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	4f e7       	ldi	r20, 0x7F	; 127
    174e:	53 e4       	ldi	r21, 0x43	; 67
    1750:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	bc 01       	movw	r22, r24
    175a:	cd 01       	movw	r24, r26
    175c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	f8 01       	movw	r30, r16
    1766:	80 83       	st	Z, r24
	TCCR2_REG &= TIMER2_MODE_clr_MSK;
	TCCR2_REG |= TIMER2_MODE_FASTPWM_MSK;
#endif

#if TIMER2_OC2_BEHAVIOR_SELECTOR == TIMER2_OC2_NON_INVERTING_MSK
	TCCR2_REG &= TIMER2_OC2_clr_MSK;
    1768:	a5 e4       	ldi	r26, 0x45	; 69
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e5 e4       	ldi	r30, 0x45	; 69
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	8f 7c       	andi	r24, 0xCF	; 207
    1774:	8c 93       	st	X, r24
	GPIO_SetPinDir(TIMER2_OC2_PORT, TIMER2_OC2_Pin, pin_output);
    1776:	83 e0       	ldi	r24, 0x03	; 3
    1778:	67 e0       	ldi	r22, 0x07	; 7
    177a:	41 e0       	ldi	r20, 0x01	; 1
    177c:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <GPIO_SetPinDir>
	TCCR2_REG |= TIMER2_OC2_NON_INVERTING_MSK;
    1780:	a5 e4       	ldi	r26, 0x45	; 69
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e5 e4       	ldi	r30, 0x45	; 69
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	80 62       	ori	r24, 0x20	; 32
    178c:	8c 93       	st	X, r24
	case TIMER2_CLK_WITH_256_PRESCALER_MSK:
		TCCR2_REG &= TIMER2_CLK_WITH_PRESCALER_clr_MSK;
		TCCR2_REG |= TIMER2_CLK_WITH_256_PRESCALER_MSK;
		break;
	case TIMER2_CLK_WITH_1024_PRESCALER_MSK:
		TCCR2_REG &= TIMER2_CLK_WITH_PRESCALER_clr_MSK;
    178e:	a5 e4       	ldi	r26, 0x45	; 69
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	e5 e4       	ldi	r30, 0x45	; 69
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	88 7f       	andi	r24, 0xF8	; 248
    179a:	8c 93       	st	X, r24
		TCCR2_REG |= TIMER2_CLK_WITH_1024_PRESCALER_MSK;
    179c:	a5 e4       	ldi	r26, 0x45	; 69
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e5 e4       	ldi	r30, 0x45	; 69
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	87 60       	ori	r24, 0x07	; 7
    17a8:	8c 93       	st	X, r24
		break;
	}
}
    17aa:	0f 90       	pop	r0
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	1f 91       	pop	r17
    17b2:	0f 91       	pop	r16
    17b4:	08 95       	ret

000017b6 <GI_Enable>:
 * [FUNCTION NAME]: GI_Enable
 * [DISCRIPTION]  : This Function used to enable Global Interrupt Enable (GIE)
 * [RUTURN]: Void
 */
void GI_Enable(void)
{
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,SREG_I);
    17be:	af e5       	ldi	r26, 0x5F	; 95
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	ef e5       	ldi	r30, 0x5F	; 95
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	80 68       	ori	r24, 0x80	; 128
    17ca:	8c 93       	st	X, r24
}
    17cc:	cf 91       	pop	r28
    17ce:	df 91       	pop	r29
    17d0:	08 95       	ret

000017d2 <GI_Disable>:
 * [FUNCTION NAME]: GI_Disable
 * [DISCRIPTION]  : This Function used to Disable Global Interrupt Enable (GIE)
 * [RUTURN]: Void
 */
void GI_Disable(void)
{
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG_REG,SREG_I);
    17da:	af e5       	ldi	r26, 0x5F	; 95
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	ef e5       	ldi	r30, 0x5F	; 95
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	8f 77       	andi	r24, 0x7F	; 127
    17e6:	8c 93       	st	X, r24
}
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <GPIO_SetPinDir>:
 [RUTURN]: Void
 [NOTE]: if Number of PORTn >= 4 OR PINn >= 8 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/

void GPIO_SetPinDir(uint8 PORTn, uint8 PINn, GPIO_PinDirection Dir)
{
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	00 d0       	rcall	.+0      	; 0x17f4 <GPIO_SetPinDir+0x6>
    17f4:	00 d0       	rcall	.+0      	; 0x17f6 <GPIO_SetPinDir+0x8>
    17f6:	0f 92       	push	r0
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
    17fc:	89 83       	std	Y+1, r24	; 0x01
    17fe:	6a 83       	std	Y+2, r22	; 0x02
    1800:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number.
	 */
	if((PORTn >= NUM_OF_PORTS) || (PINn >= NUM_OF_PINS_PER_PORT))
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	84 30       	cpi	r24, 0x04	; 4
    1806:	08 f0       	brcs	.+2      	; 0x180a <GPIO_SetPinDir+0x1c>
    1808:	d5 c0       	rjmp	.+426    	; 0x19b4 <GPIO_SetPinDir+0x1c6>
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	88 30       	cpi	r24, 0x08	; 8
    180e:	08 f0       	brcs	.+2      	; 0x1812 <GPIO_SetPinDir+0x24>
    1810:	d1 c0       	rjmp	.+418    	; 0x19b4 <GPIO_SetPinDir+0x1c6>
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(PORTn)
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	3d 83       	std	Y+5, r19	; 0x05
    181a:	2c 83       	std	Y+4, r18	; 0x04
    181c:	8c 81       	ldd	r24, Y+4	; 0x04
    181e:	9d 81       	ldd	r25, Y+5	; 0x05
    1820:	81 30       	cpi	r24, 0x01	; 1
    1822:	91 05       	cpc	r25, r1
    1824:	09 f4       	brne	.+2      	; 0x1828 <GPIO_SetPinDir+0x3a>
    1826:	43 c0       	rjmp	.+134    	; 0x18ae <GPIO_SetPinDir+0xc0>
    1828:	2c 81       	ldd	r18, Y+4	; 0x04
    182a:	3d 81       	ldd	r19, Y+5	; 0x05
    182c:	22 30       	cpi	r18, 0x02	; 2
    182e:	31 05       	cpc	r19, r1
    1830:	2c f4       	brge	.+10     	; 0x183c <GPIO_SetPinDir+0x4e>
    1832:	8c 81       	ldd	r24, Y+4	; 0x04
    1834:	9d 81       	ldd	r25, Y+5	; 0x05
    1836:	00 97       	sbiw	r24, 0x00	; 0
    1838:	71 f0       	breq	.+28     	; 0x1856 <GPIO_SetPinDir+0x68>
    183a:	bc c0       	rjmp	.+376    	; 0x19b4 <GPIO_SetPinDir+0x1c6>
    183c:	2c 81       	ldd	r18, Y+4	; 0x04
    183e:	3d 81       	ldd	r19, Y+5	; 0x05
    1840:	22 30       	cpi	r18, 0x02	; 2
    1842:	31 05       	cpc	r19, r1
    1844:	09 f4       	brne	.+2      	; 0x1848 <GPIO_SetPinDir+0x5a>
    1846:	5f c0       	rjmp	.+190    	; 0x1906 <GPIO_SetPinDir+0x118>
    1848:	8c 81       	ldd	r24, Y+4	; 0x04
    184a:	9d 81       	ldd	r25, Y+5	; 0x05
    184c:	83 30       	cpi	r24, 0x03	; 3
    184e:	91 05       	cpc	r25, r1
    1850:	09 f4       	brne	.+2      	; 0x1854 <GPIO_SetPinDir+0x66>
    1852:	85 c0       	rjmp	.+266    	; 0x195e <GPIO_SetPinDir+0x170>
    1854:	af c0       	rjmp	.+350    	; 0x19b4 <GPIO_SetPinDir+0x1c6>
		{
		case PORTA_ID:
			if(Dir == pin_output)
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	81 30       	cpi	r24, 0x01	; 1
    185a:	a1 f4       	brne	.+40     	; 0x1884 <GPIO_SetPinDir+0x96>
			{
				SET_BIT(DDRA_REG,PINn);
    185c:	aa e3       	ldi	r26, 0x3A	; 58
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	ea e3       	ldi	r30, 0x3A	; 58
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	48 2f       	mov	r20, r24
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	28 2f       	mov	r18, r24
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	02 2e       	mov	r0, r18
    1874:	02 c0       	rjmp	.+4      	; 0x187a <GPIO_SetPinDir+0x8c>
    1876:	88 0f       	add	r24, r24
    1878:	99 1f       	adc	r25, r25
    187a:	0a 94       	dec	r0
    187c:	e2 f7       	brpl	.-8      	; 0x1876 <GPIO_SetPinDir+0x88>
    187e:	84 2b       	or	r24, r20
    1880:	8c 93       	st	X, r24
    1882:	98 c0       	rjmp	.+304    	; 0x19b4 <GPIO_SetPinDir+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA_REG,PINn);
    1884:	aa e3       	ldi	r26, 0x3A	; 58
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	ea e3       	ldi	r30, 0x3A	; 58
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	48 2f       	mov	r20, r24
    1890:	8a 81       	ldd	r24, Y+2	; 0x02
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	02 2e       	mov	r0, r18
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <GPIO_SetPinDir+0xb4>
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	0a 94       	dec	r0
    18a4:	e2 f7       	brpl	.-8      	; 0x189e <GPIO_SetPinDir+0xb0>
    18a6:	80 95       	com	r24
    18a8:	84 23       	and	r24, r20
    18aa:	8c 93       	st	X, r24
    18ac:	83 c0       	rjmp	.+262    	; 0x19b4 <GPIO_SetPinDir+0x1c6>
			}
			break;
		case PORTB_ID:
			if(Dir == pin_output)
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	81 30       	cpi	r24, 0x01	; 1
    18b2:	a1 f4       	brne	.+40     	; 0x18dc <GPIO_SetPinDir+0xee>
			{
				SET_BIT(DDRB_REG,PINn);
    18b4:	a7 e3       	ldi	r26, 0x37	; 55
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	e7 e3       	ldi	r30, 0x37	; 55
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	48 2f       	mov	r20, r24
    18c0:	8a 81       	ldd	r24, Y+2	; 0x02
    18c2:	28 2f       	mov	r18, r24
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	02 2e       	mov	r0, r18
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <GPIO_SetPinDir+0xe4>
    18ce:	88 0f       	add	r24, r24
    18d0:	99 1f       	adc	r25, r25
    18d2:	0a 94       	dec	r0
    18d4:	e2 f7       	brpl	.-8      	; 0x18ce <GPIO_SetPinDir+0xe0>
    18d6:	84 2b       	or	r24, r20
    18d8:	8c 93       	st	X, r24
    18da:	6c c0       	rjmp	.+216    	; 0x19b4 <GPIO_SetPinDir+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB_REG,PINn);
    18dc:	a7 e3       	ldi	r26, 0x37	; 55
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	e7 e3       	ldi	r30, 0x37	; 55
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	48 2f       	mov	r20, r24
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	28 2f       	mov	r18, r24
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	02 2e       	mov	r0, r18
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <GPIO_SetPinDir+0x10c>
    18f6:	88 0f       	add	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	0a 94       	dec	r0
    18fc:	e2 f7       	brpl	.-8      	; 0x18f6 <GPIO_SetPinDir+0x108>
    18fe:	80 95       	com	r24
    1900:	84 23       	and	r24, r20
    1902:	8c 93       	st	X, r24
    1904:	57 c0       	rjmp	.+174    	; 0x19b4 <GPIO_SetPinDir+0x1c6>
			}
			break;
		case PORTC_ID:
			if(Dir == pin_output)
    1906:	8b 81       	ldd	r24, Y+3	; 0x03
    1908:	81 30       	cpi	r24, 0x01	; 1
    190a:	a1 f4       	brne	.+40     	; 0x1934 <GPIO_SetPinDir+0x146>
			{
				SET_BIT(DDRC_REG,PINn);
    190c:	a4 e3       	ldi	r26, 0x34	; 52
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	e4 e3       	ldi	r30, 0x34	; 52
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	48 2f       	mov	r20, r24
    1918:	8a 81       	ldd	r24, Y+2	; 0x02
    191a:	28 2f       	mov	r18, r24
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	02 2e       	mov	r0, r18
    1924:	02 c0       	rjmp	.+4      	; 0x192a <GPIO_SetPinDir+0x13c>
    1926:	88 0f       	add	r24, r24
    1928:	99 1f       	adc	r25, r25
    192a:	0a 94       	dec	r0
    192c:	e2 f7       	brpl	.-8      	; 0x1926 <GPIO_SetPinDir+0x138>
    192e:	84 2b       	or	r24, r20
    1930:	8c 93       	st	X, r24
    1932:	40 c0       	rjmp	.+128    	; 0x19b4 <GPIO_SetPinDir+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC_REG,PINn);
    1934:	a4 e3       	ldi	r26, 0x34	; 52
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	e4 e3       	ldi	r30, 0x34	; 52
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	48 2f       	mov	r20, r24
    1940:	8a 81       	ldd	r24, Y+2	; 0x02
    1942:	28 2f       	mov	r18, r24
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	02 2e       	mov	r0, r18
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <GPIO_SetPinDir+0x164>
    194e:	88 0f       	add	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	0a 94       	dec	r0
    1954:	e2 f7       	brpl	.-8      	; 0x194e <GPIO_SetPinDir+0x160>
    1956:	80 95       	com	r24
    1958:	84 23       	and	r24, r20
    195a:	8c 93       	st	X, r24
    195c:	2b c0       	rjmp	.+86     	; 0x19b4 <GPIO_SetPinDir+0x1c6>
			}
			break;
		case PORTD_ID:
			if(Dir == pin_output)
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	81 30       	cpi	r24, 0x01	; 1
    1962:	a1 f4       	brne	.+40     	; 0x198c <GPIO_SetPinDir+0x19e>
			{
				SET_BIT(DDRD_REG,PINn);
    1964:	a1 e3       	ldi	r26, 0x31	; 49
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	e1 e3       	ldi	r30, 0x31	; 49
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	48 2f       	mov	r20, r24
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	28 2f       	mov	r18, r24
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	02 2e       	mov	r0, r18
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <GPIO_SetPinDir+0x194>
    197e:	88 0f       	add	r24, r24
    1980:	99 1f       	adc	r25, r25
    1982:	0a 94       	dec	r0
    1984:	e2 f7       	brpl	.-8      	; 0x197e <GPIO_SetPinDir+0x190>
    1986:	84 2b       	or	r24, r20
    1988:	8c 93       	st	X, r24
    198a:	14 c0       	rjmp	.+40     	; 0x19b4 <GPIO_SetPinDir+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD_REG,PINn);
    198c:	a1 e3       	ldi	r26, 0x31	; 49
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e1 e3       	ldi	r30, 0x31	; 49
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	48 2f       	mov	r20, r24
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	28 2f       	mov	r18, r24
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	02 2e       	mov	r0, r18
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <GPIO_SetPinDir+0x1bc>
    19a6:	88 0f       	add	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	0a 94       	dec	r0
    19ac:	e2 f7       	brpl	.-8      	; 0x19a6 <GPIO_SetPinDir+0x1b8>
    19ae:	80 95       	com	r24
    19b0:	84 23       	and	r24, r20
    19b2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <GPIO_ReadPin>:
 [Args]: PORTn_ID(n=A,B,C,D) and PINn_ID(n =0...7)
 [RUTURN]: uint8
 [NOTE]: if Number of PORTn >= 4 OR PINn >= 8 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
uint8 GPIO_ReadPin(uint8 PORTn, uint8 PINn)
{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	00 d0       	rcall	.+0      	; 0x19ca <GPIO_ReadPin+0x6>
    19ca:	00 d0       	rcall	.+0      	; 0x19cc <GPIO_ReadPin+0x8>
    19cc:	0f 92       	push	r0
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	8a 83       	std	Y+2, r24	; 0x02
    19d4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    19d6:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((PORTn >= NUM_OF_PORTS) || (PINn >= NUM_OF_PINS_PER_PORT))
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	84 30       	cpi	r24, 0x04	; 4
    19dc:	08 f0       	brcs	.+2      	; 0x19e0 <GPIO_ReadPin+0x1c>
    19de:	84 c0       	rjmp	.+264    	; 0x1ae8 <GPIO_ReadPin+0x124>
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	88 30       	cpi	r24, 0x08	; 8
    19e4:	08 f0       	brcs	.+2      	; 0x19e8 <GPIO_ReadPin+0x24>
    19e6:	80 c0       	rjmp	.+256    	; 0x1ae8 <GPIO_ReadPin+0x124>
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		/* Read the pin value as required */
		switch(PORTn)
    19e8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ea:	28 2f       	mov	r18, r24
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	3d 83       	std	Y+5, r19	; 0x05
    19f0:	2c 83       	std	Y+4, r18	; 0x04
    19f2:	4c 81       	ldd	r20, Y+4	; 0x04
    19f4:	5d 81       	ldd	r21, Y+5	; 0x05
    19f6:	41 30       	cpi	r20, 0x01	; 1
    19f8:	51 05       	cpc	r21, r1
    19fa:	79 f1       	breq	.+94     	; 0x1a5a <GPIO_ReadPin+0x96>
    19fc:	8c 81       	ldd	r24, Y+4	; 0x04
    19fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1a00:	82 30       	cpi	r24, 0x02	; 2
    1a02:	91 05       	cpc	r25, r1
    1a04:	34 f4       	brge	.+12     	; 0x1a12 <GPIO_ReadPin+0x4e>
    1a06:	2c 81       	ldd	r18, Y+4	; 0x04
    1a08:	3d 81       	ldd	r19, Y+5	; 0x05
    1a0a:	21 15       	cp	r18, r1
    1a0c:	31 05       	cpc	r19, r1
    1a0e:	69 f0       	breq	.+26     	; 0x1a2a <GPIO_ReadPin+0x66>
    1a10:	6b c0       	rjmp	.+214    	; 0x1ae8 <GPIO_ReadPin+0x124>
    1a12:	4c 81       	ldd	r20, Y+4	; 0x04
    1a14:	5d 81       	ldd	r21, Y+5	; 0x05
    1a16:	42 30       	cpi	r20, 0x02	; 2
    1a18:	51 05       	cpc	r21, r1
    1a1a:	b9 f1       	breq	.+110    	; 0x1a8a <GPIO_ReadPin+0xc6>
    1a1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a20:	83 30       	cpi	r24, 0x03	; 3
    1a22:	91 05       	cpc	r25, r1
    1a24:	09 f4       	brne	.+2      	; 0x1a28 <GPIO_ReadPin+0x64>
    1a26:	49 c0       	rjmp	.+146    	; 0x1aba <GPIO_ReadPin+0xf6>
    1a28:	5f c0       	rjmp	.+190    	; 0x1ae8 <GPIO_ReadPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA_REG,PINn))
    1a2a:	e9 e3       	ldi	r30, 0x39	; 57
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	28 2f       	mov	r18, r24
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	88 2f       	mov	r24, r24
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	a9 01       	movw	r20, r18
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <GPIO_ReadPin+0x7e>
    1a3e:	55 95       	asr	r21
    1a40:	47 95       	ror	r20
    1a42:	8a 95       	dec	r24
    1a44:	e2 f7       	brpl	.-8      	; 0x1a3e <GPIO_ReadPin+0x7a>
    1a46:	ca 01       	movw	r24, r20
    1a48:	81 70       	andi	r24, 0x01	; 1
    1a4a:	90 70       	andi	r25, 0x00	; 0
    1a4c:	88 23       	and	r24, r24
    1a4e:	19 f0       	breq	.+6      	; 0x1a56 <GPIO_ReadPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	89 83       	std	Y+1, r24	; 0x01
    1a54:	49 c0       	rjmp	.+146    	; 0x1ae8 <GPIO_ReadPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a56:	19 82       	std	Y+1, r1	; 0x01
    1a58:	47 c0       	rjmp	.+142    	; 0x1ae8 <GPIO_ReadPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB_REG,PINn))
    1a5a:	e6 e3       	ldi	r30, 0x36	; 54
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	28 2f       	mov	r18, r24
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	88 2f       	mov	r24, r24
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	a9 01       	movw	r20, r18
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <GPIO_ReadPin+0xae>
    1a6e:	55 95       	asr	r21
    1a70:	47 95       	ror	r20
    1a72:	8a 95       	dec	r24
    1a74:	e2 f7       	brpl	.-8      	; 0x1a6e <GPIO_ReadPin+0xaa>
    1a76:	ca 01       	movw	r24, r20
    1a78:	81 70       	andi	r24, 0x01	; 1
    1a7a:	90 70       	andi	r25, 0x00	; 0
    1a7c:	88 23       	and	r24, r24
    1a7e:	19 f0       	breq	.+6      	; 0x1a86 <GPIO_ReadPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	89 83       	std	Y+1, r24	; 0x01
    1a84:	31 c0       	rjmp	.+98     	; 0x1ae8 <GPIO_ReadPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a86:	19 82       	std	Y+1, r1	; 0x01
    1a88:	2f c0       	rjmp	.+94     	; 0x1ae8 <GPIO_ReadPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC_REG,PINn))
    1a8a:	e3 e3       	ldi	r30, 0x33	; 51
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	88 2f       	mov	r24, r24
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	a9 01       	movw	r20, r18
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <GPIO_ReadPin+0xde>
    1a9e:	55 95       	asr	r21
    1aa0:	47 95       	ror	r20
    1aa2:	8a 95       	dec	r24
    1aa4:	e2 f7       	brpl	.-8      	; 0x1a9e <GPIO_ReadPin+0xda>
    1aa6:	ca 01       	movw	r24, r20
    1aa8:	81 70       	andi	r24, 0x01	; 1
    1aaa:	90 70       	andi	r25, 0x00	; 0
    1aac:	88 23       	and	r24, r24
    1aae:	19 f0       	breq	.+6      	; 0x1ab6 <GPIO_ReadPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	89 83       	std	Y+1, r24	; 0x01
    1ab4:	19 c0       	rjmp	.+50     	; 0x1ae8 <GPIO_ReadPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ab6:	19 82       	std	Y+1, r1	; 0x01
    1ab8:	17 c0       	rjmp	.+46     	; 0x1ae8 <GPIO_ReadPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND_REG,PINn))
    1aba:	e0 e3       	ldi	r30, 0x30	; 48
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac6:	88 2f       	mov	r24, r24
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	a9 01       	movw	r20, r18
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <GPIO_ReadPin+0x10e>
    1ace:	55 95       	asr	r21
    1ad0:	47 95       	ror	r20
    1ad2:	8a 95       	dec	r24
    1ad4:	e2 f7       	brpl	.-8      	; 0x1ace <GPIO_ReadPin+0x10a>
    1ad6:	ca 01       	movw	r24, r20
    1ad8:	81 70       	andi	r24, 0x01	; 1
    1ada:	90 70       	andi	r25, 0x00	; 0
    1adc:	88 23       	and	r24, r24
    1ade:	19 f0       	breq	.+6      	; 0x1ae6 <GPIO_ReadPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	89 83       	std	Y+1, r24	; 0x01
    1ae4:	01 c0       	rjmp	.+2      	; 0x1ae8 <GPIO_ReadPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ae6:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	cf 91       	pop	r28
    1af6:	df 91       	pop	r29
    1af8:	08 95       	ret

00001afa <GPIO_WritePin>:
 [Args]: PORTn_ID(n=A,B,C,D) and PINn_ID(n =0...7) and Level (logic_low or logic_high)
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 OR PINn >= 8 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_WritePin(uint8 PORTn, uint8 PINn, STD_LevelType level)
{
    1afa:	df 93       	push	r29
    1afc:	cf 93       	push	r28
    1afe:	00 d0       	rcall	.+0      	; 0x1b00 <GPIO_WritePin+0x6>
    1b00:	00 d0       	rcall	.+0      	; 0x1b02 <GPIO_WritePin+0x8>
    1b02:	0f 92       	push	r0
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
    1b08:	89 83       	std	Y+1, r24	; 0x01
    1b0a:	6a 83       	std	Y+2, r22	; 0x02
    1b0c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((PORTn >= NUM_OF_PORTS) || (PINn >= NUM_OF_PINS_PER_PORT))
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	84 30       	cpi	r24, 0x04	; 4
    1b12:	08 f0       	brcs	.+2      	; 0x1b16 <GPIO_WritePin+0x1c>
    1b14:	d5 c0       	rjmp	.+426    	; 0x1cc0 <GPIO_WritePin+0x1c6>
    1b16:	8a 81       	ldd	r24, Y+2	; 0x02
    1b18:	88 30       	cpi	r24, 0x08	; 8
    1b1a:	08 f0       	brcs	.+2      	; 0x1b1e <GPIO_WritePin+0x24>
    1b1c:	d1 c0       	rjmp	.+418    	; 0x1cc0 <GPIO_WritePin+0x1c6>
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		/* Write the pin value as required */
		switch(PORTn)
    1b1e:	89 81       	ldd	r24, Y+1	; 0x01
    1b20:	28 2f       	mov	r18, r24
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	3d 83       	std	Y+5, r19	; 0x05
    1b26:	2c 83       	std	Y+4, r18	; 0x04
    1b28:	8c 81       	ldd	r24, Y+4	; 0x04
    1b2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b2c:	81 30       	cpi	r24, 0x01	; 1
    1b2e:	91 05       	cpc	r25, r1
    1b30:	09 f4       	brne	.+2      	; 0x1b34 <GPIO_WritePin+0x3a>
    1b32:	43 c0       	rjmp	.+134    	; 0x1bba <GPIO_WritePin+0xc0>
    1b34:	2c 81       	ldd	r18, Y+4	; 0x04
    1b36:	3d 81       	ldd	r19, Y+5	; 0x05
    1b38:	22 30       	cpi	r18, 0x02	; 2
    1b3a:	31 05       	cpc	r19, r1
    1b3c:	2c f4       	brge	.+10     	; 0x1b48 <GPIO_WritePin+0x4e>
    1b3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b40:	9d 81       	ldd	r25, Y+5	; 0x05
    1b42:	00 97       	sbiw	r24, 0x00	; 0
    1b44:	71 f0       	breq	.+28     	; 0x1b62 <GPIO_WritePin+0x68>
    1b46:	bc c0       	rjmp	.+376    	; 0x1cc0 <GPIO_WritePin+0x1c6>
    1b48:	2c 81       	ldd	r18, Y+4	; 0x04
    1b4a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b4c:	22 30       	cpi	r18, 0x02	; 2
    1b4e:	31 05       	cpc	r19, r1
    1b50:	09 f4       	brne	.+2      	; 0x1b54 <GPIO_WritePin+0x5a>
    1b52:	5f c0       	rjmp	.+190    	; 0x1c12 <GPIO_WritePin+0x118>
    1b54:	8c 81       	ldd	r24, Y+4	; 0x04
    1b56:	9d 81       	ldd	r25, Y+5	; 0x05
    1b58:	83 30       	cpi	r24, 0x03	; 3
    1b5a:	91 05       	cpc	r25, r1
    1b5c:	09 f4       	brne	.+2      	; 0x1b60 <GPIO_WritePin+0x66>
    1b5e:	85 c0       	rjmp	.+266    	; 0x1c6a <GPIO_WritePin+0x170>
    1b60:	af c0       	rjmp	.+350    	; 0x1cc0 <GPIO_WritePin+0x1c6>
		{
		case PORTA_ID:
			if(level == LOGIC_HIGH)
    1b62:	8b 81       	ldd	r24, Y+3	; 0x03
    1b64:	81 30       	cpi	r24, 0x01	; 1
    1b66:	a1 f4       	brne	.+40     	; 0x1b90 <GPIO_WritePin+0x96>
			{
				SET_BIT(PORTA_REG,PINn);
    1b68:	ab e3       	ldi	r26, 0x3B	; 59
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	eb e3       	ldi	r30, 0x3B	; 59
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	48 2f       	mov	r20, r24
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	28 2f       	mov	r18, r24
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	02 2e       	mov	r0, r18
    1b80:	02 c0       	rjmp	.+4      	; 0x1b86 <GPIO_WritePin+0x8c>
    1b82:	88 0f       	add	r24, r24
    1b84:	99 1f       	adc	r25, r25
    1b86:	0a 94       	dec	r0
    1b88:	e2 f7       	brpl	.-8      	; 0x1b82 <GPIO_WritePin+0x88>
    1b8a:	84 2b       	or	r24, r20
    1b8c:	8c 93       	st	X, r24
    1b8e:	98 c0       	rjmp	.+304    	; 0x1cc0 <GPIO_WritePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA_REG,PINn);
    1b90:	ab e3       	ldi	r26, 0x3B	; 59
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	eb e3       	ldi	r30, 0x3B	; 59
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	48 2f       	mov	r20, r24
    1b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9e:	28 2f       	mov	r18, r24
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	02 2e       	mov	r0, r18
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <GPIO_WritePin+0xb4>
    1baa:	88 0f       	add	r24, r24
    1bac:	99 1f       	adc	r25, r25
    1bae:	0a 94       	dec	r0
    1bb0:	e2 f7       	brpl	.-8      	; 0x1baa <GPIO_WritePin+0xb0>
    1bb2:	80 95       	com	r24
    1bb4:	84 23       	and	r24, r20
    1bb6:	8c 93       	st	X, r24
    1bb8:	83 c0       	rjmp	.+262    	; 0x1cc0 <GPIO_WritePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(level == LOGIC_HIGH)
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	81 30       	cpi	r24, 0x01	; 1
    1bbe:	a1 f4       	brne	.+40     	; 0x1be8 <GPIO_WritePin+0xee>
			{
				SET_BIT(PORTB_REG,PINn);
    1bc0:	a8 e3       	ldi	r26, 0x38	; 56
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	e8 e3       	ldi	r30, 0x38	; 56
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	48 2f       	mov	r20, r24
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	02 2e       	mov	r0, r18
    1bd8:	02 c0       	rjmp	.+4      	; 0x1bde <GPIO_WritePin+0xe4>
    1bda:	88 0f       	add	r24, r24
    1bdc:	99 1f       	adc	r25, r25
    1bde:	0a 94       	dec	r0
    1be0:	e2 f7       	brpl	.-8      	; 0x1bda <GPIO_WritePin+0xe0>
    1be2:	84 2b       	or	r24, r20
    1be4:	8c 93       	st	X, r24
    1be6:	6c c0       	rjmp	.+216    	; 0x1cc0 <GPIO_WritePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB_REG,PINn);
    1be8:	a8 e3       	ldi	r26, 0x38	; 56
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	e8 e3       	ldi	r30, 0x38	; 56
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	48 2f       	mov	r20, r24
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	02 2e       	mov	r0, r18
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <GPIO_WritePin+0x10c>
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	0a 94       	dec	r0
    1c08:	e2 f7       	brpl	.-8      	; 0x1c02 <GPIO_WritePin+0x108>
    1c0a:	80 95       	com	r24
    1c0c:	84 23       	and	r24, r20
    1c0e:	8c 93       	st	X, r24
    1c10:	57 c0       	rjmp	.+174    	; 0x1cc0 <GPIO_WritePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(level == LOGIC_HIGH)
    1c12:	8b 81       	ldd	r24, Y+3	; 0x03
    1c14:	81 30       	cpi	r24, 0x01	; 1
    1c16:	a1 f4       	brne	.+40     	; 0x1c40 <GPIO_WritePin+0x146>
			{
				SET_BIT(PORTC_REG,PINn);
    1c18:	a5 e3       	ldi	r26, 0x35	; 53
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e5 e3       	ldi	r30, 0x35	; 53
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	48 2f       	mov	r20, r24
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	02 2e       	mov	r0, r18
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <GPIO_WritePin+0x13c>
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	0a 94       	dec	r0
    1c38:	e2 f7       	brpl	.-8      	; 0x1c32 <GPIO_WritePin+0x138>
    1c3a:	84 2b       	or	r24, r20
    1c3c:	8c 93       	st	X, r24
    1c3e:	40 c0       	rjmp	.+128    	; 0x1cc0 <GPIO_WritePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC_REG,PINn);
    1c40:	a5 e3       	ldi	r26, 0x35	; 53
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	e5 e3       	ldi	r30, 0x35	; 53
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	48 2f       	mov	r20, r24
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	02 2e       	mov	r0, r18
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <GPIO_WritePin+0x164>
    1c5a:	88 0f       	add	r24, r24
    1c5c:	99 1f       	adc	r25, r25
    1c5e:	0a 94       	dec	r0
    1c60:	e2 f7       	brpl	.-8      	; 0x1c5a <GPIO_WritePin+0x160>
    1c62:	80 95       	com	r24
    1c64:	84 23       	and	r24, r20
    1c66:	8c 93       	st	X, r24
    1c68:	2b c0       	rjmp	.+86     	; 0x1cc0 <GPIO_WritePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(level == LOGIC_HIGH)
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	81 30       	cpi	r24, 0x01	; 1
    1c6e:	a1 f4       	brne	.+40     	; 0x1c98 <GPIO_WritePin+0x19e>
			{
				SET_BIT(PORTD_REG,PINn);
    1c70:	a2 e3       	ldi	r26, 0x32	; 50
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e2 e3       	ldi	r30, 0x32	; 50
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	48 2f       	mov	r20, r24
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	28 2f       	mov	r18, r24
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	02 2e       	mov	r0, r18
    1c88:	02 c0       	rjmp	.+4      	; 0x1c8e <GPIO_WritePin+0x194>
    1c8a:	88 0f       	add	r24, r24
    1c8c:	99 1f       	adc	r25, r25
    1c8e:	0a 94       	dec	r0
    1c90:	e2 f7       	brpl	.-8      	; 0x1c8a <GPIO_WritePin+0x190>
    1c92:	84 2b       	or	r24, r20
    1c94:	8c 93       	st	X, r24
    1c96:	14 c0       	rjmp	.+40     	; 0x1cc0 <GPIO_WritePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD_REG,PINn);
    1c98:	a2 e3       	ldi	r26, 0x32	; 50
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e2 e3       	ldi	r30, 0x32	; 50
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	48 2f       	mov	r20, r24
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	02 2e       	mov	r0, r18
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <GPIO_WritePin+0x1bc>
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	0a 94       	dec	r0
    1cb8:	e2 f7       	brpl	.-8      	; 0x1cb2 <GPIO_WritePin+0x1b8>
    1cba:	80 95       	com	r24
    1cbc:	84 23       	and	r24, r20
    1cbe:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	08 95       	ret

00001cd0 <GPIO_FlipPin>:
 [Args]: PORTn_ID(n=A,B,C,D) and PINn_ID(n =0...7)
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 OR PINn >= 8 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_FlipPin(uint8 PORTn, uint8 PINn)
{
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	00 d0       	rcall	.+0      	; 0x1cd6 <GPIO_FlipPin+0x6>
    1cd6:	00 d0       	rcall	.+0      	; 0x1cd8 <GPIO_FlipPin+0x8>
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	89 83       	std	Y+1, r24	; 0x01
    1cde:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((PORTn >= NUM_OF_PORTS) || (PINn >= NUM_OF_PINS_PER_PORT))
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	84 30       	cpi	r24, 0x04	; 4
    1ce4:	08 f0       	brcs	.+2      	; 0x1ce8 <GPIO_FlipPin+0x18>
    1ce6:	72 c0       	rjmp	.+228    	; 0x1dcc <GPIO_FlipPin+0xfc>
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	88 30       	cpi	r24, 0x08	; 8
    1cec:	08 f0       	brcs	.+2      	; 0x1cf0 <GPIO_FlipPin+0x20>
    1cee:	6e c0       	rjmp	.+220    	; 0x1dcc <GPIO_FlipPin+0xfc>
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		/* Flip the pin value as required */
		switch(PORTn)
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	28 2f       	mov	r18, r24
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	3c 83       	std	Y+4, r19	; 0x04
    1cf8:	2b 83       	std	Y+3, r18	; 0x03
    1cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfe:	81 30       	cpi	r24, 0x01	; 1
    1d00:	91 05       	cpc	r25, r1
    1d02:	49 f1       	breq	.+82     	; 0x1d56 <GPIO_FlipPin+0x86>
    1d04:	2b 81       	ldd	r18, Y+3	; 0x03
    1d06:	3c 81       	ldd	r19, Y+4	; 0x04
    1d08:	22 30       	cpi	r18, 0x02	; 2
    1d0a:	31 05       	cpc	r19, r1
    1d0c:	2c f4       	brge	.+10     	; 0x1d18 <GPIO_FlipPin+0x48>
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	9c 81       	ldd	r25, Y+4	; 0x04
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	61 f0       	breq	.+24     	; 0x1d2e <GPIO_FlipPin+0x5e>
    1d16:	5a c0       	rjmp	.+180    	; 0x1dcc <GPIO_FlipPin+0xfc>
    1d18:	2b 81       	ldd	r18, Y+3	; 0x03
    1d1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d1c:	22 30       	cpi	r18, 0x02	; 2
    1d1e:	31 05       	cpc	r19, r1
    1d20:	71 f1       	breq	.+92     	; 0x1d7e <GPIO_FlipPin+0xae>
    1d22:	8b 81       	ldd	r24, Y+3	; 0x03
    1d24:	9c 81       	ldd	r25, Y+4	; 0x04
    1d26:	83 30       	cpi	r24, 0x03	; 3
    1d28:	91 05       	cpc	r25, r1
    1d2a:	e9 f1       	breq	.+122    	; 0x1da6 <GPIO_FlipPin+0xd6>
    1d2c:	4f c0       	rjmp	.+158    	; 0x1dcc <GPIO_FlipPin+0xfc>
		{
		case PORTA_ID:
			TOGGLE_BIT(PORTA_REG,PINn);
    1d2e:	ab e3       	ldi	r26, 0x3B	; 59
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	eb e3       	ldi	r30, 0x3B	; 59
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	48 2f       	mov	r20, r24
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	02 2e       	mov	r0, r18
    1d46:	02 c0       	rjmp	.+4      	; 0x1d4c <GPIO_FlipPin+0x7c>
    1d48:	88 0f       	add	r24, r24
    1d4a:	99 1f       	adc	r25, r25
    1d4c:	0a 94       	dec	r0
    1d4e:	e2 f7       	brpl	.-8      	; 0x1d48 <GPIO_FlipPin+0x78>
    1d50:	84 27       	eor	r24, r20
    1d52:	8c 93       	st	X, r24
    1d54:	3b c0       	rjmp	.+118    	; 0x1dcc <GPIO_FlipPin+0xfc>
			break;
		case PORTB_ID:
			TOGGLE_BIT(PORTB_REG,PINn);
    1d56:	a8 e3       	ldi	r26, 0x38	; 56
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	e8 e3       	ldi	r30, 0x38	; 56
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	48 2f       	mov	r20, r24
    1d62:	8a 81       	ldd	r24, Y+2	; 0x02
    1d64:	28 2f       	mov	r18, r24
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	02 2e       	mov	r0, r18
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <GPIO_FlipPin+0xa4>
    1d70:	88 0f       	add	r24, r24
    1d72:	99 1f       	adc	r25, r25
    1d74:	0a 94       	dec	r0
    1d76:	e2 f7       	brpl	.-8      	; 0x1d70 <GPIO_FlipPin+0xa0>
    1d78:	84 27       	eor	r24, r20
    1d7a:	8c 93       	st	X, r24
    1d7c:	27 c0       	rjmp	.+78     	; 0x1dcc <GPIO_FlipPin+0xfc>
			break;
		case PORTC_ID:
			TOGGLE_BIT(PORTC_REG,PINn);
    1d7e:	a5 e3       	ldi	r26, 0x35	; 53
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e5 e3       	ldi	r30, 0x35	; 53
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	48 2f       	mov	r20, r24
    1d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8c:	28 2f       	mov	r18, r24
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	02 2e       	mov	r0, r18
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <GPIO_FlipPin+0xcc>
    1d98:	88 0f       	add	r24, r24
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	0a 94       	dec	r0
    1d9e:	e2 f7       	brpl	.-8      	; 0x1d98 <GPIO_FlipPin+0xc8>
    1da0:	84 27       	eor	r24, r20
    1da2:	8c 93       	st	X, r24
    1da4:	13 c0       	rjmp	.+38     	; 0x1dcc <GPIO_FlipPin+0xfc>
			break;
		case PORTD_ID:
			TOGGLE_BIT(PORTD_REG,PINn);
    1da6:	a2 e3       	ldi	r26, 0x32	; 50
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	e2 e3       	ldi	r30, 0x32	; 50
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	48 2f       	mov	r20, r24
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	02 2e       	mov	r0, r18
    1dbe:	02 c0       	rjmp	.+4      	; 0x1dc4 <GPIO_FlipPin+0xf4>
    1dc0:	88 0f       	add	r24, r24
    1dc2:	99 1f       	adc	r25, r25
    1dc4:	0a 94       	dec	r0
    1dc6:	e2 f7       	brpl	.-8      	; 0x1dc0 <GPIO_FlipPin+0xf0>
    1dc8:	84 27       	eor	r24, r20
    1dca:	8c 93       	st	X, r24
			break;
		}
	}
}
    1dcc:	0f 90       	pop	r0
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	cf 91       	pop	r28
    1dd6:	df 91       	pop	r29
    1dd8:	08 95       	ret

00001dda <GPIO_SetPortDir>:
 [Args]: PORTn_ID(n=A,B,C,D) and Direction (input_port or output_port)
 [RUTURN]: Void
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_SetPortDir(uint8 PORTn, GPIO_PortDirection Dir)
{
    1dda:	df 93       	push	r29
    1ddc:	cf 93       	push	r28
    1dde:	00 d0       	rcall	.+0      	; 0x1de0 <GPIO_SetPortDir+0x6>
    1de0:	00 d0       	rcall	.+0      	; 0x1de2 <GPIO_SetPortDir+0x8>
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	89 83       	std	Y+1, r24	; 0x01
    1de8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    1dea:	89 81       	ldd	r24, Y+1	; 0x01
    1dec:	84 30       	cpi	r24, 0x04	; 4
    1dee:	90 f5       	brcc	.+100    	; 0x1e54 <GPIO_SetPortDir+0x7a>
	{
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		switch(PORTn)
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
    1df2:	28 2f       	mov	r18, r24
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	3c 83       	std	Y+4, r19	; 0x04
    1df8:	2b 83       	std	Y+3, r18	; 0x03
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfe:	81 30       	cpi	r24, 0x01	; 1
    1e00:	91 05       	cpc	r25, r1
    1e02:	d1 f0       	breq	.+52     	; 0x1e38 <GPIO_SetPortDir+0x5e>
    1e04:	2b 81       	ldd	r18, Y+3	; 0x03
    1e06:	3c 81       	ldd	r19, Y+4	; 0x04
    1e08:	22 30       	cpi	r18, 0x02	; 2
    1e0a:	31 05       	cpc	r19, r1
    1e0c:	2c f4       	brge	.+10     	; 0x1e18 <GPIO_SetPortDir+0x3e>
    1e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e10:	9c 81       	ldd	r25, Y+4	; 0x04
    1e12:	00 97       	sbiw	r24, 0x00	; 0
    1e14:	61 f0       	breq	.+24     	; 0x1e2e <GPIO_SetPortDir+0x54>
    1e16:	1e c0       	rjmp	.+60     	; 0x1e54 <GPIO_SetPortDir+0x7a>
    1e18:	2b 81       	ldd	r18, Y+3	; 0x03
    1e1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e1c:	22 30       	cpi	r18, 0x02	; 2
    1e1e:	31 05       	cpc	r19, r1
    1e20:	81 f0       	breq	.+32     	; 0x1e42 <GPIO_SetPortDir+0x68>
    1e22:	8b 81       	ldd	r24, Y+3	; 0x03
    1e24:	9c 81       	ldd	r25, Y+4	; 0x04
    1e26:	83 30       	cpi	r24, 0x03	; 3
    1e28:	91 05       	cpc	r25, r1
    1e2a:	81 f0       	breq	.+32     	; 0x1e4c <GPIO_SetPortDir+0x72>
    1e2c:	13 c0       	rjmp	.+38     	; 0x1e54 <GPIO_SetPortDir+0x7a>
		{
		case PORTA_ID:
			DDRA_REG = Dir;
    1e2e:	ea e3       	ldi	r30, 0x3A	; 58
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	8a 81       	ldd	r24, Y+2	; 0x02
    1e34:	80 83       	st	Z, r24
    1e36:	0e c0       	rjmp	.+28     	; 0x1e54 <GPIO_SetPortDir+0x7a>
			break;
		case PORTB_ID:
			DDRB_REG = Dir;
    1e38:	e7 e3       	ldi	r30, 0x37	; 55
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3e:	80 83       	st	Z, r24
    1e40:	09 c0       	rjmp	.+18     	; 0x1e54 <GPIO_SetPortDir+0x7a>
			break;
		case PORTC_ID:
			DDRC_REG = Dir;
    1e42:	e4 e3       	ldi	r30, 0x34	; 52
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	80 83       	st	Z, r24
    1e4a:	04 c0       	rjmp	.+8      	; 0x1e54 <GPIO_SetPortDir+0x7a>
			break;
		case PORTD_ID:
			DDRD_REG = Dir;
    1e4c:	e1 e3       	ldi	r30, 0x31	; 49
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	8a 81       	ldd	r24, Y+2	; 0x02
    1e52:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	08 95       	ret

00001e62 <GPIO_ReadPort>:
 [Args]: PORTn_ID(n=A,B,C,D)
 [RUTURN]: uint8
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
uint8 GPIO_ReadPort(uint8 PORTn)
{
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	00 d0       	rcall	.+0      	; 0x1e68 <GPIO_ReadPort+0x6>
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <GPIO_ReadPort+0x8>
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
    1e6e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_value = LOGIC_LOW;
    1e70:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    1e72:	8a 81       	ldd	r24, Y+2	; 0x02
    1e74:	84 30       	cpi	r24, 0x04	; 4
    1e76:	90 f5       	brcc	.+100    	; 0x1edc <GPIO_ReadPort+0x7a>
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		/* Read the port value as required */
		switch(PORTn)
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	28 2f       	mov	r18, r24
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	3c 83       	std	Y+4, r19	; 0x04
    1e80:	2b 83       	std	Y+3, r18	; 0x03
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	9c 81       	ldd	r25, Y+4	; 0x04
    1e86:	81 30       	cpi	r24, 0x01	; 1
    1e88:	91 05       	cpc	r25, r1
    1e8a:	d1 f0       	breq	.+52     	; 0x1ec0 <GPIO_ReadPort+0x5e>
    1e8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e90:	22 30       	cpi	r18, 0x02	; 2
    1e92:	31 05       	cpc	r19, r1
    1e94:	2c f4       	brge	.+10     	; 0x1ea0 <GPIO_ReadPort+0x3e>
    1e96:	8b 81       	ldd	r24, Y+3	; 0x03
    1e98:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9a:	00 97       	sbiw	r24, 0x00	; 0
    1e9c:	61 f0       	breq	.+24     	; 0x1eb6 <GPIO_ReadPort+0x54>
    1e9e:	1e c0       	rjmp	.+60     	; 0x1edc <GPIO_ReadPort+0x7a>
    1ea0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ea2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ea4:	22 30       	cpi	r18, 0x02	; 2
    1ea6:	31 05       	cpc	r19, r1
    1ea8:	81 f0       	breq	.+32     	; 0x1eca <GPIO_ReadPort+0x68>
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	9c 81       	ldd	r25, Y+4	; 0x04
    1eae:	83 30       	cpi	r24, 0x03	; 3
    1eb0:	91 05       	cpc	r25, r1
    1eb2:	81 f0       	breq	.+32     	; 0x1ed4 <GPIO_ReadPort+0x72>
    1eb4:	13 c0       	rjmp	.+38     	; 0x1edc <GPIO_ReadPort+0x7a>
		{
		case PORTA_ID:
			port_value = PINA_REG;
    1eb6:	e9 e3       	ldi	r30, 0x39	; 57
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	89 83       	std	Y+1, r24	; 0x01
    1ebe:	0e c0       	rjmp	.+28     	; 0x1edc <GPIO_ReadPort+0x7a>
			break;
		case PORTB_ID:
			port_value = PINB_REG;
    1ec0:	e6 e3       	ldi	r30, 0x36	; 54
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	89 83       	std	Y+1, r24	; 0x01
    1ec8:	09 c0       	rjmp	.+18     	; 0x1edc <GPIO_ReadPort+0x7a>
			break;
		case PORTC_ID:
			port_value = PINC_REG;
    1eca:	e3 e3       	ldi	r30, 0x33	; 51
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	89 83       	std	Y+1, r24	; 0x01
    1ed2:	04 c0       	rjmp	.+8      	; 0x1edc <GPIO_ReadPort+0x7a>
			break;
		case PORTD_ID:
			port_value = PIND_REG;
    1ed4:	e0 e3       	ldi	r30, 0x30	; 48
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return port_value;
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	08 95       	ret

00001eec <GPIO_WritePort>:
 [Args]: PORTn_ID(n=A,B,C,D) and PINn_ID(n =0...7) and Level (logic_low or logic_high)
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_WritePort(uint8 PORTn, uint8 value)
{
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	00 d0       	rcall	.+0      	; 0x1ef2 <GPIO_WritePort+0x6>
    1ef2:	00 d0       	rcall	.+0      	; 0x1ef4 <GPIO_WritePort+0x8>
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
    1ef8:	89 83       	std	Y+1, r24	; 0x01
    1efa:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    1efc:	89 81       	ldd	r24, Y+1	; 0x01
    1efe:	84 30       	cpi	r24, 0x04	; 4
    1f00:	90 f5       	brcc	.+100    	; 0x1f66 <GPIO_WritePort+0x7a>
	{
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		switch(PORTn)
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	28 2f       	mov	r18, r24
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	3c 83       	std	Y+4, r19	; 0x04
    1f0a:	2b 83       	std	Y+3, r18	; 0x03
    1f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f10:	81 30       	cpi	r24, 0x01	; 1
    1f12:	91 05       	cpc	r25, r1
    1f14:	d1 f0       	breq	.+52     	; 0x1f4a <GPIO_WritePort+0x5e>
    1f16:	2b 81       	ldd	r18, Y+3	; 0x03
    1f18:	3c 81       	ldd	r19, Y+4	; 0x04
    1f1a:	22 30       	cpi	r18, 0x02	; 2
    1f1c:	31 05       	cpc	r19, r1
    1f1e:	2c f4       	brge	.+10     	; 0x1f2a <GPIO_WritePort+0x3e>
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	9c 81       	ldd	r25, Y+4	; 0x04
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	61 f0       	breq	.+24     	; 0x1f40 <GPIO_WritePort+0x54>
    1f28:	1e c0       	rjmp	.+60     	; 0x1f66 <GPIO_WritePort+0x7a>
    1f2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f2e:	22 30       	cpi	r18, 0x02	; 2
    1f30:	31 05       	cpc	r19, r1
    1f32:	81 f0       	breq	.+32     	; 0x1f54 <GPIO_WritePort+0x68>
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	9c 81       	ldd	r25, Y+4	; 0x04
    1f38:	83 30       	cpi	r24, 0x03	; 3
    1f3a:	91 05       	cpc	r25, r1
    1f3c:	81 f0       	breq	.+32     	; 0x1f5e <GPIO_WritePort+0x72>
    1f3e:	13 c0       	rjmp	.+38     	; 0x1f66 <GPIO_WritePort+0x7a>
		{
		case PORTA_ID:
			PORTA_REG = value;
    1f40:	eb e3       	ldi	r30, 0x3B	; 59
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	8a 81       	ldd	r24, Y+2	; 0x02
    1f46:	80 83       	st	Z, r24
    1f48:	0e c0       	rjmp	.+28     	; 0x1f66 <GPIO_WritePort+0x7a>
			break;
		case PORTB_ID:
			PORTB_REG = value;
    1f4a:	e8 e3       	ldi	r30, 0x38	; 56
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f50:	80 83       	st	Z, r24
    1f52:	09 c0       	rjmp	.+18     	; 0x1f66 <GPIO_WritePort+0x7a>
			break;
		case PORTC_ID:
			PORTC_REG = value;
    1f54:	e5 e3       	ldi	r30, 0x35	; 53
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5a:	80 83       	st	Z, r24
    1f5c:	04 c0       	rjmp	.+8      	; 0x1f66 <GPIO_WritePort+0x7a>
			break;
		case PORTD_ID:
			PORTD_REG = value;
    1f5e:	e2 e3       	ldi	r30, 0x32	; 50
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	8a 81       	ldd	r24, Y+2	; 0x02
    1f64:	80 83       	st	Z, r24
			break;
		}
	}
}
    1f66:	0f 90       	pop	r0
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	0f 90       	pop	r0
    1f6e:	cf 91       	pop	r28
    1f70:	df 91       	pop	r29
    1f72:	08 95       	ret

00001f74 <GPIO_FlipPort>:
 [Args]: PORTn_ID(n=A,B,C,D)
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_FlipPort(uint8 PORTn)
{
    1f74:	df 93       	push	r29
    1f76:	cf 93       	push	r28
    1f78:	00 d0       	rcall	.+0      	; 0x1f7a <GPIO_FlipPort+0x6>
    1f7a:	0f 92       	push	r0
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    1f82:	89 81       	ldd	r24, Y+1	; 0x01
    1f84:	84 30       	cpi	r24, 0x04	; 4
    1f86:	08 f0       	brcs	.+2      	; 0x1f8a <GPIO_FlipPort+0x16>
    1f88:	3e c0       	rjmp	.+124    	; 0x2006 <GPIO_FlipPort+0x92>
	{
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		switch(PORTn)
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01
    1f8c:	28 2f       	mov	r18, r24
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	3b 83       	std	Y+3, r19	; 0x03
    1f92:	2a 83       	std	Y+2, r18	; 0x02
    1f94:	8a 81       	ldd	r24, Y+2	; 0x02
    1f96:	9b 81       	ldd	r25, Y+3	; 0x03
    1f98:	81 30       	cpi	r24, 0x01	; 1
    1f9a:	91 05       	cpc	r25, r1
    1f9c:	e9 f0       	breq	.+58     	; 0x1fd8 <GPIO_FlipPort+0x64>
    1f9e:	2a 81       	ldd	r18, Y+2	; 0x02
    1fa0:	3b 81       	ldd	r19, Y+3	; 0x03
    1fa2:	22 30       	cpi	r18, 0x02	; 2
    1fa4:	31 05       	cpc	r19, r1
    1fa6:	2c f4       	brge	.+10     	; 0x1fb2 <GPIO_FlipPort+0x3e>
    1fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1faa:	9b 81       	ldd	r25, Y+3	; 0x03
    1fac:	00 97       	sbiw	r24, 0x00	; 0
    1fae:	61 f0       	breq	.+24     	; 0x1fc8 <GPIO_FlipPort+0x54>
    1fb0:	2a c0       	rjmp	.+84     	; 0x2006 <GPIO_FlipPort+0x92>
    1fb2:	2a 81       	ldd	r18, Y+2	; 0x02
    1fb4:	3b 81       	ldd	r19, Y+3	; 0x03
    1fb6:	22 30       	cpi	r18, 0x02	; 2
    1fb8:	31 05       	cpc	r19, r1
    1fba:	b1 f0       	breq	.+44     	; 0x1fe8 <GPIO_FlipPort+0x74>
    1fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc0:	83 30       	cpi	r24, 0x03	; 3
    1fc2:	91 05       	cpc	r25, r1
    1fc4:	c9 f0       	breq	.+50     	; 0x1ff8 <GPIO_FlipPort+0x84>
    1fc6:	1f c0       	rjmp	.+62     	; 0x2006 <GPIO_FlipPort+0x92>
		{
		case PORTA_ID:
			PORTA_REG = ~PORTA_REG;
    1fc8:	ab e3       	ldi	r26, 0x3B	; 59
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	eb e3       	ldi	r30, 0x3B	; 59
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	80 95       	com	r24
    1fd4:	8c 93       	st	X, r24
    1fd6:	17 c0       	rjmp	.+46     	; 0x2006 <GPIO_FlipPort+0x92>
			break;
		case PORTB_ID:
			PORTB_REG = ~PORTB_REG;
    1fd8:	a8 e3       	ldi	r26, 0x38	; 56
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e8 e3       	ldi	r30, 0x38	; 56
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	80 95       	com	r24
    1fe4:	8c 93       	st	X, r24
    1fe6:	0f c0       	rjmp	.+30     	; 0x2006 <GPIO_FlipPort+0x92>
			break;
		case PORTC_ID:
			PORTC_REG = ~PORTC_REG;
    1fe8:	a5 e3       	ldi	r26, 0x35	; 53
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	e5 e3       	ldi	r30, 0x35	; 53
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	80 95       	com	r24
    1ff4:	8c 93       	st	X, r24
    1ff6:	07 c0       	rjmp	.+14     	; 0x2006 <GPIO_FlipPort+0x92>
			break;
		case PORTD_ID:
			PORTD_REG = ~PORTD_REG;
    1ff8:	a2 e3       	ldi	r26, 0x32	; 50
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	e2 e3       	ldi	r30, 0x32	; 50
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	80 95       	com	r24
    2004:	8c 93       	st	X, r24
			break;
		}
	}
}
    2006:	0f 90       	pop	r0
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
    200c:	cf 91       	pop	r28
    200e:	df 91       	pop	r29
    2010:	08 95       	ret

00002012 <GPIO_WriteLowNibble>:
 [Args]: PORTn_ID(n=A,B,C,D) and value
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_WriteLowNibble(uint8 PORTn, uint8 value)
{
    2012:	df 93       	push	r29
    2014:	cf 93       	push	r28
    2016:	00 d0       	rcall	.+0      	; 0x2018 <GPIO_WriteLowNibble+0x6>
    2018:	00 d0       	rcall	.+0      	; 0x201a <GPIO_WriteLowNibble+0x8>
    201a:	cd b7       	in	r28, 0x3d	; 61
    201c:	de b7       	in	r29, 0x3e	; 62
    201e:	89 83       	std	Y+1, r24	; 0x01
    2020:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	84 30       	cpi	r24, 0x04	; 4
    2026:	08 f0       	brcs	.+2      	; 0x202a <GPIO_WriteLowNibble+0x18>
    2028:	61 c0       	rjmp	.+194    	; 0x20ec <GPIO_WriteLowNibble+0xda>
	{
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		value &= 0x0F;
    202a:	8a 81       	ldd	r24, Y+2	; 0x02
    202c:	8f 70       	andi	r24, 0x0F	; 15
    202e:	8a 83       	std	Y+2, r24	; 0x02

		switch(PORTn)
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	28 2f       	mov	r18, r24
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	3c 83       	std	Y+4, r19	; 0x04
    2038:	2b 83       	std	Y+3, r18	; 0x03
    203a:	8b 81       	ldd	r24, Y+3	; 0x03
    203c:	9c 81       	ldd	r25, Y+4	; 0x04
    203e:	81 30       	cpi	r24, 0x01	; 1
    2040:	91 05       	cpc	r25, r1
    2042:	29 f1       	breq	.+74     	; 0x208e <GPIO_WriteLowNibble+0x7c>
    2044:	2b 81       	ldd	r18, Y+3	; 0x03
    2046:	3c 81       	ldd	r19, Y+4	; 0x04
    2048:	22 30       	cpi	r18, 0x02	; 2
    204a:	31 05       	cpc	r19, r1
    204c:	2c f4       	brge	.+10     	; 0x2058 <GPIO_WriteLowNibble+0x46>
    204e:	8b 81       	ldd	r24, Y+3	; 0x03
    2050:	9c 81       	ldd	r25, Y+4	; 0x04
    2052:	00 97       	sbiw	r24, 0x00	; 0
    2054:	61 f0       	breq	.+24     	; 0x206e <GPIO_WriteLowNibble+0x5c>
    2056:	4a c0       	rjmp	.+148    	; 0x20ec <GPIO_WriteLowNibble+0xda>
    2058:	2b 81       	ldd	r18, Y+3	; 0x03
    205a:	3c 81       	ldd	r19, Y+4	; 0x04
    205c:	22 30       	cpi	r18, 0x02	; 2
    205e:	31 05       	cpc	r19, r1
    2060:	31 f1       	breq	.+76     	; 0x20ae <GPIO_WriteLowNibble+0x9c>
    2062:	8b 81       	ldd	r24, Y+3	; 0x03
    2064:	9c 81       	ldd	r25, Y+4	; 0x04
    2066:	83 30       	cpi	r24, 0x03	; 3
    2068:	91 05       	cpc	r25, r1
    206a:	89 f1       	breq	.+98     	; 0x20ce <GPIO_WriteLowNibble+0xbc>
    206c:	3f c0       	rjmp	.+126    	; 0x20ec <GPIO_WriteLowNibble+0xda>
		{
		case PORTA_ID:
			PORTA_REG &= 0xF0;
    206e:	ab e3       	ldi	r26, 0x3B	; 59
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	eb e3       	ldi	r30, 0x3B	; 59
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	80 81       	ld	r24, Z
    2078:	80 7f       	andi	r24, 0xF0	; 240
    207a:	8c 93       	st	X, r24
			PORTA_REG |= value;
    207c:	ab e3       	ldi	r26, 0x3B	; 59
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	eb e3       	ldi	r30, 0x3B	; 59
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	90 81       	ld	r25, Z
    2086:	8a 81       	ldd	r24, Y+2	; 0x02
    2088:	89 2b       	or	r24, r25
    208a:	8c 93       	st	X, r24
    208c:	2f c0       	rjmp	.+94     	; 0x20ec <GPIO_WriteLowNibble+0xda>

			break;
		case PORTB_ID:
			PORTB_REG &= 0xF0;
    208e:	a8 e3       	ldi	r26, 0x38	; 56
    2090:	b0 e0       	ldi	r27, 0x00	; 0
    2092:	e8 e3       	ldi	r30, 0x38	; 56
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	80 7f       	andi	r24, 0xF0	; 240
    209a:	8c 93       	st	X, r24
			PORTB_REG |= value;
    209c:	a8 e3       	ldi	r26, 0x38	; 56
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	e8 e3       	ldi	r30, 0x38	; 56
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	90 81       	ld	r25, Z
    20a6:	8a 81       	ldd	r24, Y+2	; 0x02
    20a8:	89 2b       	or	r24, r25
    20aa:	8c 93       	st	X, r24
    20ac:	1f c0       	rjmp	.+62     	; 0x20ec <GPIO_WriteLowNibble+0xda>
			break;
		case PORTC_ID:
			PORTC_REG &= 0xF0;
    20ae:	a5 e3       	ldi	r26, 0x35	; 53
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	e5 e3       	ldi	r30, 0x35	; 53
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	80 7f       	andi	r24, 0xF0	; 240
    20ba:	8c 93       	st	X, r24
			PORTC_REG |= value;
    20bc:	a5 e3       	ldi	r26, 0x35	; 53
    20be:	b0 e0       	ldi	r27, 0x00	; 0
    20c0:	e5 e3       	ldi	r30, 0x35	; 53
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	90 81       	ld	r25, Z
    20c6:	8a 81       	ldd	r24, Y+2	; 0x02
    20c8:	89 2b       	or	r24, r25
    20ca:	8c 93       	st	X, r24
    20cc:	0f c0       	rjmp	.+30     	; 0x20ec <GPIO_WriteLowNibble+0xda>
			break;
		case PORTD_ID:
			PORTD_REG &= 0xF0;
    20ce:	a2 e3       	ldi	r26, 0x32	; 50
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	e2 e3       	ldi	r30, 0x32	; 50
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	80 7f       	andi	r24, 0xF0	; 240
    20da:	8c 93       	st	X, r24
			PORTD_REG |= value;
    20dc:	a2 e3       	ldi	r26, 0x32	; 50
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	e2 e3       	ldi	r30, 0x32	; 50
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	90 81       	ld	r25, Z
    20e6:	8a 81       	ldd	r24, Y+2	; 0x02
    20e8:	89 2b       	or	r24, r25
    20ea:	8c 93       	st	X, r24
			break;
		}
	}
}
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	08 95       	ret

000020fa <GPIO_WriteHighNibble>:
 [Args]: PORTn_ID(n=A,B,C,D) and value
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_WriteHighNibble(uint8 PORTn, uint8 value)
{
    20fa:	df 93       	push	r29
    20fc:	cf 93       	push	r28
    20fe:	00 d0       	rcall	.+0      	; 0x2100 <GPIO_WriteHighNibble+0x6>
    2100:	00 d0       	rcall	.+0      	; 0x2102 <GPIO_WriteHighNibble+0x8>
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
    2106:	89 83       	std	Y+1, r24	; 0x01
    2108:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    210a:	89 81       	ldd	r24, Y+1	; 0x01
    210c:	84 30       	cpi	r24, 0x04	; 4
    210e:	08 f0       	brcs	.+2      	; 0x2112 <GPIO_WriteHighNibble+0x18>
    2110:	61 c0       	rjmp	.+194    	; 0x21d4 <GPIO_WriteHighNibble+0xda>
	{
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		value &= 0xF0;
    2112:	8a 81       	ldd	r24, Y+2	; 0x02
    2114:	80 7f       	andi	r24, 0xF0	; 240
    2116:	8a 83       	std	Y+2, r24	; 0x02

		switch(PORTn)
    2118:	89 81       	ldd	r24, Y+1	; 0x01
    211a:	28 2f       	mov	r18, r24
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	3c 83       	std	Y+4, r19	; 0x04
    2120:	2b 83       	std	Y+3, r18	; 0x03
    2122:	8b 81       	ldd	r24, Y+3	; 0x03
    2124:	9c 81       	ldd	r25, Y+4	; 0x04
    2126:	81 30       	cpi	r24, 0x01	; 1
    2128:	91 05       	cpc	r25, r1
    212a:	29 f1       	breq	.+74     	; 0x2176 <GPIO_WriteHighNibble+0x7c>
    212c:	2b 81       	ldd	r18, Y+3	; 0x03
    212e:	3c 81       	ldd	r19, Y+4	; 0x04
    2130:	22 30       	cpi	r18, 0x02	; 2
    2132:	31 05       	cpc	r19, r1
    2134:	2c f4       	brge	.+10     	; 0x2140 <GPIO_WriteHighNibble+0x46>
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	9c 81       	ldd	r25, Y+4	; 0x04
    213a:	00 97       	sbiw	r24, 0x00	; 0
    213c:	61 f0       	breq	.+24     	; 0x2156 <GPIO_WriteHighNibble+0x5c>
    213e:	4a c0       	rjmp	.+148    	; 0x21d4 <GPIO_WriteHighNibble+0xda>
    2140:	2b 81       	ldd	r18, Y+3	; 0x03
    2142:	3c 81       	ldd	r19, Y+4	; 0x04
    2144:	22 30       	cpi	r18, 0x02	; 2
    2146:	31 05       	cpc	r19, r1
    2148:	31 f1       	breq	.+76     	; 0x2196 <GPIO_WriteHighNibble+0x9c>
    214a:	8b 81       	ldd	r24, Y+3	; 0x03
    214c:	9c 81       	ldd	r25, Y+4	; 0x04
    214e:	83 30       	cpi	r24, 0x03	; 3
    2150:	91 05       	cpc	r25, r1
    2152:	89 f1       	breq	.+98     	; 0x21b6 <GPIO_WriteHighNibble+0xbc>
    2154:	3f c0       	rjmp	.+126    	; 0x21d4 <GPIO_WriteHighNibble+0xda>
		{
		case PORTA_ID:
			PORTA_REG &= 0x0F;
    2156:	ab e3       	ldi	r26, 0x3B	; 59
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	eb e3       	ldi	r30, 0x3B	; 59
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	80 81       	ld	r24, Z
    2160:	8f 70       	andi	r24, 0x0F	; 15
    2162:	8c 93       	st	X, r24
			PORTA_REG |= value;
    2164:	ab e3       	ldi	r26, 0x3B	; 59
    2166:	b0 e0       	ldi	r27, 0x00	; 0
    2168:	eb e3       	ldi	r30, 0x3B	; 59
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	90 81       	ld	r25, Z
    216e:	8a 81       	ldd	r24, Y+2	; 0x02
    2170:	89 2b       	or	r24, r25
    2172:	8c 93       	st	X, r24
    2174:	2f c0       	rjmp	.+94     	; 0x21d4 <GPIO_WriteHighNibble+0xda>

			break;
		case PORTB_ID:
			PORTB_REG &= 0x0F;
    2176:	a8 e3       	ldi	r26, 0x38	; 56
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	e8 e3       	ldi	r30, 0x38	; 56
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	8f 70       	andi	r24, 0x0F	; 15
    2182:	8c 93       	st	X, r24
			PORTB_REG |= value;
    2184:	a8 e3       	ldi	r26, 0x38	; 56
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	e8 e3       	ldi	r30, 0x38	; 56
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	90 81       	ld	r25, Z
    218e:	8a 81       	ldd	r24, Y+2	; 0x02
    2190:	89 2b       	or	r24, r25
    2192:	8c 93       	st	X, r24
    2194:	1f c0       	rjmp	.+62     	; 0x21d4 <GPIO_WriteHighNibble+0xda>
			break;
		case PORTC_ID:
			PORTC_REG &= 0x0F;
    2196:	a5 e3       	ldi	r26, 0x35	; 53
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	e5 e3       	ldi	r30, 0x35	; 53
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	8f 70       	andi	r24, 0x0F	; 15
    21a2:	8c 93       	st	X, r24
			PORTC_REG |= value;
    21a4:	a5 e3       	ldi	r26, 0x35	; 53
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	e5 e3       	ldi	r30, 0x35	; 53
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	90 81       	ld	r25, Z
    21ae:	8a 81       	ldd	r24, Y+2	; 0x02
    21b0:	89 2b       	or	r24, r25
    21b2:	8c 93       	st	X, r24
    21b4:	0f c0       	rjmp	.+30     	; 0x21d4 <GPIO_WriteHighNibble+0xda>
			break;
		case PORTD_ID:
			PORTD_REG &= 0x0F;
    21b6:	a2 e3       	ldi	r26, 0x32	; 50
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	e2 e3       	ldi	r30, 0x32	; 50
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	8f 70       	andi	r24, 0x0F	; 15
    21c2:	8c 93       	st	X, r24
			PORTD_REG |= value;
    21c4:	a2 e3       	ldi	r26, 0x32	; 50
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	e2 e3       	ldi	r30, 0x32	; 50
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	90 81       	ld	r25, Z
    21ce:	8a 81       	ldd	r24, Y+2	; 0x02
    21d0:	89 2b       	or	r24, r25
    21d2:	8c 93       	st	X, r24
			break;
		}
	}
}
    21d4:	0f 90       	pop	r0
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <LCD_init>:
  	  	  	 2. Setup the LCD Data Mode 4-bits or 8-bits.
 [Args]: void
 [RUTURN]: void
 ---------------------------------------------------------------------------------------*/
void LCD_init(void)
{
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_SetPinDir(LCD_RS_PORT_ID, LCD_RS_PIN_ID, pin_output);
    21ea:	83 e0       	ldi	r24, 0x03	; 3
    21ec:	64 e0       	ldi	r22, 0x04	; 4
    21ee:	41 e0       	ldi	r20, 0x01	; 1
    21f0:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <GPIO_SetPinDir>
	GPIO_SetPinDir(LCD_RW_PORT_ID, LCD_RW_PIN_ID, pin_output);
    21f4:	83 e0       	ldi	r24, 0x03	; 3
    21f6:	65 e0       	ldi	r22, 0x05	; 5
    21f8:	41 e0       	ldi	r20, 0x01	; 1
    21fa:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <GPIO_SetPinDir>
	GPIO_SetPinDir(LCD_E_PORT_ID, LCD_E_PIN_ID, pin_output);
    21fe:	83 e0       	ldi	r24, 0x03	; 3
    2200:	66 e0       	ldi	r22, 0x06	; 6
    2202:	41 e0       	ldi	r20, 0x01	; 1
    2204:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <GPIO_SetPinDir>
	/* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_SetPortDir(LCD_DATA_PORT_ID, port_output);
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	6f ef       	ldi	r22, 0xFF	; 255
    220c:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <GPIO_SetPortDir>
	 /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2210:	88 e3       	ldi	r24, 0x38	; 56
    2212:	0e 94 14 11 	call	0x2228	; 0x2228 <LCD_sendCommand>
#endif

	/* cursor off */
	LCD_sendCommand(LCD_CURSOR_OFF);
    2216:	8c e0       	ldi	r24, 0x0C	; 12
    2218:	0e 94 14 11 	call	0x2228	; 0x2228 <LCD_sendCommand>
	/* clear LCD at the beginning */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	0e 94 14 11 	call	0x2228	; 0x2228 <LCD_sendCommand>
}
    2222:	cf 91       	pop	r28
    2224:	df 91       	pop	r29
    2226:	08 95       	ret

00002228 <LCD_sendCommand>:
 [DISCRIPTION]:	Send the required command to the screen
  [Args]: uint8
 [RUTURN]: void
 ---------------------------------------------------------------------------------------*/
void LCD_sendCommand(uint8 command)
{
    2228:	df 93       	push	r29
    222a:	cf 93       	push	r28
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
    2230:	ea 97       	sbiw	r28, 0x3a	; 58
    2232:	0f b6       	in	r0, 0x3f	; 63
    2234:	f8 94       	cli
    2236:	de bf       	out	0x3e, r29	; 62
    2238:	0f be       	out	0x3f, r0	; 63
    223a:	cd bf       	out	0x3d, r28	; 61
    223c:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    223e:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_WritePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); /* Instruction Mode RS=0 */
    2240:	83 e0       	ldi	r24, 0x03	; 3
    2242:	64 e0       	ldi	r22, 0x04	; 4
    2244:	40 e0       	ldi	r20, 0x00	; 0
    2246:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <GPIO_WritePin>
	GPIO_WritePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW); /* write data to LCD so RW=0 */
    224a:	83 e0       	ldi	r24, 0x03	; 3
    224c:	65 e0       	ldi	r22, 0x05	; 5
    224e:	40 e0       	ldi	r20, 0x00	; 0
    2250:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <GPIO_WritePin>
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	a0 e8       	ldi	r26, 0x80	; 128
    225a:	bf e3       	ldi	r27, 0x3F	; 63
    225c:	8d ab       	std	Y+53, r24	; 0x35
    225e:	9e ab       	std	Y+54, r25	; 0x36
    2260:	af ab       	std	Y+55, r26	; 0x37
    2262:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2264:	6d a9       	ldd	r22, Y+53	; 0x35
    2266:	7e a9       	ldd	r23, Y+54	; 0x36
    2268:	8f a9       	ldd	r24, Y+55	; 0x37
    226a:	98 ad       	ldd	r25, Y+56	; 0x38
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	4a ef       	ldi	r20, 0xFA	; 250
    2272:	54 e4       	ldi	r21, 0x44	; 68
    2274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	89 ab       	std	Y+49, r24	; 0x31
    227e:	9a ab       	std	Y+50, r25	; 0x32
    2280:	ab ab       	std	Y+51, r26	; 0x33
    2282:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2284:	69 a9       	ldd	r22, Y+49	; 0x31
    2286:	7a a9       	ldd	r23, Y+50	; 0x32
    2288:	8b a9       	ldd	r24, Y+51	; 0x33
    228a:	9c a9       	ldd	r25, Y+52	; 0x34
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	40 e8       	ldi	r20, 0x80	; 128
    2292:	5f e3       	ldi	r21, 0x3F	; 63
    2294:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2298:	88 23       	and	r24, r24
    229a:	2c f4       	brge	.+10     	; 0x22a6 <LCD_sendCommand+0x7e>
		__ticks = 1;
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	98 ab       	std	Y+48, r25	; 0x30
    22a2:	8f a7       	std	Y+47, r24	; 0x2f
    22a4:	3f c0       	rjmp	.+126    	; 0x2324 <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    22a6:	69 a9       	ldd	r22, Y+49	; 0x31
    22a8:	7a a9       	ldd	r23, Y+50	; 0x32
    22aa:	8b a9       	ldd	r24, Y+51	; 0x33
    22ac:	9c a9       	ldd	r25, Y+52	; 0x34
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	3f ef       	ldi	r19, 0xFF	; 255
    22b2:	4f e7       	ldi	r20, 0x7F	; 127
    22b4:	57 e4       	ldi	r21, 0x47	; 71
    22b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22ba:	18 16       	cp	r1, r24
    22bc:	4c f5       	brge	.+82     	; 0x2310 <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22be:	6d a9       	ldd	r22, Y+53	; 0x35
    22c0:	7e a9       	ldd	r23, Y+54	; 0x36
    22c2:	8f a9       	ldd	r24, Y+55	; 0x37
    22c4:	98 ad       	ldd	r25, Y+56	; 0x38
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	40 e2       	ldi	r20, 0x20	; 32
    22cc:	51 e4       	ldi	r21, 0x41	; 65
    22ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	bc 01       	movw	r22, r24
    22d8:	cd 01       	movw	r24, r26
    22da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	98 ab       	std	Y+48, r25	; 0x30
    22e4:	8f a7       	std	Y+47, r24	; 0x2f
    22e6:	0f c0       	rjmp	.+30     	; 0x2306 <LCD_sendCommand+0xde>
    22e8:	88 ec       	ldi	r24, 0xC8	; 200
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	9e a7       	std	Y+46, r25	; 0x2e
    22ee:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22f0:	8d a5       	ldd	r24, Y+45	; 0x2d
    22f2:	9e a5       	ldd	r25, Y+46	; 0x2e
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	f1 f7       	brne	.-4      	; 0x22f4 <LCD_sendCommand+0xcc>
    22f8:	9e a7       	std	Y+46, r25	; 0x2e
    22fa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    22fe:	98 a9       	ldd	r25, Y+48	; 0x30
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	98 ab       	std	Y+48, r25	; 0x30
    2304:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2306:	8f a5       	ldd	r24, Y+47	; 0x2f
    2308:	98 a9       	ldd	r25, Y+48	; 0x30
    230a:	00 97       	sbiw	r24, 0x00	; 0
    230c:	69 f7       	brne	.-38     	; 0x22e8 <LCD_sendCommand+0xc0>
    230e:	14 c0       	rjmp	.+40     	; 0x2338 <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2310:	69 a9       	ldd	r22, Y+49	; 0x31
    2312:	7a a9       	ldd	r23, Y+50	; 0x32
    2314:	8b a9       	ldd	r24, Y+51	; 0x33
    2316:	9c a9       	ldd	r25, Y+52	; 0x34
    2318:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	98 ab       	std	Y+48, r25	; 0x30
    2322:	8f a7       	std	Y+47, r24	; 0x2f
    2324:	8f a5       	ldd	r24, Y+47	; 0x2f
    2326:	98 a9       	ldd	r25, Y+48	; 0x30
    2328:	9c a7       	std	Y+44, r25	; 0x2c
    232a:	8b a7       	std	Y+43, r24	; 0x2b
    232c:	8b a5       	ldd	r24, Y+43	; 0x2b
    232e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	f1 f7       	brne	.-4      	; 0x2330 <LCD_sendCommand+0x108>
    2334:	9c a7       	std	Y+44, r25	; 0x2c
    2336:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_WritePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    2338:	83 e0       	ldi	r24, 0x03	; 3
    233a:	66 e0       	ldi	r22, 0x06	; 6
    233c:	41 e0       	ldi	r20, 0x01	; 1
    233e:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <GPIO_WritePin>
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	a0 e8       	ldi	r26, 0x80	; 128
    2348:	bf e3       	ldi	r27, 0x3F	; 63
    234a:	8f a3       	std	Y+39, r24	; 0x27
    234c:	98 a7       	std	Y+40, r25	; 0x28
    234e:	a9 a7       	std	Y+41, r26	; 0x29
    2350:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2352:	6f a1       	ldd	r22, Y+39	; 0x27
    2354:	78 a5       	ldd	r23, Y+40	; 0x28
    2356:	89 a5       	ldd	r24, Y+41	; 0x29
    2358:	9a a5       	ldd	r25, Y+42	; 0x2a
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	4a ef       	ldi	r20, 0xFA	; 250
    2360:	54 e4       	ldi	r21, 0x44	; 68
    2362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	8b a3       	std	Y+35, r24	; 0x23
    236c:	9c a3       	std	Y+36, r25	; 0x24
    236e:	ad a3       	std	Y+37, r26	; 0x25
    2370:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2372:	6b a1       	ldd	r22, Y+35	; 0x23
    2374:	7c a1       	ldd	r23, Y+36	; 0x24
    2376:	8d a1       	ldd	r24, Y+37	; 0x25
    2378:	9e a1       	ldd	r25, Y+38	; 0x26
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	40 e8       	ldi	r20, 0x80	; 128
    2380:	5f e3       	ldi	r21, 0x3F	; 63
    2382:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2386:	88 23       	and	r24, r24
    2388:	2c f4       	brge	.+10     	; 0x2394 <LCD_sendCommand+0x16c>
		__ticks = 1;
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	9a a3       	std	Y+34, r25	; 0x22
    2390:	89 a3       	std	Y+33, r24	; 0x21
    2392:	3f c0       	rjmp	.+126    	; 0x2412 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    2394:	6b a1       	ldd	r22, Y+35	; 0x23
    2396:	7c a1       	ldd	r23, Y+36	; 0x24
    2398:	8d a1       	ldd	r24, Y+37	; 0x25
    239a:	9e a1       	ldd	r25, Y+38	; 0x26
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	3f ef       	ldi	r19, 0xFF	; 255
    23a0:	4f e7       	ldi	r20, 0x7F	; 127
    23a2:	57 e4       	ldi	r21, 0x47	; 71
    23a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23a8:	18 16       	cp	r1, r24
    23aa:	4c f5       	brge	.+82     	; 0x23fe <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ac:	6f a1       	ldd	r22, Y+39	; 0x27
    23ae:	78 a5       	ldd	r23, Y+40	; 0x28
    23b0:	89 a5       	ldd	r24, Y+41	; 0x29
    23b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	40 e2       	ldi	r20, 0x20	; 32
    23ba:	51 e4       	ldi	r21, 0x41	; 65
    23bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	bc 01       	movw	r22, r24
    23c6:	cd 01       	movw	r24, r26
    23c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	9a a3       	std	Y+34, r25	; 0x22
    23d2:	89 a3       	std	Y+33, r24	; 0x21
    23d4:	0f c0       	rjmp	.+30     	; 0x23f4 <LCD_sendCommand+0x1cc>
    23d6:	88 ec       	ldi	r24, 0xC8	; 200
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	98 a3       	std	Y+32, r25	; 0x20
    23dc:	8f 8f       	std	Y+31, r24	; 0x1f
    23de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23e0:	98 a1       	ldd	r25, Y+32	; 0x20
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	f1 f7       	brne	.-4      	; 0x23e2 <LCD_sendCommand+0x1ba>
    23e6:	98 a3       	std	Y+32, r25	; 0x20
    23e8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ea:	89 a1       	ldd	r24, Y+33	; 0x21
    23ec:	9a a1       	ldd	r25, Y+34	; 0x22
    23ee:	01 97       	sbiw	r24, 0x01	; 1
    23f0:	9a a3       	std	Y+34, r25	; 0x22
    23f2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f4:	89 a1       	ldd	r24, Y+33	; 0x21
    23f6:	9a a1       	ldd	r25, Y+34	; 0x22
    23f8:	00 97       	sbiw	r24, 0x00	; 0
    23fa:	69 f7       	brne	.-38     	; 0x23d6 <LCD_sendCommand+0x1ae>
    23fc:	14 c0       	rjmp	.+40     	; 0x2426 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23fe:	6b a1       	ldd	r22, Y+35	; 0x23
    2400:	7c a1       	ldd	r23, Y+36	; 0x24
    2402:	8d a1       	ldd	r24, Y+37	; 0x25
    2404:	9e a1       	ldd	r25, Y+38	; 0x26
    2406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	9a a3       	std	Y+34, r25	; 0x22
    2410:	89 a3       	std	Y+33, r24	; 0x21
    2412:	89 a1       	ldd	r24, Y+33	; 0x21
    2414:	9a a1       	ldd	r25, Y+34	; 0x22
    2416:	9e 8f       	std	Y+30, r25	; 0x1e
    2418:	8d 8f       	std	Y+29, r24	; 0x1d
    241a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    241c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	f1 f7       	brne	.-4      	; 0x241e <LCD_sendCommand+0x1f6>
    2422:	9e 8f       	std	Y+30, r25	; 0x1e
    2424:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_WritePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_WritePort(LCD_DATA_PORT_ID, command); /* out the required command to the data bus D0 --> D7 */
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	6a ad       	ldd	r22, Y+58	; 0x3a
    242a:	0e 94 76 0f 	call	0x1eec	; 0x1eec <GPIO_WritePort>
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	a0 e8       	ldi	r26, 0x80	; 128
    2434:	bf e3       	ldi	r27, 0x3F	; 63
    2436:	89 8f       	std	Y+25, r24	; 0x19
    2438:	9a 8f       	std	Y+26, r25	; 0x1a
    243a:	ab 8f       	std	Y+27, r26	; 0x1b
    243c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    243e:	69 8d       	ldd	r22, Y+25	; 0x19
    2440:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2442:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2444:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	4a ef       	ldi	r20, 0xFA	; 250
    244c:	54 e4       	ldi	r21, 0x44	; 68
    244e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	8d 8b       	std	Y+21, r24	; 0x15
    2458:	9e 8b       	std	Y+22, r25	; 0x16
    245a:	af 8b       	std	Y+23, r26	; 0x17
    245c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    245e:	6d 89       	ldd	r22, Y+21	; 0x15
    2460:	7e 89       	ldd	r23, Y+22	; 0x16
    2462:	8f 89       	ldd	r24, Y+23	; 0x17
    2464:	98 8d       	ldd	r25, Y+24	; 0x18
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	40 e8       	ldi	r20, 0x80	; 128
    246c:	5f e3       	ldi	r21, 0x3F	; 63
    246e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2472:	88 23       	and	r24, r24
    2474:	2c f4       	brge	.+10     	; 0x2480 <LCD_sendCommand+0x258>
		__ticks = 1;
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	9c 8b       	std	Y+20, r25	; 0x14
    247c:	8b 8b       	std	Y+19, r24	; 0x13
    247e:	3f c0       	rjmp	.+126    	; 0x24fe <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2480:	6d 89       	ldd	r22, Y+21	; 0x15
    2482:	7e 89       	ldd	r23, Y+22	; 0x16
    2484:	8f 89       	ldd	r24, Y+23	; 0x17
    2486:	98 8d       	ldd	r25, Y+24	; 0x18
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	3f ef       	ldi	r19, 0xFF	; 255
    248c:	4f e7       	ldi	r20, 0x7F	; 127
    248e:	57 e4       	ldi	r21, 0x47	; 71
    2490:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2494:	18 16       	cp	r1, r24
    2496:	4c f5       	brge	.+82     	; 0x24ea <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2498:	69 8d       	ldd	r22, Y+25	; 0x19
    249a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    249c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    249e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	40 e2       	ldi	r20, 0x20	; 32
    24a6:	51 e4       	ldi	r21, 0x41	; 65
    24a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	bc 01       	movw	r22, r24
    24b2:	cd 01       	movw	r24, r26
    24b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	9c 8b       	std	Y+20, r25	; 0x14
    24be:	8b 8b       	std	Y+19, r24	; 0x13
    24c0:	0f c0       	rjmp	.+30     	; 0x24e0 <LCD_sendCommand+0x2b8>
    24c2:	88 ec       	ldi	r24, 0xC8	; 200
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	9a 8b       	std	Y+18, r25	; 0x12
    24c8:	89 8b       	std	Y+17, r24	; 0x11
    24ca:	89 89       	ldd	r24, Y+17	; 0x11
    24cc:	9a 89       	ldd	r25, Y+18	; 0x12
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	f1 f7       	brne	.-4      	; 0x24ce <LCD_sendCommand+0x2a6>
    24d2:	9a 8b       	std	Y+18, r25	; 0x12
    24d4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d6:	8b 89       	ldd	r24, Y+19	; 0x13
    24d8:	9c 89       	ldd	r25, Y+20	; 0x14
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	9c 8b       	std	Y+20, r25	; 0x14
    24de:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e0:	8b 89       	ldd	r24, Y+19	; 0x13
    24e2:	9c 89       	ldd	r25, Y+20	; 0x14
    24e4:	00 97       	sbiw	r24, 0x00	; 0
    24e6:	69 f7       	brne	.-38     	; 0x24c2 <LCD_sendCommand+0x29a>
    24e8:	14 c0       	rjmp	.+40     	; 0x2512 <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ea:	6d 89       	ldd	r22, Y+21	; 0x15
    24ec:	7e 89       	ldd	r23, Y+22	; 0x16
    24ee:	8f 89       	ldd	r24, Y+23	; 0x17
    24f0:	98 8d       	ldd	r25, Y+24	; 0x18
    24f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	9c 8b       	std	Y+20, r25	; 0x14
    24fc:	8b 8b       	std	Y+19, r24	; 0x13
    24fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2500:	9c 89       	ldd	r25, Y+20	; 0x14
    2502:	98 8b       	std	Y+16, r25	; 0x10
    2504:	8f 87       	std	Y+15, r24	; 0x0f
    2506:	8f 85       	ldd	r24, Y+15	; 0x0f
    2508:	98 89       	ldd	r25, Y+16	; 0x10
    250a:	01 97       	sbiw	r24, 0x01	; 1
    250c:	f1 f7       	brne	.-4      	; 0x250a <LCD_sendCommand+0x2e2>
    250e:	98 8b       	std	Y+16, r25	; 0x10
    2510:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_WritePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    2512:	83 e0       	ldi	r24, 0x03	; 3
    2514:	66 e0       	ldi	r22, 0x06	; 6
    2516:	40 e0       	ldi	r20, 0x00	; 0
    2518:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <GPIO_WritePin>
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	a0 e8       	ldi	r26, 0x80	; 128
    2522:	bf e3       	ldi	r27, 0x3F	; 63
    2524:	8b 87       	std	Y+11, r24	; 0x0b
    2526:	9c 87       	std	Y+12, r25	; 0x0c
    2528:	ad 87       	std	Y+13, r26	; 0x0d
    252a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    252c:	6b 85       	ldd	r22, Y+11	; 0x0b
    252e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2530:	8d 85       	ldd	r24, Y+13	; 0x0d
    2532:	9e 85       	ldd	r25, Y+14	; 0x0e
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	4a ef       	ldi	r20, 0xFA	; 250
    253a:	54 e4       	ldi	r21, 0x44	; 68
    253c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	8f 83       	std	Y+7, r24	; 0x07
    2546:	98 87       	std	Y+8, r25	; 0x08
    2548:	a9 87       	std	Y+9, r26	; 0x09
    254a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    254c:	6f 81       	ldd	r22, Y+7	; 0x07
    254e:	78 85       	ldd	r23, Y+8	; 0x08
    2550:	89 85       	ldd	r24, Y+9	; 0x09
    2552:	9a 85       	ldd	r25, Y+10	; 0x0a
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	40 e8       	ldi	r20, 0x80	; 128
    255a:	5f e3       	ldi	r21, 0x3F	; 63
    255c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2560:	88 23       	and	r24, r24
    2562:	2c f4       	brge	.+10     	; 0x256e <LCD_sendCommand+0x346>
		__ticks = 1;
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	9e 83       	std	Y+6, r25	; 0x06
    256a:	8d 83       	std	Y+5, r24	; 0x05
    256c:	3f c0       	rjmp	.+126    	; 0x25ec <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    256e:	6f 81       	ldd	r22, Y+7	; 0x07
    2570:	78 85       	ldd	r23, Y+8	; 0x08
    2572:	89 85       	ldd	r24, Y+9	; 0x09
    2574:	9a 85       	ldd	r25, Y+10	; 0x0a
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	3f ef       	ldi	r19, 0xFF	; 255
    257a:	4f e7       	ldi	r20, 0x7F	; 127
    257c:	57 e4       	ldi	r21, 0x47	; 71
    257e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2582:	18 16       	cp	r1, r24
    2584:	4c f5       	brge	.+82     	; 0x25d8 <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2586:	6b 85       	ldd	r22, Y+11	; 0x0b
    2588:	7c 85       	ldd	r23, Y+12	; 0x0c
    258a:	8d 85       	ldd	r24, Y+13	; 0x0d
    258c:	9e 85       	ldd	r25, Y+14	; 0x0e
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	40 e2       	ldi	r20, 0x20	; 32
    2594:	51 e4       	ldi	r21, 0x41	; 65
    2596:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	bc 01       	movw	r22, r24
    25a0:	cd 01       	movw	r24, r26
    25a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	9e 83       	std	Y+6, r25	; 0x06
    25ac:	8d 83       	std	Y+5, r24	; 0x05
    25ae:	0f c0       	rjmp	.+30     	; 0x25ce <LCD_sendCommand+0x3a6>
    25b0:	88 ec       	ldi	r24, 0xC8	; 200
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	9c 83       	std	Y+4, r25	; 0x04
    25b6:	8b 83       	std	Y+3, r24	; 0x03
    25b8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ba:	9c 81       	ldd	r25, Y+4	; 0x04
    25bc:	01 97       	sbiw	r24, 0x01	; 1
    25be:	f1 f7       	brne	.-4      	; 0x25bc <LCD_sendCommand+0x394>
    25c0:	9c 83       	std	Y+4, r25	; 0x04
    25c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c4:	8d 81       	ldd	r24, Y+5	; 0x05
    25c6:	9e 81       	ldd	r25, Y+6	; 0x06
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	9e 83       	std	Y+6, r25	; 0x06
    25cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ce:	8d 81       	ldd	r24, Y+5	; 0x05
    25d0:	9e 81       	ldd	r25, Y+6	; 0x06
    25d2:	00 97       	sbiw	r24, 0x00	; 0
    25d4:	69 f7       	brne	.-38     	; 0x25b0 <LCD_sendCommand+0x388>
    25d6:	14 c0       	rjmp	.+40     	; 0x2600 <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d8:	6f 81       	ldd	r22, Y+7	; 0x07
    25da:	78 85       	ldd	r23, Y+8	; 0x08
    25dc:	89 85       	ldd	r24, Y+9	; 0x09
    25de:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	9e 83       	std	Y+6, r25	; 0x06
    25ea:	8d 83       	std	Y+5, r24	; 0x05
    25ec:	8d 81       	ldd	r24, Y+5	; 0x05
    25ee:	9e 81       	ldd	r25, Y+6	; 0x06
    25f0:	9a 83       	std	Y+2, r25	; 0x02
    25f2:	89 83       	std	Y+1, r24	; 0x01
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
    25f6:	9a 81       	ldd	r25, Y+2	; 0x02
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	f1 f7       	brne	.-4      	; 0x25f8 <LCD_sendCommand+0x3d0>
    25fc:	9a 83       	std	Y+2, r25	; 0x02
    25fe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2600:	ea 96       	adiw	r28, 0x3a	; 58
    2602:	0f b6       	in	r0, 0x3f	; 63
    2604:	f8 94       	cli
    2606:	de bf       	out	0x3e, r29	; 62
    2608:	0f be       	out	0x3f, r0	; 63
    260a:	cd bf       	out	0x3d, r28	; 61
    260c:	cf 91       	pop	r28
    260e:	df 91       	pop	r29
    2610:	08 95       	ret

00002612 <LCD_displayCharacter>:
 [DISCRIPTION]:	Display the required character on the screen
  [Args]: uint8
 [RUTURN]: void
 ---------------------------------------------------------------------------------------*/
void LCD_displayCharacter(uint8 data)
{
    2612:	df 93       	push	r29
    2614:	cf 93       	push	r28
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	ea 97       	sbiw	r28, 0x3a	; 58
    261c:	0f b6       	in	r0, 0x3f	; 63
    261e:	f8 94       	cli
    2620:	de bf       	out	0x3e, r29	; 62
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	cd bf       	out	0x3d, r28	; 61
    2626:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    2628:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_WritePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /* Data Mode RS=1 */
    262a:	83 e0       	ldi	r24, 0x03	; 3
    262c:	64 e0       	ldi	r22, 0x04	; 4
    262e:	41 e0       	ldi	r20, 0x01	; 1
    2630:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <GPIO_WritePin>
	GPIO_WritePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW); /* write data to LCD so RW=0 */
    2634:	83 e0       	ldi	r24, 0x03	; 3
    2636:	65 e0       	ldi	r22, 0x05	; 5
    2638:	40 e0       	ldi	r20, 0x00	; 0
    263a:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <GPIO_WritePin>
    263e:	80 e0       	ldi	r24, 0x00	; 0
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	a0 e8       	ldi	r26, 0x80	; 128
    2644:	bf e3       	ldi	r27, 0x3F	; 63
    2646:	8d ab       	std	Y+53, r24	; 0x35
    2648:	9e ab       	std	Y+54, r25	; 0x36
    264a:	af ab       	std	Y+55, r26	; 0x37
    264c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    264e:	6d a9       	ldd	r22, Y+53	; 0x35
    2650:	7e a9       	ldd	r23, Y+54	; 0x36
    2652:	8f a9       	ldd	r24, Y+55	; 0x37
    2654:	98 ad       	ldd	r25, Y+56	; 0x38
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	4a ef       	ldi	r20, 0xFA	; 250
    265c:	54 e4       	ldi	r21, 0x44	; 68
    265e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	89 ab       	std	Y+49, r24	; 0x31
    2668:	9a ab       	std	Y+50, r25	; 0x32
    266a:	ab ab       	std	Y+51, r26	; 0x33
    266c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    266e:	69 a9       	ldd	r22, Y+49	; 0x31
    2670:	7a a9       	ldd	r23, Y+50	; 0x32
    2672:	8b a9       	ldd	r24, Y+51	; 0x33
    2674:	9c a9       	ldd	r25, Y+52	; 0x34
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	40 e8       	ldi	r20, 0x80	; 128
    267c:	5f e3       	ldi	r21, 0x3F	; 63
    267e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2682:	88 23       	and	r24, r24
    2684:	2c f4       	brge	.+10     	; 0x2690 <LCD_displayCharacter+0x7e>
		__ticks = 1;
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	98 ab       	std	Y+48, r25	; 0x30
    268c:	8f a7       	std	Y+47, r24	; 0x2f
    268e:	3f c0       	rjmp	.+126    	; 0x270e <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    2690:	69 a9       	ldd	r22, Y+49	; 0x31
    2692:	7a a9       	ldd	r23, Y+50	; 0x32
    2694:	8b a9       	ldd	r24, Y+51	; 0x33
    2696:	9c a9       	ldd	r25, Y+52	; 0x34
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	3f ef       	ldi	r19, 0xFF	; 255
    269c:	4f e7       	ldi	r20, 0x7F	; 127
    269e:	57 e4       	ldi	r21, 0x47	; 71
    26a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26a4:	18 16       	cp	r1, r24
    26a6:	4c f5       	brge	.+82     	; 0x26fa <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a8:	6d a9       	ldd	r22, Y+53	; 0x35
    26aa:	7e a9       	ldd	r23, Y+54	; 0x36
    26ac:	8f a9       	ldd	r24, Y+55	; 0x37
    26ae:	98 ad       	ldd	r25, Y+56	; 0x38
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	40 e2       	ldi	r20, 0x20	; 32
    26b6:	51 e4       	ldi	r21, 0x41	; 65
    26b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26bc:	dc 01       	movw	r26, r24
    26be:	cb 01       	movw	r24, r22
    26c0:	bc 01       	movw	r22, r24
    26c2:	cd 01       	movw	r24, r26
    26c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	98 ab       	std	Y+48, r25	; 0x30
    26ce:	8f a7       	std	Y+47, r24	; 0x2f
    26d0:	0f c0       	rjmp	.+30     	; 0x26f0 <LCD_displayCharacter+0xde>
    26d2:	88 ec       	ldi	r24, 0xC8	; 200
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	9e a7       	std	Y+46, r25	; 0x2e
    26d8:	8d a7       	std	Y+45, r24	; 0x2d
    26da:	8d a5       	ldd	r24, Y+45	; 0x2d
    26dc:	9e a5       	ldd	r25, Y+46	; 0x2e
    26de:	01 97       	sbiw	r24, 0x01	; 1
    26e0:	f1 f7       	brne	.-4      	; 0x26de <LCD_displayCharacter+0xcc>
    26e2:	9e a7       	std	Y+46, r25	; 0x2e
    26e4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    26e8:	98 a9       	ldd	r25, Y+48	; 0x30
    26ea:	01 97       	sbiw	r24, 0x01	; 1
    26ec:	98 ab       	std	Y+48, r25	; 0x30
    26ee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    26f2:	98 a9       	ldd	r25, Y+48	; 0x30
    26f4:	00 97       	sbiw	r24, 0x00	; 0
    26f6:	69 f7       	brne	.-38     	; 0x26d2 <LCD_displayCharacter+0xc0>
    26f8:	14 c0       	rjmp	.+40     	; 0x2722 <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26fa:	69 a9       	ldd	r22, Y+49	; 0x31
    26fc:	7a a9       	ldd	r23, Y+50	; 0x32
    26fe:	8b a9       	ldd	r24, Y+51	; 0x33
    2700:	9c a9       	ldd	r25, Y+52	; 0x34
    2702:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	98 ab       	std	Y+48, r25	; 0x30
    270c:	8f a7       	std	Y+47, r24	; 0x2f
    270e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2710:	98 a9       	ldd	r25, Y+48	; 0x30
    2712:	9c a7       	std	Y+44, r25	; 0x2c
    2714:	8b a7       	std	Y+43, r24	; 0x2b
    2716:	8b a5       	ldd	r24, Y+43	; 0x2b
    2718:	9c a5       	ldd	r25, Y+44	; 0x2c
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	f1 f7       	brne	.-4      	; 0x271a <LCD_displayCharacter+0x108>
    271e:	9c a7       	std	Y+44, r25	; 0x2c
    2720:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_WritePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    2722:	83 e0       	ldi	r24, 0x03	; 3
    2724:	66 e0       	ldi	r22, 0x06	; 6
    2726:	41 e0       	ldi	r20, 0x01	; 1
    2728:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <GPIO_WritePin>
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	a0 e8       	ldi	r26, 0x80	; 128
    2732:	bf e3       	ldi	r27, 0x3F	; 63
    2734:	8f a3       	std	Y+39, r24	; 0x27
    2736:	98 a7       	std	Y+40, r25	; 0x28
    2738:	a9 a7       	std	Y+41, r26	; 0x29
    273a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    273c:	6f a1       	ldd	r22, Y+39	; 0x27
    273e:	78 a5       	ldd	r23, Y+40	; 0x28
    2740:	89 a5       	ldd	r24, Y+41	; 0x29
    2742:	9a a5       	ldd	r25, Y+42	; 0x2a
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	4a ef       	ldi	r20, 0xFA	; 250
    274a:	54 e4       	ldi	r21, 0x44	; 68
    274c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	8b a3       	std	Y+35, r24	; 0x23
    2756:	9c a3       	std	Y+36, r25	; 0x24
    2758:	ad a3       	std	Y+37, r26	; 0x25
    275a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    275c:	6b a1       	ldd	r22, Y+35	; 0x23
    275e:	7c a1       	ldd	r23, Y+36	; 0x24
    2760:	8d a1       	ldd	r24, Y+37	; 0x25
    2762:	9e a1       	ldd	r25, Y+38	; 0x26
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	40 e8       	ldi	r20, 0x80	; 128
    276a:	5f e3       	ldi	r21, 0x3F	; 63
    276c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2770:	88 23       	and	r24, r24
    2772:	2c f4       	brge	.+10     	; 0x277e <LCD_displayCharacter+0x16c>
		__ticks = 1;
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	9a a3       	std	Y+34, r25	; 0x22
    277a:	89 a3       	std	Y+33, r24	; 0x21
    277c:	3f c0       	rjmp	.+126    	; 0x27fc <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    277e:	6b a1       	ldd	r22, Y+35	; 0x23
    2780:	7c a1       	ldd	r23, Y+36	; 0x24
    2782:	8d a1       	ldd	r24, Y+37	; 0x25
    2784:	9e a1       	ldd	r25, Y+38	; 0x26
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	3f ef       	ldi	r19, 0xFF	; 255
    278a:	4f e7       	ldi	r20, 0x7F	; 127
    278c:	57 e4       	ldi	r21, 0x47	; 71
    278e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2792:	18 16       	cp	r1, r24
    2794:	4c f5       	brge	.+82     	; 0x27e8 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2796:	6f a1       	ldd	r22, Y+39	; 0x27
    2798:	78 a5       	ldd	r23, Y+40	; 0x28
    279a:	89 a5       	ldd	r24, Y+41	; 0x29
    279c:	9a a5       	ldd	r25, Y+42	; 0x2a
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	40 e2       	ldi	r20, 0x20	; 32
    27a4:	51 e4       	ldi	r21, 0x41	; 65
    27a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	bc 01       	movw	r22, r24
    27b0:	cd 01       	movw	r24, r26
    27b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	9a a3       	std	Y+34, r25	; 0x22
    27bc:	89 a3       	std	Y+33, r24	; 0x21
    27be:	0f c0       	rjmp	.+30     	; 0x27de <LCD_displayCharacter+0x1cc>
    27c0:	88 ec       	ldi	r24, 0xC8	; 200
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	98 a3       	std	Y+32, r25	; 0x20
    27c6:	8f 8f       	std	Y+31, r24	; 0x1f
    27c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27ca:	98 a1       	ldd	r25, Y+32	; 0x20
    27cc:	01 97       	sbiw	r24, 0x01	; 1
    27ce:	f1 f7       	brne	.-4      	; 0x27cc <LCD_displayCharacter+0x1ba>
    27d0:	98 a3       	std	Y+32, r25	; 0x20
    27d2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d4:	89 a1       	ldd	r24, Y+33	; 0x21
    27d6:	9a a1       	ldd	r25, Y+34	; 0x22
    27d8:	01 97       	sbiw	r24, 0x01	; 1
    27da:	9a a3       	std	Y+34, r25	; 0x22
    27dc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27de:	89 a1       	ldd	r24, Y+33	; 0x21
    27e0:	9a a1       	ldd	r25, Y+34	; 0x22
    27e2:	00 97       	sbiw	r24, 0x00	; 0
    27e4:	69 f7       	brne	.-38     	; 0x27c0 <LCD_displayCharacter+0x1ae>
    27e6:	14 c0       	rjmp	.+40     	; 0x2810 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e8:	6b a1       	ldd	r22, Y+35	; 0x23
    27ea:	7c a1       	ldd	r23, Y+36	; 0x24
    27ec:	8d a1       	ldd	r24, Y+37	; 0x25
    27ee:	9e a1       	ldd	r25, Y+38	; 0x26
    27f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	9a a3       	std	Y+34, r25	; 0x22
    27fa:	89 a3       	std	Y+33, r24	; 0x21
    27fc:	89 a1       	ldd	r24, Y+33	; 0x21
    27fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2800:	9e 8f       	std	Y+30, r25	; 0x1e
    2802:	8d 8f       	std	Y+29, r24	; 0x1d
    2804:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2806:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	f1 f7       	brne	.-4      	; 0x2808 <LCD_displayCharacter+0x1f6>
    280c:	9e 8f       	std	Y+30, r25	; 0x1e
    280e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_WritePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_WritePort(LCD_DATA_PORT_ID, data); /* out the required command to the data bus D0 --> D7 */
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	6a ad       	ldd	r22, Y+58	; 0x3a
    2814:	0e 94 76 0f 	call	0x1eec	; 0x1eec <GPIO_WritePort>
    2818:	80 e0       	ldi	r24, 0x00	; 0
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	a0 e8       	ldi	r26, 0x80	; 128
    281e:	bf e3       	ldi	r27, 0x3F	; 63
    2820:	89 8f       	std	Y+25, r24	; 0x19
    2822:	9a 8f       	std	Y+26, r25	; 0x1a
    2824:	ab 8f       	std	Y+27, r26	; 0x1b
    2826:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2828:	69 8d       	ldd	r22, Y+25	; 0x19
    282a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    282c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    282e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	4a ef       	ldi	r20, 0xFA	; 250
    2836:	54 e4       	ldi	r21, 0x44	; 68
    2838:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283c:	dc 01       	movw	r26, r24
    283e:	cb 01       	movw	r24, r22
    2840:	8d 8b       	std	Y+21, r24	; 0x15
    2842:	9e 8b       	std	Y+22, r25	; 0x16
    2844:	af 8b       	std	Y+23, r26	; 0x17
    2846:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2848:	6d 89       	ldd	r22, Y+21	; 0x15
    284a:	7e 89       	ldd	r23, Y+22	; 0x16
    284c:	8f 89       	ldd	r24, Y+23	; 0x17
    284e:	98 8d       	ldd	r25, Y+24	; 0x18
    2850:	20 e0       	ldi	r18, 0x00	; 0
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	40 e8       	ldi	r20, 0x80	; 128
    2856:	5f e3       	ldi	r21, 0x3F	; 63
    2858:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    285c:	88 23       	and	r24, r24
    285e:	2c f4       	brge	.+10     	; 0x286a <LCD_displayCharacter+0x258>
		__ticks = 1;
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	9c 8b       	std	Y+20, r25	; 0x14
    2866:	8b 8b       	std	Y+19, r24	; 0x13
    2868:	3f c0       	rjmp	.+126    	; 0x28e8 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    286a:	6d 89       	ldd	r22, Y+21	; 0x15
    286c:	7e 89       	ldd	r23, Y+22	; 0x16
    286e:	8f 89       	ldd	r24, Y+23	; 0x17
    2870:	98 8d       	ldd	r25, Y+24	; 0x18
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	3f ef       	ldi	r19, 0xFF	; 255
    2876:	4f e7       	ldi	r20, 0x7F	; 127
    2878:	57 e4       	ldi	r21, 0x47	; 71
    287a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    287e:	18 16       	cp	r1, r24
    2880:	4c f5       	brge	.+82     	; 0x28d4 <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2882:	69 8d       	ldd	r22, Y+25	; 0x19
    2884:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2886:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2888:	9c 8d       	ldd	r25, Y+28	; 0x1c
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	40 e2       	ldi	r20, 0x20	; 32
    2890:	51 e4       	ldi	r21, 0x41	; 65
    2892:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	bc 01       	movw	r22, r24
    289c:	cd 01       	movw	r24, r26
    289e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	9c 8b       	std	Y+20, r25	; 0x14
    28a8:	8b 8b       	std	Y+19, r24	; 0x13
    28aa:	0f c0       	rjmp	.+30     	; 0x28ca <LCD_displayCharacter+0x2b8>
    28ac:	88 ec       	ldi	r24, 0xC8	; 200
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	9a 8b       	std	Y+18, r25	; 0x12
    28b2:	89 8b       	std	Y+17, r24	; 0x11
    28b4:	89 89       	ldd	r24, Y+17	; 0x11
    28b6:	9a 89       	ldd	r25, Y+18	; 0x12
    28b8:	01 97       	sbiw	r24, 0x01	; 1
    28ba:	f1 f7       	brne	.-4      	; 0x28b8 <LCD_displayCharacter+0x2a6>
    28bc:	9a 8b       	std	Y+18, r25	; 0x12
    28be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c0:	8b 89       	ldd	r24, Y+19	; 0x13
    28c2:	9c 89       	ldd	r25, Y+20	; 0x14
    28c4:	01 97       	sbiw	r24, 0x01	; 1
    28c6:	9c 8b       	std	Y+20, r25	; 0x14
    28c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ca:	8b 89       	ldd	r24, Y+19	; 0x13
    28cc:	9c 89       	ldd	r25, Y+20	; 0x14
    28ce:	00 97       	sbiw	r24, 0x00	; 0
    28d0:	69 f7       	brne	.-38     	; 0x28ac <LCD_displayCharacter+0x29a>
    28d2:	14 c0       	rjmp	.+40     	; 0x28fc <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d4:	6d 89       	ldd	r22, Y+21	; 0x15
    28d6:	7e 89       	ldd	r23, Y+22	; 0x16
    28d8:	8f 89       	ldd	r24, Y+23	; 0x17
    28da:	98 8d       	ldd	r25, Y+24	; 0x18
    28dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	9c 8b       	std	Y+20, r25	; 0x14
    28e6:	8b 8b       	std	Y+19, r24	; 0x13
    28e8:	8b 89       	ldd	r24, Y+19	; 0x13
    28ea:	9c 89       	ldd	r25, Y+20	; 0x14
    28ec:	98 8b       	std	Y+16, r25	; 0x10
    28ee:	8f 87       	std	Y+15, r24	; 0x0f
    28f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    28f2:	98 89       	ldd	r25, Y+16	; 0x10
    28f4:	01 97       	sbiw	r24, 0x01	; 1
    28f6:	f1 f7       	brne	.-4      	; 0x28f4 <LCD_displayCharacter+0x2e2>
    28f8:	98 8b       	std	Y+16, r25	; 0x10
    28fa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_WritePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    28fc:	83 e0       	ldi	r24, 0x03	; 3
    28fe:	66 e0       	ldi	r22, 0x06	; 6
    2900:	40 e0       	ldi	r20, 0x00	; 0
    2902:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <GPIO_WritePin>
    2906:	80 e0       	ldi	r24, 0x00	; 0
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	a0 e8       	ldi	r26, 0x80	; 128
    290c:	bf e3       	ldi	r27, 0x3F	; 63
    290e:	8b 87       	std	Y+11, r24	; 0x0b
    2910:	9c 87       	std	Y+12, r25	; 0x0c
    2912:	ad 87       	std	Y+13, r26	; 0x0d
    2914:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2916:	6b 85       	ldd	r22, Y+11	; 0x0b
    2918:	7c 85       	ldd	r23, Y+12	; 0x0c
    291a:	8d 85       	ldd	r24, Y+13	; 0x0d
    291c:	9e 85       	ldd	r25, Y+14	; 0x0e
    291e:	20 e0       	ldi	r18, 0x00	; 0
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	4a ef       	ldi	r20, 0xFA	; 250
    2924:	54 e4       	ldi	r21, 0x44	; 68
    2926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    292a:	dc 01       	movw	r26, r24
    292c:	cb 01       	movw	r24, r22
    292e:	8f 83       	std	Y+7, r24	; 0x07
    2930:	98 87       	std	Y+8, r25	; 0x08
    2932:	a9 87       	std	Y+9, r26	; 0x09
    2934:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2936:	6f 81       	ldd	r22, Y+7	; 0x07
    2938:	78 85       	ldd	r23, Y+8	; 0x08
    293a:	89 85       	ldd	r24, Y+9	; 0x09
    293c:	9a 85       	ldd	r25, Y+10	; 0x0a
    293e:	20 e0       	ldi	r18, 0x00	; 0
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	40 e8       	ldi	r20, 0x80	; 128
    2944:	5f e3       	ldi	r21, 0x3F	; 63
    2946:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    294a:	88 23       	and	r24, r24
    294c:	2c f4       	brge	.+10     	; 0x2958 <LCD_displayCharacter+0x346>
		__ticks = 1;
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	9e 83       	std	Y+6, r25	; 0x06
    2954:	8d 83       	std	Y+5, r24	; 0x05
    2956:	3f c0       	rjmp	.+126    	; 0x29d6 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    2958:	6f 81       	ldd	r22, Y+7	; 0x07
    295a:	78 85       	ldd	r23, Y+8	; 0x08
    295c:	89 85       	ldd	r24, Y+9	; 0x09
    295e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	3f ef       	ldi	r19, 0xFF	; 255
    2964:	4f e7       	ldi	r20, 0x7F	; 127
    2966:	57 e4       	ldi	r21, 0x47	; 71
    2968:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    296c:	18 16       	cp	r1, r24
    296e:	4c f5       	brge	.+82     	; 0x29c2 <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2970:	6b 85       	ldd	r22, Y+11	; 0x0b
    2972:	7c 85       	ldd	r23, Y+12	; 0x0c
    2974:	8d 85       	ldd	r24, Y+13	; 0x0d
    2976:	9e 85       	ldd	r25, Y+14	; 0x0e
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	40 e2       	ldi	r20, 0x20	; 32
    297e:	51 e4       	ldi	r21, 0x41	; 65
    2980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	bc 01       	movw	r22, r24
    298a:	cd 01       	movw	r24, r26
    298c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	9e 83       	std	Y+6, r25	; 0x06
    2996:	8d 83       	std	Y+5, r24	; 0x05
    2998:	0f c0       	rjmp	.+30     	; 0x29b8 <LCD_displayCharacter+0x3a6>
    299a:	88 ec       	ldi	r24, 0xC8	; 200
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	9c 83       	std	Y+4, r25	; 0x04
    29a0:	8b 83       	std	Y+3, r24	; 0x03
    29a2:	8b 81       	ldd	r24, Y+3	; 0x03
    29a4:	9c 81       	ldd	r25, Y+4	; 0x04
    29a6:	01 97       	sbiw	r24, 0x01	; 1
    29a8:	f1 f7       	brne	.-4      	; 0x29a6 <LCD_displayCharacter+0x394>
    29aa:	9c 83       	std	Y+4, r25	; 0x04
    29ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ae:	8d 81       	ldd	r24, Y+5	; 0x05
    29b0:	9e 81       	ldd	r25, Y+6	; 0x06
    29b2:	01 97       	sbiw	r24, 0x01	; 1
    29b4:	9e 83       	std	Y+6, r25	; 0x06
    29b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b8:	8d 81       	ldd	r24, Y+5	; 0x05
    29ba:	9e 81       	ldd	r25, Y+6	; 0x06
    29bc:	00 97       	sbiw	r24, 0x00	; 0
    29be:	69 f7       	brne	.-38     	; 0x299a <LCD_displayCharacter+0x388>
    29c0:	14 c0       	rjmp	.+40     	; 0x29ea <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c2:	6f 81       	ldd	r22, Y+7	; 0x07
    29c4:	78 85       	ldd	r23, Y+8	; 0x08
    29c6:	89 85       	ldd	r24, Y+9	; 0x09
    29c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	9e 83       	std	Y+6, r25	; 0x06
    29d4:	8d 83       	std	Y+5, r24	; 0x05
    29d6:	8d 81       	ldd	r24, Y+5	; 0x05
    29d8:	9e 81       	ldd	r25, Y+6	; 0x06
    29da:	9a 83       	std	Y+2, r25	; 0x02
    29dc:	89 83       	std	Y+1, r24	; 0x01
    29de:	89 81       	ldd	r24, Y+1	; 0x01
    29e0:	9a 81       	ldd	r25, Y+2	; 0x02
    29e2:	01 97       	sbiw	r24, 0x01	; 1
    29e4:	f1 f7       	brne	.-4      	; 0x29e2 <LCD_displayCharacter+0x3d0>
    29e6:	9a 83       	std	Y+2, r25	; 0x02
    29e8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    29ea:	ea 96       	adiw	r28, 0x3a	; 58
    29ec:	0f b6       	in	r0, 0x3f	; 63
    29ee:	f8 94       	cli
    29f0:	de bf       	out	0x3e, r29	; 62
    29f2:	0f be       	out	0x3f, r0	; 63
    29f4:	cd bf       	out	0x3d, r28	; 61
    29f6:	cf 91       	pop	r28
    29f8:	df 91       	pop	r29
    29fa:	08 95       	ret

000029fc <LCD_displayString>:
 [DISCRIPTION]:	Display the required string on the screen
  [Args]: pointer to uint8
 [RUTURN]: void
 ---------------------------------------------------------------------------------------*/
void LCD_displayString(const char *Str)
{
    29fc:	df 93       	push	r29
    29fe:	cf 93       	push	r28
    2a00:	00 d0       	rcall	.+0      	; 0x2a02 <LCD_displayString+0x6>
    2a02:	cd b7       	in	r28, 0x3d	; 61
    2a04:	de b7       	in	r29, 0x3e	; 62
    2a06:	9a 83       	std	Y+2, r25	; 0x02
    2a08:	89 83       	std	Y+1, r24	; 0x01
    2a0a:	0a c0       	rjmp	.+20     	; 0x2a20 <LCD_displayString+0x24>
	while((*Str) != '\0')

	{
		LCD_displayCharacter(*Str);
    2a0c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a0e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a10:	80 81       	ld	r24, Z
    2a12:	0e 94 09 13 	call	0x2612	; 0x2612 <LCD_displayCharacter>
		Str++;
    2a16:	89 81       	ldd	r24, Y+1	; 0x01
    2a18:	9a 81       	ldd	r25, Y+2	; 0x02
    2a1a:	01 96       	adiw	r24, 0x01	; 1
    2a1c:	9a 83       	std	Y+2, r25	; 0x02
    2a1e:	89 83       	std	Y+1, r24	; 0x01
  [Args]: pointer to uint8
 [RUTURN]: void
 ---------------------------------------------------------------------------------------*/
void LCD_displayString(const char *Str)
{
	while((*Str) != '\0')
    2a20:	e9 81       	ldd	r30, Y+1	; 0x01
    2a22:	fa 81       	ldd	r31, Y+2	; 0x02
    2a24:	80 81       	ld	r24, Z
    2a26:	88 23       	and	r24, r24
    2a28:	89 f7       	brne	.-30     	; 0x2a0c <LCD_displayString+0x10>

	{
		LCD_displayCharacter(*Str);
		Str++;
	}
}
    2a2a:	0f 90       	pop	r0
    2a2c:	0f 90       	pop	r0
    2a2e:	cf 91       	pop	r28
    2a30:	df 91       	pop	r29
    2a32:	08 95       	ret

00002a34 <LCD_moveCursor>:
 [DISCRIPTION]:	Move the cursor to a specified row and column index on the screen
  [Args]:  uint8
 [RUTURN]: void
 ---------------------------------------------------------------------------------------*/
void LCD_moveCursor(uint8 row,uint8 col)
{
    2a34:	df 93       	push	r29
    2a36:	cf 93       	push	r28
    2a38:	00 d0       	rcall	.+0      	; 0x2a3a <LCD_moveCursor+0x6>
    2a3a:	00 d0       	rcall	.+0      	; 0x2a3c <LCD_moveCursor+0x8>
    2a3c:	0f 92       	push	r0
    2a3e:	cd b7       	in	r28, 0x3d	; 61
    2a40:	de b7       	in	r29, 0x3e	; 62
    2a42:	8a 83       	std	Y+2, r24	; 0x02
    2a44:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2a46:	8a 81       	ldd	r24, Y+2	; 0x02
    2a48:	28 2f       	mov	r18, r24
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	3d 83       	std	Y+5, r19	; 0x05
    2a4e:	2c 83       	std	Y+4, r18	; 0x04
    2a50:	8c 81       	ldd	r24, Y+4	; 0x04
    2a52:	9d 81       	ldd	r25, Y+5	; 0x05
    2a54:	81 30       	cpi	r24, 0x01	; 1
    2a56:	91 05       	cpc	r25, r1
    2a58:	c1 f0       	breq	.+48     	; 0x2a8a <LCD_moveCursor+0x56>
    2a5a:	2c 81       	ldd	r18, Y+4	; 0x04
    2a5c:	3d 81       	ldd	r19, Y+5	; 0x05
    2a5e:	22 30       	cpi	r18, 0x02	; 2
    2a60:	31 05       	cpc	r19, r1
    2a62:	2c f4       	brge	.+10     	; 0x2a6e <LCD_moveCursor+0x3a>
    2a64:	8c 81       	ldd	r24, Y+4	; 0x04
    2a66:	9d 81       	ldd	r25, Y+5	; 0x05
    2a68:	00 97       	sbiw	r24, 0x00	; 0
    2a6a:	61 f0       	breq	.+24     	; 0x2a84 <LCD_moveCursor+0x50>
    2a6c:	19 c0       	rjmp	.+50     	; 0x2aa0 <LCD_moveCursor+0x6c>
    2a6e:	2c 81       	ldd	r18, Y+4	; 0x04
    2a70:	3d 81       	ldd	r19, Y+5	; 0x05
    2a72:	22 30       	cpi	r18, 0x02	; 2
    2a74:	31 05       	cpc	r19, r1
    2a76:	69 f0       	breq	.+26     	; 0x2a92 <LCD_moveCursor+0x5e>
    2a78:	8c 81       	ldd	r24, Y+4	; 0x04
    2a7a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a7c:	83 30       	cpi	r24, 0x03	; 3
    2a7e:	91 05       	cpc	r25, r1
    2a80:	61 f0       	breq	.+24     	; 0x2a9a <LCD_moveCursor+0x66>
    2a82:	0e c0       	rjmp	.+28     	; 0x2aa0 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address = col;
    2a84:	8b 81       	ldd	r24, Y+3	; 0x03
    2a86:	89 83       	std	Y+1, r24	; 0x01
    2a88:	0b c0       	rjmp	.+22     	; 0x2aa0 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = col+0x40;
    2a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8c:	80 5c       	subi	r24, 0xC0	; 192
    2a8e:	89 83       	std	Y+1, r24	; 0x01
    2a90:	07 c0       	rjmp	.+14     	; 0x2aa0 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = col+0x10;
    2a92:	8b 81       	ldd	r24, Y+3	; 0x03
    2a94:	80 5f       	subi	r24, 0xF0	; 240
    2a96:	89 83       	std	Y+1, r24	; 0x01
    2a98:	03 c0       	rjmp	.+6      	; 0x2aa0 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = col+0x50;
    2a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9c:	80 5b       	subi	r24, 0xB0	; 176
    2a9e:	89 83       	std	Y+1, r24	; 0x01
		break;
	default: ;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2aa0:	89 81       	ldd	r24, Y+1	; 0x01
    2aa2:	80 68       	ori	r24, 0x80	; 128
    2aa4:	0e 94 14 11 	call	0x2228	; 0x2228 <LCD_sendCommand>
}
    2aa8:	0f 90       	pop	r0
    2aaa:	0f 90       	pop	r0
    2aac:	0f 90       	pop	r0
    2aae:	0f 90       	pop	r0
    2ab0:	0f 90       	pop	r0
    2ab2:	cf 91       	pop	r28
    2ab4:	df 91       	pop	r29
    2ab6:	08 95       	ret

00002ab8 <LCD_displayStringRowColumn>:
 [DISCRIPTION]:	Display the required string in a specified row and column index on the screen
  [Args]:  uint8
 [RUTURN]: void
 ---------------------------------------------------------------------------------------*/
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2ab8:	df 93       	push	r29
    2aba:	cf 93       	push	r28
    2abc:	00 d0       	rcall	.+0      	; 0x2abe <LCD_displayStringRowColumn+0x6>
    2abe:	00 d0       	rcall	.+0      	; 0x2ac0 <LCD_displayStringRowColumn+0x8>
    2ac0:	cd b7       	in	r28, 0x3d	; 61
    2ac2:	de b7       	in	r29, 0x3e	; 62
    2ac4:	89 83       	std	Y+1, r24	; 0x01
    2ac6:	6a 83       	std	Y+2, r22	; 0x02
    2ac8:	5c 83       	std	Y+4, r21	; 0x04
    2aca:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col); /* go to to the required LCD position */
    2acc:	89 81       	ldd	r24, Y+1	; 0x01
    2ace:	6a 81       	ldd	r22, Y+2	; 0x02
    2ad0:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad8:	0e 94 fe 14 	call	0x29fc	; 0x29fc <LCD_displayString>
}
    2adc:	0f 90       	pop	r0
    2ade:	0f 90       	pop	r0
    2ae0:	0f 90       	pop	r0
    2ae2:	0f 90       	pop	r0
    2ae4:	cf 91       	pop	r28
    2ae6:	df 91       	pop	r29
    2ae8:	08 95       	ret

00002aea <LCD_intgerToString>:
 [DISCRIPTION]:	Display the required decimal value on the screen
  [Args]:  uint832
 [RUTURN]: void
 ---------------------------------------------------------------------------------------*/
void LCD_intgerToString(int data)
{
    2aea:	df 93       	push	r29
    2aec:	cf 93       	push	r28
    2aee:	cd b7       	in	r28, 0x3d	; 61
    2af0:	de b7       	in	r29, 0x3e	; 62
    2af2:	62 97       	sbiw	r28, 0x12	; 18
    2af4:	0f b6       	in	r0, 0x3f	; 63
    2af6:	f8 94       	cli
    2af8:	de bf       	out	0x3e, r29	; 62
    2afa:	0f be       	out	0x3f, r0	; 63
    2afc:	cd bf       	out	0x3d, r28	; 61
    2afe:	9a 8b       	std	Y+18, r25	; 0x12
    2b00:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ASCII result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2b02:	89 89       	ldd	r24, Y+17	; 0x11
    2b04:	9a 89       	ldd	r25, Y+18	; 0x12
    2b06:	9e 01       	movw	r18, r28
    2b08:	2f 5f       	subi	r18, 0xFF	; 255
    2b0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b0c:	b9 01       	movw	r22, r18
    2b0e:	4a e0       	ldi	r20, 0x0A	; 10
    2b10:	50 e0       	ldi	r21, 0x00	; 0
    2b12:	0e 94 38 19 	call	0x3270	; 0x3270 <itoa>
	LCD_displayString(buff); /* Display the string */
    2b16:	ce 01       	movw	r24, r28
    2b18:	01 96       	adiw	r24, 0x01	; 1
    2b1a:	0e 94 fe 14 	call	0x29fc	; 0x29fc <LCD_displayString>
}
    2b1e:	62 96       	adiw	r28, 0x12	; 18
    2b20:	0f b6       	in	r0, 0x3f	; 63
    2b22:	f8 94       	cli
    2b24:	de bf       	out	0x3e, r29	; 62
    2b26:	0f be       	out	0x3f, r0	; 63
    2b28:	cd bf       	out	0x3d, r28	; 61
    2b2a:	cf 91       	pop	r28
    2b2c:	df 91       	pop	r29
    2b2e:	08 95       	ret

00002b30 <LCD_clearScreen>:
 [DISCRIPTION]:	Send the clear screen command
  [Args]:  void
 [RUTURN]: void
 ---------------------------------------------------------------------------------------*/
void LCD_clearScreen(void)
{
    2b30:	df 93       	push	r29
    2b32:	cf 93       	push	r28
    2b34:	cd b7       	in	r28, 0x3d	; 61
    2b36:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	0e 94 14 11 	call	0x2228	; 0x2228 <LCD_sendCommand>
}
    2b3e:	cf 91       	pop	r28
    2b40:	df 91       	pop	r29
    2b42:	08 95       	ret

00002b44 <KEYPAD_getPressedKey>:
 [DISCRIPTION]:	Get the Keypad pressed button.
 [Args]: void
 [RUTURN]: uint8
 ---------------------------------------------------------------------------------------*/
uint8 KEYPAD_getPressedKey(void)
{
    2b44:	df 93       	push	r29
    2b46:	cf 93       	push	r28
    2b48:	00 d0       	rcall	.+0      	; 0x2b4a <KEYPAD_getPressedKey+0x6>
    2b4a:	0f 92       	push	r0
    2b4c:	cd b7       	in	r28, 0x3d	; 61
    2b4e:	de b7       	in	r29, 0x3e	; 62
	uint8 col = 0;
    2b50:	1b 82       	std	Y+3, r1	; 0x03
	uint8 row = 0;
    2b52:	1a 82       	std	Y+2, r1	; 0x02
	uint8 keypad_port_value = 0;
    2b54:	19 82       	std	Y+1, r1	; 0x01
	{
		/*
		 * Each time setup the direction for all keypad port as input pins,
		 * except this column will be output pin
		 */
		for(col = 0; col < KEYPAD_NUM_COLS; col++) /* loop for columns */
    2b56:	1b 82       	std	Y+3, r1	; 0x03
    2b58:	43 c0       	rjmp	.+134    	; 0x2be0 <KEYPAD_getPressedKey+0x9c>
		{
			GPIO_SetPortDir(KEYPAD_PORT_ID, port_input);
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	60 e0       	ldi	r22, 0x00	; 0
    2b5e:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <GPIO_SetPortDir>
			GPIO_SetPinDir(KEYPAD_PORT_ID, KEYPAD_FIRST_COLUMN_PIN_ID+col, pin_output);
    2b62:	8b 81       	ldd	r24, Y+3	; 0x03
    2b64:	98 2f       	mov	r25, r24
    2b66:	9c 5f       	subi	r25, 0xFC	; 252
    2b68:	80 e0       	ldi	r24, 0x00	; 0
    2b6a:	69 2f       	mov	r22, r25
    2b6c:	41 e0       	ldi	r20, 0x01	; 1
    2b6e:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <GPIO_SetPinDir>
#if (KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    2b72:	8b 81       	ldd	r24, Y+3	; 0x03
    2b74:	88 2f       	mov	r24, r24
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	9c 01       	movw	r18, r24
    2b7a:	2c 5f       	subi	r18, 0xFC	; 252
    2b7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	02 c0       	rjmp	.+4      	; 0x2b88 <KEYPAD_getPressedKey+0x44>
    2b84:	88 0f       	add	r24, r24
    2b86:	99 1f       	adc	r25, r25
    2b88:	2a 95       	dec	r18
    2b8a:	e2 f7       	brpl	.-8      	; 0x2b84 <KEYPAD_getPressedKey+0x40>
    2b8c:	80 95       	com	r24
    2b8e:	89 83       	std	Y+1, r24	; 0x01
#elif (KEYPAD_BUTTON_PRESSED == LOGIC_HIGH)
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_WritePort(KEYPAD_PORT_ID, keypad_port_value);
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	69 81       	ldd	r22, Y+1	; 0x01
    2b94:	0e 94 76 0f 	call	0x1eec	; 0x1eec <GPIO_WritePort>

			for(row = 0; row < KEYPAD_NUM_ROWS; row++) /* loop for rows */
    2b98:	1a 82       	std	Y+2, r1	; 0x02
    2b9a:	1c c0       	rjmp	.+56     	; 0x2bd4 <KEYPAD_getPressedKey+0x90>
			{
				if(GPIO_ReadPin(KEYPAD_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row) == KEYPAD_BUTTON_PRESSED)
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	6a 81       	ldd	r22, Y+2	; 0x02
    2ba0:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <GPIO_ReadPin>
    2ba4:	88 23       	and	r24, r24
    2ba6:	99 f4       	brne	.+38     	; 0x2bce <KEYPAD_getPressedKey+0x8a>
				{
					/* Check if the switch is pressed in this row */
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    2baa:	88 2f       	mov	r24, r24
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	88 0f       	add	r24, r24
    2bb0:	99 1f       	adc	r25, r25
    2bb2:	88 0f       	add	r24, r24
    2bb4:	99 1f       	adc	r25, r25
    2bb6:	98 2f       	mov	r25, r24
    2bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bba:	89 0f       	add	r24, r25
    2bbc:	8f 5f       	subi	r24, 0xFF	; 255
    2bbe:	0e 94 f5 15 	call	0x2bea	; 0x2bea <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
    2bc2:	0f 90       	pop	r0
    2bc4:	0f 90       	pop	r0
    2bc6:	0f 90       	pop	r0
    2bc8:	cf 91       	pop	r28
    2bca:	df 91       	pop	r29
    2bcc:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_WritePort(KEYPAD_PORT_ID, keypad_port_value);

			for(row = 0; row < KEYPAD_NUM_ROWS; row++) /* loop for rows */
    2bce:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd0:	8f 5f       	subi	r24, 0xFF	; 255
    2bd2:	8a 83       	std	Y+2, r24	; 0x02
    2bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd6:	84 30       	cpi	r24, 0x04	; 4
    2bd8:	08 f3       	brcs	.-62     	; 0x2b9c <KEYPAD_getPressedKey+0x58>
	{
		/*
		 * Each time setup the direction for all keypad port as input pins,
		 * except this column will be output pin
		 */
		for(col = 0; col < KEYPAD_NUM_COLS; col++) /* loop for columns */
    2bda:	8b 81       	ldd	r24, Y+3	; 0x03
    2bdc:	8f 5f       	subi	r24, 0xFF	; 255
    2bde:	8b 83       	std	Y+3, r24	; 0x03
    2be0:	8b 81       	ldd	r24, Y+3	; 0x03
    2be2:	84 30       	cpi	r24, 0x04	; 4
    2be4:	08 f4       	brcc	.+2      	; 0x2be8 <KEYPAD_getPressedKey+0xa4>
    2be6:	b9 cf       	rjmp	.-142    	; 0x2b5a <KEYPAD_getPressedKey+0x16>
    2be8:	b6 cf       	rjmp	.-148    	; 0x2b56 <KEYPAD_getPressedKey+0x12>

00002bea <KEYPAD_4x4_adjustKeyNumber>:
 	 	 	    its corresponding functional number in the proteus for 4x4 keypad
 [Args]: uint8
 [RUTURN]: uint8
 ---------------------------------------------------------------------------------------*/
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2bea:	df 93       	push	r29
    2bec:	cf 93       	push	r28
    2bee:	00 d0       	rcall	.+0      	; 0x2bf0 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2bf0:	00 d0       	rcall	.+0      	; 0x2bf2 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2bf2:	cd b7       	in	r28, 0x3d	; 61
    2bf4:	de b7       	in	r29, 0x3e	; 62
    2bf6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2bf8:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfc:	28 2f       	mov	r18, r24
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	3c 83       	std	Y+4, r19	; 0x04
    2c02:	2b 83       	std	Y+3, r18	; 0x03
    2c04:	8b 81       	ldd	r24, Y+3	; 0x03
    2c06:	9c 81       	ldd	r25, Y+4	; 0x04
    2c08:	88 30       	cpi	r24, 0x08	; 8
    2c0a:	91 05       	cpc	r25, r1
    2c0c:	09 f4       	brne	.+2      	; 0x2c10 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2c0e:	70 c0       	rjmp	.+224    	; 0x2cf0 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2c10:	2b 81       	ldd	r18, Y+3	; 0x03
    2c12:	3c 81       	ldd	r19, Y+4	; 0x04
    2c14:	29 30       	cpi	r18, 0x09	; 9
    2c16:	31 05       	cpc	r19, r1
    2c18:	5c f5       	brge	.+86     	; 0x2c70 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c1e:	84 30       	cpi	r24, 0x04	; 4
    2c20:	91 05       	cpc	r25, r1
    2c22:	09 f4       	brne	.+2      	; 0x2c26 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2c24:	59 c0       	rjmp	.+178    	; 0x2cd8 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2c26:	2b 81       	ldd	r18, Y+3	; 0x03
    2c28:	3c 81       	ldd	r19, Y+4	; 0x04
    2c2a:	25 30       	cpi	r18, 0x05	; 5
    2c2c:	31 05       	cpc	r19, r1
    2c2e:	9c f4       	brge	.+38     	; 0x2c56 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2c30:	8b 81       	ldd	r24, Y+3	; 0x03
    2c32:	9c 81       	ldd	r25, Y+4	; 0x04
    2c34:	82 30       	cpi	r24, 0x02	; 2
    2c36:	91 05       	cpc	r25, r1
    2c38:	09 f4       	brne	.+2      	; 0x2c3c <KEYPAD_4x4_adjustKeyNumber+0x52>
    2c3a:	48 c0       	rjmp	.+144    	; 0x2ccc <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2c3c:	2b 81       	ldd	r18, Y+3	; 0x03
    2c3e:	3c 81       	ldd	r19, Y+4	; 0x04
    2c40:	23 30       	cpi	r18, 0x03	; 3
    2c42:	31 05       	cpc	r19, r1
    2c44:	0c f0       	brlt	.+2      	; 0x2c48 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2c46:	45 c0       	rjmp	.+138    	; 0x2cd2 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2c48:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4c:	81 30       	cpi	r24, 0x01	; 1
    2c4e:	91 05       	cpc	r25, r1
    2c50:	09 f4       	brne	.+2      	; 0x2c54 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2c52:	39 c0       	rjmp	.+114    	; 0x2cc6 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2c54:	67 c0       	rjmp	.+206    	; 0x2d24 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2c56:	2b 81       	ldd	r18, Y+3	; 0x03
    2c58:	3c 81       	ldd	r19, Y+4	; 0x04
    2c5a:	26 30       	cpi	r18, 0x06	; 6
    2c5c:	31 05       	cpc	r19, r1
    2c5e:	09 f4       	brne	.+2      	; 0x2c62 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2c60:	41 c0       	rjmp	.+130    	; 0x2ce4 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2c62:	8b 81       	ldd	r24, Y+3	; 0x03
    2c64:	9c 81       	ldd	r25, Y+4	; 0x04
    2c66:	87 30       	cpi	r24, 0x07	; 7
    2c68:	91 05       	cpc	r25, r1
    2c6a:	0c f0       	brlt	.+2      	; 0x2c6e <KEYPAD_4x4_adjustKeyNumber+0x84>
    2c6c:	3e c0       	rjmp	.+124    	; 0x2cea <KEYPAD_4x4_adjustKeyNumber+0x100>
    2c6e:	37 c0       	rjmp	.+110    	; 0x2cde <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2c70:	2b 81       	ldd	r18, Y+3	; 0x03
    2c72:	3c 81       	ldd	r19, Y+4	; 0x04
    2c74:	2c 30       	cpi	r18, 0x0C	; 12
    2c76:	31 05       	cpc	r19, r1
    2c78:	09 f4       	brne	.+2      	; 0x2c7c <KEYPAD_4x4_adjustKeyNumber+0x92>
    2c7a:	46 c0       	rjmp	.+140    	; 0x2d08 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c80:	8d 30       	cpi	r24, 0x0D	; 13
    2c82:	91 05       	cpc	r25, r1
    2c84:	5c f4       	brge	.+22     	; 0x2c9c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2c86:	2b 81       	ldd	r18, Y+3	; 0x03
    2c88:	3c 81       	ldd	r19, Y+4	; 0x04
    2c8a:	2a 30       	cpi	r18, 0x0A	; 10
    2c8c:	31 05       	cpc	r19, r1
    2c8e:	b1 f1       	breq	.+108    	; 0x2cfc <KEYPAD_4x4_adjustKeyNumber+0x112>
    2c90:	8b 81       	ldd	r24, Y+3	; 0x03
    2c92:	9c 81       	ldd	r25, Y+4	; 0x04
    2c94:	8b 30       	cpi	r24, 0x0B	; 11
    2c96:	91 05       	cpc	r25, r1
    2c98:	a4 f5       	brge	.+104    	; 0x2d02 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2c9a:	2d c0       	rjmp	.+90     	; 0x2cf6 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2c9c:	2b 81       	ldd	r18, Y+3	; 0x03
    2c9e:	3c 81       	ldd	r19, Y+4	; 0x04
    2ca0:	2e 30       	cpi	r18, 0x0E	; 14
    2ca2:	31 05       	cpc	r19, r1
    2ca4:	b9 f1       	breq	.+110    	; 0x2d14 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca8:	9c 81       	ldd	r25, Y+4	; 0x04
    2caa:	8e 30       	cpi	r24, 0x0E	; 14
    2cac:	91 05       	cpc	r25, r1
    2cae:	7c f1       	brlt	.+94     	; 0x2d0e <KEYPAD_4x4_adjustKeyNumber+0x124>
    2cb0:	2b 81       	ldd	r18, Y+3	; 0x03
    2cb2:	3c 81       	ldd	r19, Y+4	; 0x04
    2cb4:	2f 30       	cpi	r18, 0x0F	; 15
    2cb6:	31 05       	cpc	r19, r1
    2cb8:	79 f1       	breq	.+94     	; 0x2d18 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2cba:	8b 81       	ldd	r24, Y+3	; 0x03
    2cbc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cbe:	80 31       	cpi	r24, 0x10	; 16
    2cc0:	91 05       	cpc	r25, r1
    2cc2:	69 f1       	breq	.+90     	; 0x2d1e <KEYPAD_4x4_adjustKeyNumber+0x134>
    2cc4:	2f c0       	rjmp	.+94     	; 0x2d24 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1:
		keypad_button = 7;
    2cc6:	87 e0       	ldi	r24, 0x07	; 7
    2cc8:	89 83       	std	Y+1, r24	; 0x01
    2cca:	2e c0       	rjmp	.+92     	; 0x2d28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 2:
		keypad_button = 8;
    2ccc:	88 e0       	ldi	r24, 0x08	; 8
    2cce:	89 83       	std	Y+1, r24	; 0x01
    2cd0:	2b c0       	rjmp	.+86     	; 0x2d28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 3:
		keypad_button = 9;
    2cd2:	89 e0       	ldi	r24, 0x09	; 9
    2cd4:	89 83       	std	Y+1, r24	; 0x01
    2cd6:	28 c0       	rjmp	.+80     	; 0x2d28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 4:
		keypad_button = '%';  /* ASCII Code of '%' */
    2cd8:	85 e2       	ldi	r24, 0x25	; 37
    2cda:	89 83       	std	Y+1, r24	; 0x01
    2cdc:	25 c0       	rjmp	.+74     	; 0x2d28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 5:
		keypad_button = 4;
    2cde:	84 e0       	ldi	r24, 0x04	; 4
    2ce0:	89 83       	std	Y+1, r24	; 0x01
    2ce2:	22 c0       	rjmp	.+68     	; 0x2d28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 6:
		keypad_button = 5;
    2ce4:	85 e0       	ldi	r24, 0x05	; 5
    2ce6:	89 83       	std	Y+1, r24	; 0x01
    2ce8:	1f c0       	rjmp	.+62     	; 0x2d28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 7:
		keypad_button = 6;
    2cea:	86 e0       	ldi	r24, 0x06	; 6
    2cec:	89 83       	std	Y+1, r24	; 0x01
    2cee:	1c c0       	rjmp	.+56     	; 0x2d28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 8:
		keypad_button = '*';  /* ASCII Code of '*' */
    2cf0:	8a e2       	ldi	r24, 0x2A	; 42
    2cf2:	89 83       	std	Y+1, r24	; 0x01
    2cf4:	19 c0       	rjmp	.+50     	; 0x2d28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 9:
		keypad_button = 1;
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	89 83       	std	Y+1, r24	; 0x01
    2cfa:	16 c0       	rjmp	.+44     	; 0x2d28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 10:
		keypad_button = 2;
    2cfc:	82 e0       	ldi	r24, 0x02	; 2
    2cfe:	89 83       	std	Y+1, r24	; 0x01
    2d00:	13 c0       	rjmp	.+38     	; 0x2d28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 11:
		keypad_button = 3;
    2d02:	83 e0       	ldi	r24, 0x03	; 3
    2d04:	89 83       	std	Y+1, r24	; 0x01
    2d06:	10 c0       	rjmp	.+32     	; 0x2d28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 12:
		keypad_button = '-';  /* ASCII Code of '-' */
    2d08:	8d e2       	ldi	r24, 0x2D	; 45
    2d0a:	89 83       	std	Y+1, r24	; 0x01
    2d0c:	0d c0       	rjmp	.+26     	; 0x2d28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 13:
		keypad_button = 13;  /* ASCII of Enter */
    2d0e:	8d e0       	ldi	r24, 0x0D	; 13
    2d10:	89 83       	std	Y+1, r24	; 0x01
    2d12:	0a c0       	rjmp	.+20     	; 0x2d28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 14:
		keypad_button = 0;
    2d14:	19 82       	std	Y+1, r1	; 0x01
    2d16:	08 c0       	rjmp	.+16     	; 0x2d28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 15:
		keypad_button = '=';  /* ASCII Code of '=' */
    2d18:	8d e3       	ldi	r24, 0x3D	; 61
    2d1a:	89 83       	std	Y+1, r24	; 0x01
    2d1c:	05 c0       	rjmp	.+10     	; 0x2d28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 16:
		keypad_button = '+';  /* ASCII Code of '+' */
    2d1e:	8b e2       	ldi	r24, 0x2B	; 43
    2d20:	89 83       	std	Y+1, r24	; 0x01
    2d22:	02 c0       	rjmp	.+4      	; 0x2d28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	default:
		keypad_button = button_number;
    2d24:	8a 81       	ldd	r24, Y+2	; 0x02
    2d26:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return keypad_button;
    2d28:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d2a:	0f 90       	pop	r0
    2d2c:	0f 90       	pop	r0
    2d2e:	0f 90       	pop	r0
    2d30:	0f 90       	pop	r0
    2d32:	cf 91       	pop	r28
    2d34:	df 91       	pop	r29
    2d36:	08 95       	ret

00002d38 <APP_init>:
 * [Description]  : This function is responsible for initialize the application.
 * [Args]  : void
 * [Return]: void
 */
void APP_init(void)
{
    2d38:	df 93       	push	r29
    2d3a:	cf 93       	push	r28
    2d3c:	cd b7       	in	r28, 0x3d	; 61
    2d3e:	de b7       	in	r29, 0x3e	; 62
	/* LCD Initialization */
	LCD_init();
    2d40:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_init>
	/* callback function of timer1 */
	TIMER1_SetCallBack(APP_handleTimer);
    2d44:	8d ed       	ldi	r24, 0xDD	; 221
    2d46:	96 e1       	ldi	r25, 0x16	; 22
    2d48:	0e 94 89 0a 	call	0x1512	; 0x1512 <TIMER1_SetCallBack>
	/* Initialize the USART driver */
	USART_Init();
    2d4c:	0e 94 b0 07 	call	0xf60	; 0xf60 <USART_Init>
	/* Enable (I-bit) */
	GI_Enable();
    2d50:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <GI_Enable>
}
    2d54:	cf 91       	pop	r28
    2d56:	df 91       	pop	r29
    2d58:	08 95       	ret

00002d5a <APP_start>:
 * [Description]  : This function is responsible for Starting the application.
 * [Args]  : void
 * [Return]: void
 */
void APP_start(void)
{
    2d5a:	df 93       	push	r29
    2d5c:	cf 93       	push	r28
    2d5e:	cd b7       	in	r28, 0x3d	; 61
    2d60:	de b7       	in	r29, 0x3e	; 62
    2d62:	2a 97       	sbiw	r28, 0x0a	; 10
    2d64:	0f b6       	in	r0, 0x3f	; 63
    2d66:	f8 94       	cli
    2d68:	de bf       	out	0x3e, r29	; 62
    2d6a:	0f be       	out	0x3f, r0	; 63
    2d6c:	cd bf       	out	0x3d, r28	; 61

	/* Contain Second Password Taken From User */
	uint8 s_pass_buffer[PASSWORD_LENGTH];

	/* Ask User to Enter The password for first time the we check if two password are matched or not */
	APP_displayEnterPasswordAndCheckStatus(f_pass_buffer, s_pass_buffer);
    2d6e:	9e 01       	movw	r18, r28
    2d70:	2a 5f       	subi	r18, 0xFA	; 250
    2d72:	3f 4f       	sbci	r19, 0xFF	; 255
    2d74:	ce 01       	movw	r24, r28
    2d76:	01 96       	adiw	r24, 0x01	; 1
    2d78:	b9 01       	movw	r22, r18
    2d7a:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <APP_displayEnterPasswordAndCheckStatus>

	/* this while loop used to keep asking the user to choose from the main menu */
	while(1)
	{
		APP_userOption(f_pass_buffer, s_pass_buffer);
    2d7e:	9e 01       	movw	r18, r28
    2d80:	2a 5f       	subi	r18, 0xFA	; 250
    2d82:	3f 4f       	sbci	r19, 0xFF	; 255
    2d84:	ce 01       	movw	r24, r28
    2d86:	01 96       	adiw	r24, 0x01	; 1
    2d88:	b9 01       	movw	r22, r18
    2d8a:	0e 94 0d 18 	call	0x301a	; 0x301a <APP_userOption>
    2d8e:	f7 cf       	rjmp	.-18     	; 0x2d7e <APP_start+0x24>

00002d90 <APP_timer>:
 * [Description]  : This function is responsible for tells the timer to start counting and give it how many milliSecond you want.
 * [Args]  : uint8 required number of 100 milliSecond
 * [Return]: void
 */
void APP_timer(uint8 delay)
{
    2d90:	df 93       	push	r29
    2d92:	cf 93       	push	r28
    2d94:	0f 92       	push	r0
    2d96:	cd b7       	in	r28, 0x3d	; 61
    2d98:	de b7       	in	r29, 0x3e	; 62
    2d9a:	89 83       	std	Y+1, r24	; 0x01
	/* Initialize the timer */
	TIMER_Init();
    2d9c:	0e 94 28 0a 	call	0x1450	; 0x1450 <TIMER_Init>

	/* waiting until the seconds count reaches the specified no. of seconds */
	while(milliSecond_tick < delay);
    2da0:	90 91 88 02 	lds	r25, 0x0288
    2da4:	89 81       	ldd	r24, Y+1	; 0x01
    2da6:	98 17       	cp	r25, r24
    2da8:	d8 f3       	brcs	.-10     	; 0x2da0 <APP_timer+0x10>

	/* Stop The Timer1 */
	TIMER_DeInit();
    2daa:	0e 94 ad 0a 	call	0x155a	; 0x155a <TIMER_DeInit>

	/* reset number of ticks */
	milliSecond_tick = 0;
    2dae:	10 92 88 02 	sts	0x0288, r1
}
    2db2:	0f 90       	pop	r0
    2db4:	cf 91       	pop	r28
    2db6:	df 91       	pop	r29
    2db8:	08 95       	ret

00002dba <APP_handleTimer>:
 * 					a global variable which increases Every ISR Execution by 100ms.
 * [Args]  : void
 * [Return]: void
 */
void APP_handleTimer(void)
{
    2dba:	df 93       	push	r29
    2dbc:	cf 93       	push	r28
    2dbe:	cd b7       	in	r28, 0x3d	; 61
    2dc0:	de b7       	in	r29, 0x3e	; 62
	milliSecond_tick++;
    2dc2:	80 91 88 02 	lds	r24, 0x0288
    2dc6:	8f 5f       	subi	r24, 0xFF	; 255
    2dc8:	80 93 88 02 	sts	0x0288, r24
}
    2dcc:	cf 91       	pop	r28
    2dce:	df 91       	pop	r29
    2dd0:	08 95       	ret

00002dd2 <APP_adjustAndDisplay_Password>:
 * [Description]  : This function is responsible for Take the password from keypad and display '*' on the screen to hide password.
 * [Args]  : pointer to uint8
 * [Return]: void
 */
void APP_adjustAndDisplay_Password(uint8 *pass)
{
    2dd2:	0f 93       	push	r16
    2dd4:	1f 93       	push	r17
    2dd6:	df 93       	push	r29
    2dd8:	cf 93       	push	r28
    2dda:	00 d0       	rcall	.+0      	; 0x2ddc <APP_adjustAndDisplay_Password+0xa>
    2ddc:	0f 92       	push	r0
    2dde:	cd b7       	in	r28, 0x3d	; 61
    2de0:	de b7       	in	r29, 0x3e	; 62
    2de2:	9b 83       	std	Y+3, r25	; 0x03
    2de4:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i=0; i<PASSWORD_LENGTH; i++)
    2de6:	19 82       	std	Y+1, r1	; 0x01
    2de8:	1c c0       	rjmp	.+56     	; 0x2e22 <APP_adjustAndDisplay_Password+0x50>
	{
		/* get The Pressed Key into The Password Buffer */
		pass[i] = KEYPAD_getPressedKey();
    2dea:	89 81       	ldd	r24, Y+1	; 0x01
    2dec:	28 2f       	mov	r18, r24
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	8a 81       	ldd	r24, Y+2	; 0x02
    2df2:	9b 81       	ldd	r25, Y+3	; 0x03
    2df4:	8c 01       	movw	r16, r24
    2df6:	02 0f       	add	r16, r18
    2df8:	13 1f       	adc	r17, r19
    2dfa:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <KEYPAD_getPressedKey>
    2dfe:	f8 01       	movw	r30, r16
    2e00:	80 83       	st	Z, r24

		/* Display '*' on the screen */
		LCD_moveCursor(1, i+12);
    2e02:	89 81       	ldd	r24, Y+1	; 0x01
    2e04:	98 2f       	mov	r25, r24
    2e06:	94 5f       	subi	r25, 0xF4	; 244
    2e08:	81 e0       	ldi	r24, 0x01	; 1
    2e0a:	69 2f       	mov	r22, r25
    2e0c:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <LCD_moveCursor>
		LCD_displayCharacter('*');
    2e10:	8a e2       	ldi	r24, 0x2A	; 42
    2e12:	0e 94 09 13 	call	0x2612	; 0x2612 <LCD_displayCharacter>

		/* This delay to give chance to take the pressed key in the next Iteration */
		APP_timer(5);
    2e16:	85 e0       	ldi	r24, 0x05	; 5
    2e18:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <APP_timer>
 * [Args]  : pointer to uint8
 * [Return]: void
 */
void APP_adjustAndDisplay_Password(uint8 *pass)
{
	for(uint8 i=0; i<PASSWORD_LENGTH; i++)
    2e1c:	89 81       	ldd	r24, Y+1	; 0x01
    2e1e:	8f 5f       	subi	r24, 0xFF	; 255
    2e20:	89 83       	std	Y+1, r24	; 0x01
    2e22:	89 81       	ldd	r24, Y+1	; 0x01
    2e24:	85 30       	cpi	r24, 0x05	; 5
    2e26:	08 f3       	brcs	.-62     	; 0x2dea <APP_adjustAndDisplay_Password+0x18>

		/* This delay to give chance to take the pressed key in the next Iteration */
		APP_timer(5);
	}
	/* Polling Until Enter Key is Pressed */
	while(KEYPAD_getPressedKey() != ENTER_KEY);
    2e28:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <KEYPAD_getPressedKey>
    2e2c:	8d 30       	cpi	r24, 0x0D	; 13
    2e2e:	e1 f7       	brne	.-8      	; 0x2e28 <APP_adjustAndDisplay_Password+0x56>
	APP_timer(5);
    2e30:	85 e0       	ldi	r24, 0x05	; 5
    2e32:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <APP_timer>
}
    2e36:	0f 90       	pop	r0
    2e38:	0f 90       	pop	r0
    2e3a:	0f 90       	pop	r0
    2e3c:	cf 91       	pop	r28
    2e3e:	df 91       	pop	r29
    2e40:	1f 91       	pop	r17
    2e42:	0f 91       	pop	r16
    2e44:	08 95       	ret

00002e46 <APP_sendPasswordToControl_ECU>:
 * [Description]  : This function is responsible for send the password to control_ECU if it is ready to receive.
 * [Args]  : pointer to constant uint8
 * [Return]: void
 */
void APP_sendPasswordToControl_ECU(const uint8 *pass)
{
    2e46:	df 93       	push	r29
    2e48:	cf 93       	push	r28
    2e4a:	00 d0       	rcall	.+0      	; 0x2e4c <APP_sendPasswordToControl_ECU+0x6>
    2e4c:	0f 92       	push	r0
    2e4e:	cd b7       	in	r28, 0x3d	; 61
    2e50:	de b7       	in	r29, 0x3e	; 62
    2e52:	9b 83       	std	Y+3, r25	; 0x03
    2e54:	8a 83       	std	Y+2, r24	; 0x02
	/* Send dummy byte to tell control_ECU that HMI_ECU is ready */
	USART_sendByte(HMI_ECU_READY);
    2e56:	80 e2       	ldi	r24, 0x20	; 32
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	0e 94 e7 07 	call	0xfce	; 0xfce <USART_sendByte>

	/* Wait until Control_ECU reply that it is ready to receive password */
	while(USART_recieveByte() != CONTROL_ECU_READY);
    2e5e:	0e 94 00 08 	call	0x1000	; 0x1000 <USART_recieveByte>
    2e62:	80 31       	cpi	r24, 0x10	; 16
    2e64:	91 05       	cpc	r25, r1
    2e66:	d9 f7       	brne	.-10     	; 0x2e5e <APP_sendPasswordToControl_ECU+0x18>

	/* Send password to control_ECU by USART driver byte by byte */
	for(uint8 i=0; i<PASSWORD_LENGTH; i++)
    2e68:	19 82       	std	Y+1, r1	; 0x01
    2e6a:	10 c0       	rjmp	.+32     	; 0x2e8c <APP_sendPasswordToControl_ECU+0x46>
	{
		USART_sendByte(pass[i]);
    2e6c:	89 81       	ldd	r24, Y+1	; 0x01
    2e6e:	28 2f       	mov	r18, r24
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	8a 81       	ldd	r24, Y+2	; 0x02
    2e74:	9b 81       	ldd	r25, Y+3	; 0x03
    2e76:	fc 01       	movw	r30, r24
    2e78:	e2 0f       	add	r30, r18
    2e7a:	f3 1f       	adc	r31, r19
    2e7c:	80 81       	ld	r24, Z
    2e7e:	88 2f       	mov	r24, r24
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	0e 94 e7 07 	call	0xfce	; 0xfce <USART_sendByte>

	/* Wait until Control_ECU reply that it is ready to receive password */
	while(USART_recieveByte() != CONTROL_ECU_READY);

	/* Send password to control_ECU by USART driver byte by byte */
	for(uint8 i=0; i<PASSWORD_LENGTH; i++)
    2e86:	89 81       	ldd	r24, Y+1	; 0x01
    2e88:	8f 5f       	subi	r24, 0xFF	; 255
    2e8a:	89 83       	std	Y+1, r24	; 0x01
    2e8c:	89 81       	ldd	r24, Y+1	; 0x01
    2e8e:	85 30       	cpi	r24, 0x05	; 5
    2e90:	68 f3       	brcs	.-38     	; 0x2e6c <APP_sendPasswordToControl_ECU+0x26>
	{
		USART_sendByte(pass[i]);
	}
}
    2e92:	0f 90       	pop	r0
    2e94:	0f 90       	pop	r0
    2e96:	0f 90       	pop	r0
    2e98:	cf 91       	pop	r28
    2e9a:	df 91       	pop	r29
    2e9c:	08 95       	ret

00002e9e <APP_displayEnterPassword>:
 * [Args]  : 1- pointer to uint8
 * 			 2- pointer to uint8
 * [Return]: void
 */
void APP_displayEnterPassword(uint8 *f_pass, uint8 *s_pass)
{
    2e9e:	df 93       	push	r29
    2ea0:	cf 93       	push	r28
    2ea2:	00 d0       	rcall	.+0      	; 0x2ea4 <APP_displayEnterPassword+0x6>
    2ea4:	00 d0       	rcall	.+0      	; 0x2ea6 <APP_displayEnterPassword+0x8>
    2ea6:	cd b7       	in	r28, 0x3d	; 61
    2ea8:	de b7       	in	r29, 0x3e	; 62
    2eaa:	9a 83       	std	Y+2, r25	; 0x02
    2eac:	89 83       	std	Y+1, r24	; 0x01
    2eae:	7c 83       	std	Y+4, r23	; 0x04
    2eb0:	6b 83       	std	Y+3, r22	; 0x03
	/* Take first password */
	LCD_clearScreen();
    2eb2:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_clearScreen>
	LCD_moveCursor(0, 3);
    2eb6:	80 e0       	ldi	r24, 0x00	; 0
    2eb8:	63 e0       	ldi	r22, 0x03	; 3
    2eba:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <LCD_moveCursor>
	LCD_displayString("Please Enter The Password");
    2ebe:	80 e6       	ldi	r24, 0x60	; 96
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	0e 94 fe 14 	call	0x29fc	; 0x29fc <LCD_displayString>
	/* Display '*' on the screen*/
	APP_adjustAndDisplay_Password(f_pass);
    2ec6:	89 81       	ldd	r24, Y+1	; 0x01
    2ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    2eca:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <APP_adjustAndDisplay_Password>

	/* Take second password */
	LCD_clearScreen();
    2ece:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_clearScreen>
	LCD_moveCursor(0, 3);
    2ed2:	80 e0       	ldi	r24, 0x00	; 0
    2ed4:	63 e0       	ldi	r22, 0x03	; 3
    2ed6:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <LCD_moveCursor>
	LCD_displayString("Please Re-Enter The Password");
    2eda:	8a e7       	ldi	r24, 0x7A	; 122
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	0e 94 fe 14 	call	0x29fc	; 0x29fc <LCD_displayString>
	/* Display '*' on the screen*/
	APP_adjustAndDisplay_Password(s_pass);
    2ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee6:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <APP_adjustAndDisplay_Password>
	LCD_clearScreen();
    2eea:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_clearScreen>

	/* Send Passwords to control ECU */
	APP_sendPasswordToControl_ECU(f_pass);
    2eee:	89 81       	ldd	r24, Y+1	; 0x01
    2ef0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef2:	0e 94 23 17 	call	0x2e46	; 0x2e46 <APP_sendPasswordToControl_ECU>
	APP_sendPasswordToControl_ECU(s_pass);
    2ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef8:	9c 81       	ldd	r25, Y+4	; 0x04
    2efa:	0e 94 23 17 	call	0x2e46	; 0x2e46 <APP_sendPasswordToControl_ECU>
}
    2efe:	0f 90       	pop	r0
    2f00:	0f 90       	pop	r0
    2f02:	0f 90       	pop	r0
    2f04:	0f 90       	pop	r0
    2f06:	cf 91       	pop	r28
    2f08:	df 91       	pop	r29
    2f0a:	08 95       	ret

00002f0c <APP_displayUserOptions>:
 * [Description]  : This function is responsible for display the options menu which the user will choose from it (Open door / Change Password).
 * [Args]  : void
 * [Return]: void
 */
void APP_displayUserOptions(void)
{
    2f0c:	df 93       	push	r29
    2f0e:	cf 93       	push	r28
    2f10:	cd b7       	in	r28, 0x3d	; 61
    2f12:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    2f14:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_clearScreen>
	LCD_moveCursor(0, 4);
    2f18:	80 e0       	ldi	r24, 0x00	; 0
    2f1a:	64 e0       	ldi	r22, 0x04	; 4
    2f1c:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <LCD_moveCursor>
	LCD_displayString("(+): Open Door");
    2f20:	87 e9       	ldi	r24, 0x97	; 151
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	0e 94 fe 14 	call	0x29fc	; 0x29fc <LCD_displayString>

	LCD_moveCursor(1, 4);
    2f28:	81 e0       	ldi	r24, 0x01	; 1
    2f2a:	64 e0       	ldi	r22, 0x04	; 4
    2f2c:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <LCD_moveCursor>
	LCD_displayString("(-): Change Password");
    2f30:	86 ea       	ldi	r24, 0xA6	; 166
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	0e 94 fe 14 	call	0x29fc	; 0x29fc <LCD_displayString>
}
    2f38:	cf 91       	pop	r28
    2f3a:	df 91       	pop	r29
    2f3c:	08 95       	ret

00002f3e <APP_recievePasswordStatus>:
 * [Description]  : This function is responsible for gets the status from control_ECU of the passwords (matching or not).
 * [Args]  : void
 * [Return]: uint8
 */
uint8 APP_recievePasswordStatus(void)
{
    2f3e:	df 93       	push	r29
    2f40:	cf 93       	push	r28
    2f42:	cd b7       	in	r28, 0x3d	; 61
    2f44:	de b7       	in	r29, 0x3e	; 62
	/* Wait until the control_ECU is ready to send the status */
	while(USART_recieveByte()!= CONTROL_ECU_READY);
    2f46:	0e 94 00 08 	call	0x1000	; 0x1000 <USART_recieveByte>
    2f4a:	80 31       	cpi	r24, 0x10	; 16
    2f4c:	91 05       	cpc	r25, r1
    2f4e:	d9 f7       	brne	.-10     	; 0x2f46 <APP_recievePasswordStatus+0x8>
	USART_sendByte(HMI_ECU_READY);
    2f50:	80 e2       	ldi	r24, 0x20	; 32
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	0e 94 e7 07 	call	0xfce	; 0xfce <USART_sendByte>

	/*read the status*/
	return USART_recieveByte();
    2f58:	0e 94 00 08 	call	0x1000	; 0x1000 <USART_recieveByte>
}
    2f5c:	cf 91       	pop	r28
    2f5e:	df 91       	pop	r29
    2f60:	08 95       	ret

00002f62 <APP_displayEnterPasswordAndCheckStatus>:
 * [Args]  : 1- pointer to uint8
 * 			 2- pointer to uint8
 * [Return]: void
 */
void APP_displayEnterPasswordAndCheckStatus(uint8 *f_pass, uint8 *s_pass)
{
    2f62:	df 93       	push	r29
    2f64:	cf 93       	push	r28
    2f66:	00 d0       	rcall	.+0      	; 0x2f68 <APP_displayEnterPasswordAndCheckStatus+0x6>
    2f68:	00 d0       	rcall	.+0      	; 0x2f6a <APP_displayEnterPasswordAndCheckStatus+0x8>
    2f6a:	cd b7       	in	r28, 0x3d	; 61
    2f6c:	de b7       	in	r29, 0x3e	; 62
    2f6e:	9a 83       	std	Y+2, r25	; 0x02
    2f70:	89 83       	std	Y+1, r24	; 0x01
    2f72:	7c 83       	std	Y+4, r23	; 0x04
    2f74:	6b 83       	std	Y+3, r22	; 0x03
	/* This loop doesn't terminate until the write password Entered */
	while(1)
	{
		/* First Ask User To Enter Password */
		APP_displayEnterPassword(f_pass, s_pass);
    2f76:	89 81       	ldd	r24, Y+1	; 0x01
    2f78:	9a 81       	ldd	r25, Y+2	; 0x02
    2f7a:	2b 81       	ldd	r18, Y+3	; 0x03
    2f7c:	3c 81       	ldd	r19, Y+4	; 0x04
    2f7e:	b9 01       	movw	r22, r18
    2f80:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <APP_displayEnterPassword>

		/* Control_ECU Will Check Status Of these two Passwords (Matching or not) */
		status = APP_recievePasswordStatus();
    2f84:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <APP_recievePasswordStatus>
    2f88:	80 93 89 02 	sts	0x0289, r24

		if(status == PASSWORD_MATCH)
    2f8c:	80 91 89 02 	lds	r24, 0x0289
    2f90:	81 31       	cpi	r24, 0x11	; 17
    2f92:	a1 f4       	brne	.+40     	; 0x2fbc <APP_displayEnterPasswordAndCheckStatus+0x5a>
		{
			LCD_clearScreen();
    2f94:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_clearScreen>
			LCD_moveCursor(0, 4);
    2f98:	80 e0       	ldi	r24, 0x00	; 0
    2f9a:	64 e0       	ldi	r22, 0x04	; 4
    2f9c:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <LCD_moveCursor>
			LCD_displayString("Correct Password");
    2fa0:	8b eb       	ldi	r24, 0xBB	; 187
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	0e 94 fe 14 	call	0x29fc	; 0x29fc <LCD_displayString>
			APP_timer(5);
    2fa8:	85 e0       	ldi	r24, 0x05	; 5
    2faa:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <APP_timer>
			LCD_moveCursor(0, 4);
			LCD_displayString("In Correct Password");
			APP_timer(5);
		}
	}
}
    2fae:	0f 90       	pop	r0
    2fb0:	0f 90       	pop	r0
    2fb2:	0f 90       	pop	r0
    2fb4:	0f 90       	pop	r0
    2fb6:	cf 91       	pop	r28
    2fb8:	df 91       	pop	r29
    2fba:	08 95       	ret
			break;
		}
		else
		{
			/* Stay in While loop if two Password doesn't match */
			LCD_clearScreen();
    2fbc:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_clearScreen>
			LCD_moveCursor(0, 4);
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
    2fc2:	64 e0       	ldi	r22, 0x04	; 4
    2fc4:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <LCD_moveCursor>
			LCD_displayString("In Correct Password");
    2fc8:	8c ec       	ldi	r24, 0xCC	; 204
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	0e 94 fe 14 	call	0x29fc	; 0x29fc <LCD_displayString>
			APP_timer(5);
    2fd0:	85 e0       	ldi	r24, 0x05	; 5
    2fd2:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <APP_timer>
    2fd6:	cf cf       	rjmp	.-98     	; 0x2f76 <APP_displayEnterPasswordAndCheckStatus+0x14>

00002fd8 <APP_sendOption>:
 * [Description]  : This function is responsible for sends the option which user chose from the main menu to be handled in control_ECU side.
 * [Args]  : uint8
 * [Return]: void
 */
void APP_sendOption(uint8 option)
{
    2fd8:	df 93       	push	r29
    2fda:	cf 93       	push	r28
    2fdc:	0f 92       	push	r0
    2fde:	cd b7       	in	r28, 0x3d	; 61
    2fe0:	de b7       	in	r29, 0x3e	; 62
    2fe2:	89 83       	std	Y+1, r24	; 0x01
	USART_sendByte(HMI_ECU_READY);
    2fe4:	80 e2       	ldi	r24, 0x20	; 32
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	0e 94 e7 07 	call	0xfce	; 0xfce <USART_sendByte>
	/* Wait until the control ECU is ready to receive option */
	while(USART_recieveByte() != CONTROL_ECU_READY);
    2fec:	0e 94 00 08 	call	0x1000	; 0x1000 <USART_recieveByte>
    2ff0:	80 31       	cpi	r24, 0x10	; 16
    2ff2:	91 05       	cpc	r25, r1
    2ff4:	d9 f7       	brne	.-10     	; 0x2fec <APP_sendOption+0x14>
	USART_sendByte(option);
    2ff6:	89 81       	ldd	r24, Y+1	; 0x01
    2ff8:	88 2f       	mov	r24, r24
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	0e 94 e7 07 	call	0xfce	; 0xfce <USART_sendByte>
}
    3000:	0f 90       	pop	r0
    3002:	cf 91       	pop	r28
    3004:	df 91       	pop	r29
    3006:	08 95       	ret

00003008 <APP_takeOption>:
 * [Description]  : This function is responsible for take the user's option (pressed key).
 * [Args]  : void
 * [Return]: uint8
 */
uint8 APP_takeOption(void)
{
    3008:	df 93       	push	r29
    300a:	cf 93       	push	r28
    300c:	cd b7       	in	r28, 0x3d	; 61
    300e:	de b7       	in	r29, 0x3e	; 62
	return KEYPAD_getPressedKey();
    3010:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <KEYPAD_getPressedKey>
}
    3014:	cf 91       	pop	r28
    3016:	df 91       	pop	r29
    3018:	08 95       	ret

0000301a <APP_userOption>:
 * [Args]  : 1- pointer to uint8
 * 			 2- pointer to uint8
 * [Return]: void
 */
void APP_userOption(uint8 *f_pass, uint8 *s_pass)
{
    301a:	df 93       	push	r29
    301c:	cf 93       	push	r28
    301e:	00 d0       	rcall	.+0      	; 0x3020 <APP_userOption+0x6>
    3020:	00 d0       	rcall	.+0      	; 0x3022 <APP_userOption+0x8>
    3022:	00 d0       	rcall	.+0      	; 0x3024 <APP_userOption+0xa>
    3024:	cd b7       	in	r28, 0x3d	; 61
    3026:	de b7       	in	r29, 0x3e	; 62
    3028:	9a 83       	std	Y+2, r25	; 0x02
    302a:	89 83       	std	Y+1, r24	; 0x01
    302c:	7c 83       	std	Y+4, r23	; 0x04
    302e:	6b 83       	std	Y+3, r22	; 0x03
	/* Display User options (Open door / Change Password) */
	APP_displayUserOptions();
    3030:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <APP_displayUserOptions>

	/* Send user option To Control_ECU */
	APP_sendOption(APP_takeOption());
    3034:	0e 94 04 18 	call	0x3008	; 0x3008 <APP_takeOption>
    3038:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <APP_sendOption>

	switch(APP_takeOption())
    303c:	0e 94 04 18 	call	0x3008	; 0x3008 <APP_takeOption>
    3040:	28 2f       	mov	r18, r24
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	3e 83       	std	Y+6, r19	; 0x06
    3046:	2d 83       	std	Y+5, r18	; 0x05
    3048:	8d 81       	ldd	r24, Y+5	; 0x05
    304a:	9e 81       	ldd	r25, Y+6	; 0x06
    304c:	8b 32       	cpi	r24, 0x2B	; 43
    304e:	91 05       	cpc	r25, r1
    3050:	39 f0       	breq	.+14     	; 0x3060 <APP_userOption+0x46>
    3052:	2d 81       	ldd	r18, Y+5	; 0x05
    3054:	3e 81       	ldd	r19, Y+6	; 0x06
    3056:	2d 32       	cpi	r18, 0x2D	; 45
    3058:	31 05       	cpc	r19, r1
    305a:	09 f4       	brne	.+2      	; 0x305e <APP_userOption+0x44>
    305c:	65 c0       	rjmp	.+202    	; 0x3128 <APP_userOption+0x10e>
    305e:	bb c0       	rjmp	.+374    	; 0x31d6 <APP_userOption+0x1bc>
	case OPEN_DOOR_OPTION:
		/* This Loop won't terminate until The password is correctly entered */
		while(1)
		{
			/* Ask user to enter the password */
			LCD_clearScreen();
    3060:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_clearScreen>
			LCD_moveCursor(0,4);
    3064:	80 e0       	ldi	r24, 0x00	; 0
    3066:	64 e0       	ldi	r22, 0x04	; 4
    3068:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <LCD_moveCursor>
			LCD_displayString("Please Enter Password : ");
    306c:	80 ee       	ldi	r24, 0xE0	; 224
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	0e 94 fe 14 	call	0x29fc	; 0x29fc <LCD_displayString>
			APP_timer(3);
    3074:	83 e0       	ldi	r24, 0x03	; 3
    3076:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <APP_timer>

			/* Display '*' on the screen */
			APP_adjustAndDisplay_Password(f_pass);
    307a:	89 81       	ldd	r24, Y+1	; 0x01
    307c:	9a 81       	ldd	r25, Y+2	; 0x02
    307e:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <APP_adjustAndDisplay_Password>
			/* Send the password to control_ECU to check it matches with the saved password or not */
			APP_sendPasswordToControl_ECU(f_pass);
    3082:	89 81       	ldd	r24, Y+1	; 0x01
    3084:	9a 81       	ldd	r25, Y+2	; 0x02
    3086:	0e 94 23 17 	call	0x2e46	; 0x2e46 <APP_sendPasswordToControl_ECU>

			/* Receive the status of the password (Matches or not) */
			status = APP_recievePasswordStatus();
    308a:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <APP_recievePasswordStatus>
    308e:	80 93 89 02 	sts	0x0289, r24

			/* Check on the status comes from Control_ECU */
			if(status == DOOR_IS_OPENING)
    3092:	80 91 89 02 	lds	r24, 0x0289
    3096:	82 32       	cpi	r24, 0x22	; 34
    3098:	09 f5       	brne	.+66     	; 0x30dc <APP_userOption+0xc2>
			{
				/* Opening The door as The password Matched */
				LCD_clearScreen();
    309a:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_clearScreen>
				LCD_moveCursor(0, 4);
    309e:	80 e0       	ldi	r24, 0x00	; 0
    30a0:	64 e0       	ldi	r22, 0x04	; 4
    30a2:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <LCD_moveCursor>
				LCD_displayString("Door is Opening...");
    30a6:	89 ef       	ldi	r24, 0xF9	; 249
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	0e 94 fe 14 	call	0x29fc	; 0x29fc <LCD_displayString>

				/* Waiting Control ECU To decide when we close the door */
				status = APP_recievePasswordStatus();
    30ae:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <APP_recievePasswordStatus>
    30b2:	80 93 89 02 	sts	0x0289, r24

				/* If the status sent by control ECU is CLOSING_DOOR */
				if(status == DOOR_IS_CLOSING)
    30b6:	80 91 89 02 	lds	r24, 0x0289
    30ba:	83 33       	cpi	r24, 0x33	; 51
    30bc:	89 f6       	brne	.-94     	; 0x3060 <APP_userOption+0x46>
				{
					/* Opening The door as The password Matched */
					LCD_clearScreen();
    30be:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_clearScreen>
					LCD_moveCursor(0, 4);
    30c2:	80 e0       	ldi	r24, 0x00	; 0
    30c4:	64 e0       	ldi	r22, 0x04	; 4
    30c6:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <LCD_moveCursor>
					LCD_displayString("closing The Door");
    30ca:	8c e0       	ldi	r24, 0x0C	; 12
    30cc:	91 e0       	ldi	r25, 0x01	; 1
    30ce:	0e 94 fe 14 	call	0x29fc	; 0x29fc <LCD_displayString>

					/* Wait Until The door is closed to return to main menu*/
					while(APP_recievePasswordStatus() != DOOR_IS_CLOSED);
    30d2:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <APP_recievePasswordStatus>
    30d6:	84 34       	cpi	r24, 0x44	; 68
    30d8:	e1 f7       	brne	.-8      	; 0x30d2 <APP_userOption+0xb8>
    30da:	7d c0       	rjmp	.+250    	; 0x31d6 <APP_userOption+0x1bc>
					break;
				}
			}
			else if(status == PASSWORD_DISMATCH)
    30dc:	80 91 89 02 	lds	r24, 0x0289
    30e0:	88 23       	and	r24, r24
    30e2:	71 f4       	brne	.+28     	; 0x3100 <APP_userOption+0xe6>
			{
				LCD_clearScreen();
    30e4:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_clearScreen>
				LCD_moveCursor(0, 4);
    30e8:	80 e0       	ldi	r24, 0x00	; 0
    30ea:	64 e0       	ldi	r22, 0x04	; 4
    30ec:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <LCD_moveCursor>
				LCD_displayString("Wrong Password !");
    30f0:	8d e1       	ldi	r24, 0x1D	; 29
    30f2:	91 e0       	ldi	r25, 0x01	; 1
    30f4:	0e 94 fe 14 	call	0x29fc	; 0x29fc <LCD_displayString>
				APP_timer(5);
    30f8:	85 e0       	ldi	r24, 0x05	; 5
    30fa:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <APP_timer>
    30fe:	b0 cf       	rjmp	.-160    	; 0x3060 <APP_userOption+0x46>
				/* no break as if the password is wrong for 3 times ,Alarm will turn on */
			}
			else if(status == ERROR_MESSAGE)
    3100:	80 91 89 02 	lds	r24, 0x0289
    3104:	8f 3f       	cpi	r24, 0xFF	; 255
    3106:	09 f0       	breq	.+2      	; 0x310a <APP_userOption+0xf0>
    3108:	ab cf       	rjmp	.-170    	; 0x3060 <APP_userOption+0x46>
			{
				LCD_clearScreen();
    310a:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_clearScreen>
				LCD_moveCursor(0, 4);
    310e:	80 e0       	ldi	r24, 0x00	; 0
    3110:	64 e0       	ldi	r22, 0x04	; 4
    3112:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <LCD_moveCursor>
				LCD_displayString("Thief !!!!!!!");
    3116:	8e e2       	ldi	r24, 0x2E	; 46
    3118:	91 e0       	ldi	r25, 0x01	; 1
    311a:	0e 94 fe 14 	call	0x29fc	; 0x29fc <LCD_displayString>

				/* to wait until receive continue program status
				 * to display the main menu again */
				while(APP_recievePasswordStatus() != CONTINUE_PROGRAM);
    311e:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <APP_recievePasswordStatus>
    3122:	85 35       	cpi	r24, 0x55	; 85
    3124:	e1 f7       	brne	.-8      	; 0x311e <APP_userOption+0x104>
    3126:	57 c0       	rjmp	.+174    	; 0x31d6 <APP_userOption+0x1bc>
	case CHANGE_PASSWORD_OPTION:
		/* This Loop won't terminate until The password is correctly entered */
		while(1)
		{
			/* Tell the user to enter the old password*/
			LCD_clearScreen();
    3128:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_clearScreen>
			LCD_moveCursor(0,4);
    312c:	80 e0       	ldi	r24, 0x00	; 0
    312e:	64 e0       	ldi	r22, 0x04	; 4
    3130:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <LCD_moveCursor>
			LCD_displayString("Please Enter Password : ");
    3134:	80 ee       	ldi	r24, 0xE0	; 224
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	0e 94 fe 14 	call	0x29fc	; 0x29fc <LCD_displayString>
			APP_timer(3);
    313c:	83 e0       	ldi	r24, 0x03	; 3
    313e:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <APP_timer>

			/* Take the password from the user and display '*' */
			APP_adjustAndDisplay_Password(f_pass);
    3142:	89 81       	ldd	r24, Y+1	; 0x01
    3144:	9a 81       	ldd	r25, Y+2	; 0x02
    3146:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <APP_adjustAndDisplay_Password>

			/* Send the password to control_ECU to check it  */
			APP_sendPasswordToControl_ECU(f_pass);
    314a:	89 81       	ldd	r24, Y+1	; 0x01
    314c:	9a 81       	ldd	r25, Y+2	; 0x02
    314e:	0e 94 23 17 	call	0x2e46	; 0x2e46 <APP_sendPasswordToControl_ECU>

			/* Receive the status of the password (Matches or not) */
			status = APP_recievePasswordStatus();
    3152:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <APP_recievePasswordStatus>
    3156:	80 93 89 02 	sts	0x0289, r24

			/* Check on the status comes from Control_ECU */
			if(status == PASSWORD_MATCH)
    315a:	80 91 89 02 	lds	r24, 0x0289
    315e:	81 31       	cpi	r24, 0x11	; 17
    3160:	a9 f4       	brne	.+42     	; 0x318c <APP_userOption+0x172>
			{
				/* Opening The door as The password Matched */
				LCD_clearScreen();
    3162:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_clearScreen>
				LCD_moveCursor(0, 4);
    3166:	80 e0       	ldi	r24, 0x00	; 0
    3168:	64 e0       	ldi	r22, 0x04	; 4
    316a:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <LCD_moveCursor>
				LCD_displayString("Changing The Password....");
    316e:	8c e3       	ldi	r24, 0x3C	; 60
    3170:	91 e0       	ldi	r25, 0x01	; 1
    3172:	0e 94 fe 14 	call	0x29fc	; 0x29fc <LCD_displayString>
				APP_timer(10);
    3176:	8a e0       	ldi	r24, 0x0A	; 10
    3178:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <APP_timer>
				/* Check The Entered Password */
				APP_displayEnterPasswordAndCheckStatus(f_pass, s_pass);
    317c:	89 81       	ldd	r24, Y+1	; 0x01
    317e:	9a 81       	ldd	r25, Y+2	; 0x02
    3180:	2b 81       	ldd	r18, Y+3	; 0x03
    3182:	3c 81       	ldd	r19, Y+4	; 0x04
    3184:	b9 01       	movw	r22, r18
    3186:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <APP_displayEnterPasswordAndCheckStatus>
    318a:	25 c0       	rjmp	.+74     	; 0x31d6 <APP_userOption+0x1bc>
				break;
			}
			else if(status == PASSWORD_DISMATCH)
    318c:	80 91 89 02 	lds	r24, 0x0289
    3190:	88 23       	and	r24, r24
    3192:	71 f4       	brne	.+28     	; 0x31b0 <APP_userOption+0x196>
			{
				LCD_clearScreen();
    3194:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_clearScreen>
				LCD_moveCursor(0, 4);
    3198:	80 e0       	ldi	r24, 0x00	; 0
    319a:	64 e0       	ldi	r22, 0x04	; 4
    319c:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <LCD_moveCursor>
				LCD_displayString("Incorrect Password !");
    31a0:	86 e5       	ldi	r24, 0x56	; 86
    31a2:	91 e0       	ldi	r25, 0x01	; 1
    31a4:	0e 94 fe 14 	call	0x29fc	; 0x29fc <LCD_displayString>
				APP_timer(5);
    31a8:	85 e0       	ldi	r24, 0x05	; 5
    31aa:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <APP_timer>
    31ae:	bc cf       	rjmp	.-136    	; 0x3128 <APP_userOption+0x10e>
				/* No break statement to keep asking about the password */
			}
			else if(status == ERROR_MESSAGE)
    31b0:	80 91 89 02 	lds	r24, 0x0289
    31b4:	8f 3f       	cpi	r24, 0xFF	; 255
    31b6:	09 f0       	breq	.+2      	; 0x31ba <APP_userOption+0x1a0>
    31b8:	b7 cf       	rjmp	.-146    	; 0x3128 <APP_userOption+0x10e>
			{
				LCD_clearScreen();
    31ba:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_clearScreen>
				LCD_moveCursor(0, 4);
    31be:	80 e0       	ldi	r24, 0x00	; 0
    31c0:	64 e0       	ldi	r22, 0x04	; 4
    31c2:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <LCD_moveCursor>
				LCD_displayString("ERROR !");
    31c6:	8b e6       	ldi	r24, 0x6B	; 107
    31c8:	91 e0       	ldi	r25, 0x01	; 1
    31ca:	0e 94 fe 14 	call	0x29fc	; 0x29fc <LCD_displayString>

				/* to wait until receive continue program status
				 * to display the main menu again */
				while(APP_recievePasswordStatus() != CONTINUE_PROGRAM);
    31ce:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <APP_recievePasswordStatus>
    31d2:	85 35       	cpi	r24, 0x55	; 85
    31d4:	e1 f7       	brne	.-8      	; 0x31ce <APP_userOption+0x1b4>
				break;
			}
		}
		break;
	}
}
    31d6:	26 96       	adiw	r28, 0x06	; 6
    31d8:	0f b6       	in	r0, 0x3f	; 63
    31da:	f8 94       	cli
    31dc:	de bf       	out	0x3e, r29	; 62
    31de:	0f be       	out	0x3f, r0	; 63
    31e0:	cd bf       	out	0x3d, r28	; 61
    31e2:	cf 91       	pop	r28
    31e4:	df 91       	pop	r29
    31e6:	08 95       	ret

000031e8 <main>:
/*******************************************************************************
 *                                Main Function
 *******************************************************************************/

int main(void)
{
    31e8:	df 93       	push	r29
    31ea:	cf 93       	push	r28
    31ec:	cd b7       	in	r28, 0x3d	; 61
    31ee:	de b7       	in	r29, 0x3e	; 62
	APP_init();
    31f0:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <APP_init>

	APP_start();
    31f4:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <APP_start>
    31f8:	80 e0       	ldi	r24, 0x00	; 0
    31fa:	90 e0       	ldi	r25, 0x00	; 0
}
    31fc:	cf 91       	pop	r28
    31fe:	df 91       	pop	r29
    3200:	08 95       	ret

00003202 <__prologue_saves__>:
    3202:	2f 92       	push	r2
    3204:	3f 92       	push	r3
    3206:	4f 92       	push	r4
    3208:	5f 92       	push	r5
    320a:	6f 92       	push	r6
    320c:	7f 92       	push	r7
    320e:	8f 92       	push	r8
    3210:	9f 92       	push	r9
    3212:	af 92       	push	r10
    3214:	bf 92       	push	r11
    3216:	cf 92       	push	r12
    3218:	df 92       	push	r13
    321a:	ef 92       	push	r14
    321c:	ff 92       	push	r15
    321e:	0f 93       	push	r16
    3220:	1f 93       	push	r17
    3222:	cf 93       	push	r28
    3224:	df 93       	push	r29
    3226:	cd b7       	in	r28, 0x3d	; 61
    3228:	de b7       	in	r29, 0x3e	; 62
    322a:	ca 1b       	sub	r28, r26
    322c:	db 0b       	sbc	r29, r27
    322e:	0f b6       	in	r0, 0x3f	; 63
    3230:	f8 94       	cli
    3232:	de bf       	out	0x3e, r29	; 62
    3234:	0f be       	out	0x3f, r0	; 63
    3236:	cd bf       	out	0x3d, r28	; 61
    3238:	09 94       	ijmp

0000323a <__epilogue_restores__>:
    323a:	2a 88       	ldd	r2, Y+18	; 0x12
    323c:	39 88       	ldd	r3, Y+17	; 0x11
    323e:	48 88       	ldd	r4, Y+16	; 0x10
    3240:	5f 84       	ldd	r5, Y+15	; 0x0f
    3242:	6e 84       	ldd	r6, Y+14	; 0x0e
    3244:	7d 84       	ldd	r7, Y+13	; 0x0d
    3246:	8c 84       	ldd	r8, Y+12	; 0x0c
    3248:	9b 84       	ldd	r9, Y+11	; 0x0b
    324a:	aa 84       	ldd	r10, Y+10	; 0x0a
    324c:	b9 84       	ldd	r11, Y+9	; 0x09
    324e:	c8 84       	ldd	r12, Y+8	; 0x08
    3250:	df 80       	ldd	r13, Y+7	; 0x07
    3252:	ee 80       	ldd	r14, Y+6	; 0x06
    3254:	fd 80       	ldd	r15, Y+5	; 0x05
    3256:	0c 81       	ldd	r16, Y+4	; 0x04
    3258:	1b 81       	ldd	r17, Y+3	; 0x03
    325a:	aa 81       	ldd	r26, Y+2	; 0x02
    325c:	b9 81       	ldd	r27, Y+1	; 0x01
    325e:	ce 0f       	add	r28, r30
    3260:	d1 1d       	adc	r29, r1
    3262:	0f b6       	in	r0, 0x3f	; 63
    3264:	f8 94       	cli
    3266:	de bf       	out	0x3e, r29	; 62
    3268:	0f be       	out	0x3f, r0	; 63
    326a:	cd bf       	out	0x3d, r28	; 61
    326c:	ed 01       	movw	r28, r26
    326e:	08 95       	ret

00003270 <itoa>:
    3270:	fb 01       	movw	r30, r22
    3272:	9f 01       	movw	r18, r30
    3274:	e8 94       	clt
    3276:	42 30       	cpi	r20, 0x02	; 2
    3278:	c4 f0       	brlt	.+48     	; 0x32aa <itoa+0x3a>
    327a:	45 32       	cpi	r20, 0x25	; 37
    327c:	b4 f4       	brge	.+44     	; 0x32aa <itoa+0x3a>
    327e:	4a 30       	cpi	r20, 0x0A	; 10
    3280:	29 f4       	brne	.+10     	; 0x328c <itoa+0x1c>
    3282:	97 fb       	bst	r25, 7
    3284:	1e f4       	brtc	.+6      	; 0x328c <itoa+0x1c>
    3286:	90 95       	com	r25
    3288:	81 95       	neg	r24
    328a:	9f 4f       	sbci	r25, 0xFF	; 255
    328c:	64 2f       	mov	r22, r20
    328e:	77 27       	eor	r23, r23
    3290:	0e 94 69 19 	call	0x32d2	; 0x32d2 <__udivmodhi4>
    3294:	80 5d       	subi	r24, 0xD0	; 208
    3296:	8a 33       	cpi	r24, 0x3A	; 58
    3298:	0c f0       	brlt	.+2      	; 0x329c <itoa+0x2c>
    329a:	89 5d       	subi	r24, 0xD9	; 217
    329c:	81 93       	st	Z+, r24
    329e:	cb 01       	movw	r24, r22
    32a0:	00 97       	sbiw	r24, 0x00	; 0
    32a2:	a1 f7       	brne	.-24     	; 0x328c <itoa+0x1c>
    32a4:	16 f4       	brtc	.+4      	; 0x32aa <itoa+0x3a>
    32a6:	5d e2       	ldi	r21, 0x2D	; 45
    32a8:	51 93       	st	Z+, r21
    32aa:	10 82       	st	Z, r1
    32ac:	c9 01       	movw	r24, r18
    32ae:	0c 94 59 19 	jmp	0x32b2	; 0x32b2 <strrev>

000032b2 <strrev>:
    32b2:	dc 01       	movw	r26, r24
    32b4:	fc 01       	movw	r30, r24
    32b6:	67 2f       	mov	r22, r23
    32b8:	71 91       	ld	r23, Z+
    32ba:	77 23       	and	r23, r23
    32bc:	e1 f7       	brne	.-8      	; 0x32b6 <strrev+0x4>
    32be:	32 97       	sbiw	r30, 0x02	; 2
    32c0:	04 c0       	rjmp	.+8      	; 0x32ca <strrev+0x18>
    32c2:	7c 91       	ld	r23, X
    32c4:	6d 93       	st	X+, r22
    32c6:	70 83       	st	Z, r23
    32c8:	62 91       	ld	r22, -Z
    32ca:	ae 17       	cp	r26, r30
    32cc:	bf 07       	cpc	r27, r31
    32ce:	c8 f3       	brcs	.-14     	; 0x32c2 <strrev+0x10>
    32d0:	08 95       	ret

000032d2 <__udivmodhi4>:
    32d2:	aa 1b       	sub	r26, r26
    32d4:	bb 1b       	sub	r27, r27
    32d6:	51 e1       	ldi	r21, 0x11	; 17
    32d8:	07 c0       	rjmp	.+14     	; 0x32e8 <__udivmodhi4_ep>

000032da <__udivmodhi4_loop>:
    32da:	aa 1f       	adc	r26, r26
    32dc:	bb 1f       	adc	r27, r27
    32de:	a6 17       	cp	r26, r22
    32e0:	b7 07       	cpc	r27, r23
    32e2:	10 f0       	brcs	.+4      	; 0x32e8 <__udivmodhi4_ep>
    32e4:	a6 1b       	sub	r26, r22
    32e6:	b7 0b       	sbc	r27, r23

000032e8 <__udivmodhi4_ep>:
    32e8:	88 1f       	adc	r24, r24
    32ea:	99 1f       	adc	r25, r25
    32ec:	5a 95       	dec	r21
    32ee:	a9 f7       	brne	.-22     	; 0x32da <__udivmodhi4_loop>
    32f0:	80 95       	com	r24
    32f2:	90 95       	com	r25
    32f4:	bc 01       	movw	r22, r24
    32f6:	cd 01       	movw	r24, r26
    32f8:	08 95       	ret

000032fa <_exit>:
    32fa:	f8 94       	cli

000032fc <__stop_program>:
    32fc:	ff cf       	rjmp	.-2      	; 0x32fc <__stop_program>
