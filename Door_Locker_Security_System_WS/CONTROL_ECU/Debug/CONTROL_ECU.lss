
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002b1a  00002bae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800168  00800168  00002cb6  2**0
                  ALLOC
  3 .stab         00003330  00000000  00000000  00002cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000189c  00000000  00000000  00005fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007884  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  000079e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  00007b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  00009aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  0000ab79  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000bbac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  0000bd2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  0000c012  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c908  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <__vector_4>
      14:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__vector_7>
      20:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <__vector_8>
      24:	0c 94 2d 0a 	jmp	0x145a	; 0x145a <__vector_9>
      28:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__vector_10>
      2c:	0c 94 c7 09 	jmp	0x138e	; 0x138e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <__vector_13>
      38:	0c 94 1d 07 	jmp	0xe3a	; 0xe3a <__vector_14>
      3c:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 63 08 	jmp	0x10c6	; 0x10c6 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a8 37       	cpi	r26, 0x78	; 120
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ea e1       	ldi	r30, 0x1A	; 26
      78:	fb e2       	ldi	r31, 0x2B	; 43
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <main>
      8a:	0c 94 8b 15 	jmp	0x2b16	; 0x2b16 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 70 15 	jmp	0x2ae0	; 0x2ae0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 60 15 	jmp	0x2ac0	; 0x2ac0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7c 15 	jmp	0x2af8	; 0x2af8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 60 15 	jmp	0x2ac0	; 0x2ac0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7c 15 	jmp	0x2af8	; 0x2af8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 70 15 	jmp	0x2ae0	; 0x2ae0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5c 15 	jmp	0x2ab8	; 0x2ab8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 78 15 	jmp	0x2af0	; 0x2af0 <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 60 15 	jmp	0x2ac0	; 0x2ac0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 7c 15 	jmp	0x2af8	; 0x2af8 <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 64 15 	jmp	0x2ac8	; 0x2ac8 <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__stack+0xb>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__stack+0xb>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__stack+0x15>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__stack+0x1f>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__stack+0xb>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__stack+0x15>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__stack+0x1f>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__stack+0x27>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__stack+0x27>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__stack+0x27>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 80 15 	jmp	0x2b00	; 0x2b00 <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 5c 15 	jmp	0x2ab8	; 0x2ab8 <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 78 15 	jmp	0x2af0	; 0x2af0 <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	e8 59       	subi	r30, 0x98	; 152
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <__vector_13>:

/*
 * [Description]: The ISR's specific For RX Complete Interrupt Enable
 */
ISR(USART_RXC_vect)
{
     d6e:	1f 92       	push	r1
     d70:	0f 92       	push	r0
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	0f 92       	push	r0
     d76:	11 24       	eor	r1, r1
     d78:	2f 93       	push	r18
     d7a:	3f 93       	push	r19
     d7c:	4f 93       	push	r20
     d7e:	5f 93       	push	r21
     d80:	6f 93       	push	r22
     d82:	7f 93       	push	r23
     d84:	8f 93       	push	r24
     d86:	9f 93       	push	r25
     d88:	af 93       	push	r26
     d8a:	bf 93       	push	r27
     d8c:	ef 93       	push	r30
     d8e:	ff 93       	push	r31
     d90:	df 93       	push	r29
     d92:	cf 93       	push	r28
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
	/* Call the Call Back function in the application after the Event is Occur */
	if(g_Ptr_To_Fun_RXC != NULL_PTR)
     d98:	80 91 68 01 	lds	r24, 0x0168
     d9c:	90 91 69 01 	lds	r25, 0x0169
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	29 f0       	breq	.+10     	; 0xdae <__vector_13+0x40>
	{
		/* This is called --> Call Back Notification */
		/* another method to call the function using pointer to function g_Ptr_To_Fun_RXC(); */
		(*g_Ptr_To_Fun_RXC)();
     da4:	e0 91 68 01 	lds	r30, 0x0168
     da8:	f0 91 69 01 	lds	r31, 0x0169
     dac:	09 95       	icall
	}
}
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	ff 91       	pop	r31
     db4:	ef 91       	pop	r30
     db6:	bf 91       	pop	r27
     db8:	af 91       	pop	r26
     dba:	9f 91       	pop	r25
     dbc:	8f 91       	pop	r24
     dbe:	7f 91       	pop	r23
     dc0:	6f 91       	pop	r22
     dc2:	5f 91       	pop	r21
     dc4:	4f 91       	pop	r20
     dc6:	3f 91       	pop	r19
     dc8:	2f 91       	pop	r18
     dca:	0f 90       	pop	r0
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	0f 90       	pop	r0
     dd0:	1f 90       	pop	r1
     dd2:	18 95       	reti

00000dd4 <__vector_15>:

/*
 * [Description]: The ISR's specific For TX Complete Interrupt Enable
 */
ISR(USART_TXC_vect)
{
     dd4:	1f 92       	push	r1
     dd6:	0f 92       	push	r0
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	0f 92       	push	r0
     ddc:	11 24       	eor	r1, r1
     dde:	2f 93       	push	r18
     de0:	3f 93       	push	r19
     de2:	4f 93       	push	r20
     de4:	5f 93       	push	r21
     de6:	6f 93       	push	r22
     de8:	7f 93       	push	r23
     dea:	8f 93       	push	r24
     dec:	9f 93       	push	r25
     dee:	af 93       	push	r26
     df0:	bf 93       	push	r27
     df2:	ef 93       	push	r30
     df4:	ff 93       	push	r31
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
	/* Call the Call Back function in the application after the Event is Occur */
	if(g_Ptr_To_Fun_TXC != NULL_PTR)
     dfe:	80 91 6a 01 	lds	r24, 0x016A
     e02:	90 91 6b 01 	lds	r25, 0x016B
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	29 f0       	breq	.+10     	; 0xe14 <__vector_15+0x40>
	{
		/* This is called --> Call Back Notification */
		/* another method to call the function using pointer to function g_Ptr_To_Fun_TXC(); */
		(*g_Ptr_To_Fun_TXC)();
     e0a:	e0 91 6a 01 	lds	r30, 0x016A
     e0e:	f0 91 6b 01 	lds	r31, 0x016B
     e12:	09 95       	icall
	}
}
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	ff 91       	pop	r31
     e1a:	ef 91       	pop	r30
     e1c:	bf 91       	pop	r27
     e1e:	af 91       	pop	r26
     e20:	9f 91       	pop	r25
     e22:	8f 91       	pop	r24
     e24:	7f 91       	pop	r23
     e26:	6f 91       	pop	r22
     e28:	5f 91       	pop	r21
     e2a:	4f 91       	pop	r20
     e2c:	3f 91       	pop	r19
     e2e:	2f 91       	pop	r18
     e30:	0f 90       	pop	r0
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	0f 90       	pop	r0
     e36:	1f 90       	pop	r1
     e38:	18 95       	reti

00000e3a <__vector_14>:

/*
 * [Description]: The ISR's specific For USART Data Register Empty Interrupt Enable
 */
ISR(USART_UDRE_vect)
{
     e3a:	1f 92       	push	r1
     e3c:	0f 92       	push	r0
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	0f 92       	push	r0
     e42:	11 24       	eor	r1, r1
     e44:	2f 93       	push	r18
     e46:	3f 93       	push	r19
     e48:	4f 93       	push	r20
     e4a:	5f 93       	push	r21
     e4c:	6f 93       	push	r22
     e4e:	7f 93       	push	r23
     e50:	8f 93       	push	r24
     e52:	9f 93       	push	r25
     e54:	af 93       	push	r26
     e56:	bf 93       	push	r27
     e58:	ef 93       	push	r30
     e5a:	ff 93       	push	r31
     e5c:	df 93       	push	r29
     e5e:	cf 93       	push	r28
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
	/* Call the Call Back function in the application after the Event is Occur */
	if(g_Ptr_To_Fun_UDRE != NULL_PTR)
     e64:	80 91 6c 01 	lds	r24, 0x016C
     e68:	90 91 6d 01 	lds	r25, 0x016D
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	29 f0       	breq	.+10     	; 0xe7a <__vector_14+0x40>
	{
		/* This is called --> Call Back Notification */
		/* another method to call the function using pointer to function g_Ptr_To_Fun_UDRE(); */
		(*g_Ptr_To_Fun_UDRE)();
     e70:	e0 91 6c 01 	lds	r30, 0x016C
     e74:	f0 91 6d 01 	lds	r31, 0x016D
     e78:	09 95       	icall
	}
}
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	ff 91       	pop	r31
     e80:	ef 91       	pop	r30
     e82:	bf 91       	pop	r27
     e84:	af 91       	pop	r26
     e86:	9f 91       	pop	r25
     e88:	8f 91       	pop	r24
     e8a:	7f 91       	pop	r23
     e8c:	6f 91       	pop	r22
     e8e:	5f 91       	pop	r21
     e90:	4f 91       	pop	r20
     e92:	3f 91       	pop	r19
     e94:	2f 91       	pop	r18
     e96:	0f 90       	pop	r0
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	0f 90       	pop	r0
     e9c:	1f 90       	pop	r1
     e9e:	18 95       	reti

00000ea0 <USART_Init>:
 * [Description]  : Functional responsible for Initialize the UART device.
 * [Args]  : Void
 * [Return]: Void
 */
void USART_Init(void)
{
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <USART_Init+0x6>
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <USART_Init+0x8>
     ea8:	0f 92       	push	r0
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
	uint8  UCSRA_Init = 0;
     eae:	1d 82       	std	Y+5, r1	; 0x05
	uint8  UCSRB_Init = 0;
     eb0:	1c 82       	std	Y+4, r1	; 0x04
	uint8  UCSRC_Init = 0;
     eb2:	1b 82       	std	Y+3, r1	; 0x03
	uint16 UBRR_Init  = 0;
     eb4:	1a 82       	std	Y+2, r1	; 0x02
     eb6:	19 82       	std	Y+1, r1	; 0x01
	/* Set the USART Operation Mode and the USART Double Transmission Speed */
#if(USART_OperationMode_SELECTOR == USART_ASYNCHRONOUS_MODE) && (USART_DoubleSpeedStatus == USART_DoubleSpeedDisabled)
	UBRR_Init =  (uint16)(((F_CPU / (USART_BAUDRATE_SELECTOR * 16UL))) - 1); /* Calculate the UBRR register value */

	#elif(USART_OperationMode_SELECTOR == USART_ASYNCHRONOUS_MODE) && (USART_DoubleSpeedStatus == USART_DoubleSpeedEnabled)
	UCSRA_Init |= (1<<UCSRA_U2X); /* U2X = 1 for double transmission speed */
     eb8:	8d 81       	ldd	r24, Y+5	; 0x05
     eba:	82 60       	ori	r24, 0x02	; 2
     ebc:	8d 83       	std	Y+5, r24	; 0x05
	UBRR_Init = (uint16)(((F_CPU / (USART_BAUDRATE_SELECTOR * 8UL))) - 1); /* Calculate the UBRR register value */
     ebe:	87 e6       	ldi	r24, 0x67	; 103
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	9a 83       	std	Y+2, r25	; 0x02
     ec4:	89 83       	std	Y+1, r24	; 0x01
		break;
	case USART_7BitsDataSize: /* For 7-bit data mode */
		UCSRC_Init |= (1<<UCSRC_UCSZ1);
		break;
	case USART_8BitsDataSize: /* For 8-bit data mode */
		UCSRC_Init |= (1<<UCSRC_UCSZ1) | (1<<UCSRC_UCSZ0);
     ec6:	8b 81       	ldd	r24, Y+3	; 0x03
     ec8:	86 60       	ori	r24, 0x06	; 6
     eca:	8b 83       	std	Y+3, r24	; 0x03

	/* Set the USART Parity Check */
	UCSRC_Init |= USART_ParityCheck;


	UCSRA_REG = UCSRA_Init;
     ecc:	eb e2       	ldi	r30, 0x2B	; 43
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	8d 81       	ldd	r24, Y+5	; 0x05
     ed2:	80 83       	st	Z, r24
	/* Receiver Enable and Transmitter Enable */
	UCSRB_REG = UCSRB_Init | (1<<UCSRB_RXEN) | (1<<UCSRB_TXEN);
     ed4:	ea e2       	ldi	r30, 0x2A	; 42
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	8c 81       	ldd	r24, Y+4	; 0x04
     eda:	88 61       	ori	r24, 0x18	; 24
     edc:	80 83       	st	Z, r24
	/* The URSEL must be one when writing the UCSRC */
	UCSRC_REG = UCSRC_Init |(1<<UCSRC_URSEL);
     ede:	e0 e4       	ldi	r30, 0x40	; 64
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	80 68       	ori	r24, 0x80	; 128
     ee6:	80 83       	st	Z, r24
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH_REG = (uint8)(UBRR_Init >> 8);
     ee8:	e0 e4       	ldi	r30, 0x40	; 64
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	9a 81       	ldd	r25, Y+2	; 0x02
     ef0:	89 2f       	mov	r24, r25
     ef2:	99 27       	eor	r25, r25
     ef4:	80 83       	st	Z, r24
	UBRRL_REG = (uint8)UBRR_Init;
     ef6:	e9 e2       	ldi	r30, 0x29	; 41
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	80 83       	st	Z, r24
}
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <USART_sendByte>:
 * [Description]  : Functional responsible for send byte to another UART device.
 * [Args]  : constant uint16
 * [Return]: Void
 */
void USART_sendByte(const uint16 data)
{
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	00 d0       	rcall	.+0      	; 0xf14 <USART_sendByte+0x6>
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	9a 83       	std	Y+2, r25	; 0x02
     f1a:	89 83       	std	Y+1, r24	; 0x01
#elif USART_InterruptStatus == DISABLE
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while((UCSRA_REG & (1<<UCSRA_UDRE)) == 0);
     f1c:	eb e2       	ldi	r30, 0x2B	; 43
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	88 2f       	mov	r24, r24
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	80 72       	andi	r24, 0x20	; 32
     f28:	90 70       	andi	r25, 0x00	; 0
     f2a:	00 97       	sbiw	r24, 0x00	; 0
     f2c:	b9 f3       	breq	.-18     	; 0xf1c <USART_sendByte+0xe>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR_REG = (uint8)data;
     f2e:	ec e2       	ldi	r30, 0x2C	; 44
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	80 83       	st	Z, r24
#endif

}
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	08 95       	ret

00000f40 <USART_recieveByte>:
* [Description]  : Functional responsible for receive byte from another UART device.
* [Args]  : void
* [Return]: uint16
*/
uint16 USART_recieveByte(void)
{
     f40:	df 93       	push	r29
     f42:	cf 93       	push	r28
     f44:	00 d0       	rcall	.+0      	; 0xf46 <USART_recieveByte+0x6>
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
	uint16 data = 0;
     f4a:	1a 82       	std	Y+2, r1	; 0x02
     f4c:	19 82       	std	Y+1, r1	; 0x01
		 */
		data |= UDR_REG;
	}
#elif USART_InterruptStatus == DISABLE
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while((UCSRA_REG & (1<<UCSRA_RXC)) == 0);
     f4e:	eb e2       	ldi	r30, 0x2B	; 43
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	88 23       	and	r24, r24
     f56:	dc f7       	brge	.-10     	; 0xf4e <USART_recieveByte+0xe>
	}
	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	data |= UDR_REG;
     f58:	ec e2       	ldi	r30, 0x2C	; 44
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	9a 81       	ldd	r25, Y+2	; 0x02
     f66:	82 2b       	or	r24, r18
     f68:	93 2b       	or	r25, r19
     f6a:	9a 83       	std	Y+2, r25	; 0x02
     f6c:	89 83       	std	Y+1, r24	; 0x01
#endif
	return data;
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	9a 81       	ldd	r25, Y+2	; 0x02
}
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <USART_sendString>:
* [Description]  : Send the required string through UART to the other UART device.
* [Args]  : pointer to constant uint8
* [Return]: Void
*/
void USART_sendString(const uint8 *Str)
{
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	00 d0       	rcall	.+0      	; 0xf82 <USART_sendString+0x6>
     f82:	0f 92       	push	r0
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	9b 83       	std	Y+3, r25	; 0x03
     f8a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     f8c:	19 82       	std	Y+1, r1	; 0x01
     f8e:	11 c0       	rjmp	.+34     	; 0xfb2 <USART_sendString+0x36>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		USART_sendByte(Str[i++]);
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	9b 81       	ldd	r25, Y+3	; 0x03
     f9a:	fc 01       	movw	r30, r24
     f9c:	e2 0f       	add	r30, r18
     f9e:	f3 1f       	adc	r31, r19
     fa0:	80 81       	ld	r24, Z
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	8f 5f       	subi	r24, 0xFF	; 255
     faa:	89 83       	std	Y+1, r24	; 0x01
     fac:	c9 01       	movw	r24, r18
     fae:	0e 94 87 07 	call	0xf0e	; 0xf0e <USART_sendByte>
void USART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
     fba:	9b 81       	ldd	r25, Y+3	; 0x03
     fbc:	fc 01       	movw	r30, r24
     fbe:	e2 0f       	add	r30, r18
     fc0:	f3 1f       	adc	r31, r19
     fc2:	80 81       	ld	r24, Z
     fc4:	88 23       	and	r24, r24
     fc6:	21 f7       	brne	.-56     	; 0xf90 <USART_sendString+0x14>
		USART_sendByteBlocking(Str[i]);
		Str++;
	}
	*******************************************************************/

}
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	08 95       	ret

00000fd4 <USART_receiveString>:
* [Description]  : Receive the required string until pressed Enter Key through UART from the other UART device.
* [Args]  : pointer to constant uint8
* [Return]: Void
*/
void USART_receiveString(uint8 *Str)
{
     fd4:	0f 93       	push	r16
     fd6:	1f 93       	push	r17
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	00 d0       	rcall	.+0      	; 0xfde <USART_receiveString+0xa>
     fde:	0f 92       	push	r0
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
     fe4:	9b 83       	std	Y+3, r25	; 0x03
     fe6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     fe8:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = USART_recieveByte();
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	9b 81       	ldd	r25, Y+3	; 0x03
     ff4:	8c 01       	movw	r16, r24
     ff6:	02 0f       	add	r16, r18
     ff8:	13 1f       	adc	r17, r19
     ffa:	0e 94 a0 07 	call	0xf40	; 0xf40 <USART_recieveByte>
     ffe:	f8 01       	movw	r30, r16
    1000:	80 83       	st	Z, r24
    1002:	0f c0       	rjmp	.+30     	; 0x1022 <USART_receiveString+0x4e>

	/* Receive the whole string until the pressed Enter Key */
	while(Str[i] != 13)
	{
		i++;
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	8f 5f       	subi	r24, 0xFF	; 255
    1008:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = USART_recieveByte();
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	9b 81       	ldd	r25, Y+3	; 0x03
    1014:	8c 01       	movw	r16, r24
    1016:	02 0f       	add	r16, r18
    1018:	13 1f       	adc	r17, r19
    101a:	0e 94 a0 07 	call	0xf40	; 0xf40 <USART_recieveByte>
    101e:	f8 01       	movw	r30, r16
    1020:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = USART_recieveByte();

	/* Receive the whole string until the pressed Enter Key */
	while(Str[i] != 13)
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	9b 81       	ldd	r25, Y+3	; 0x03
    102c:	fc 01       	movw	r30, r24
    102e:	e2 0f       	add	r30, r18
    1030:	f3 1f       	adc	r31, r19
    1032:	80 81       	ld	r24, Z
    1034:	8d 30       	cpi	r24, 0x0D	; 13
    1036:	31 f7       	brne	.-52     	; 0x1004 <USART_receiveString+0x30>
	{
		i++;
		Str[i] = USART_recieveByte();
	}
	/* After receiving the whole string plus pressed Enter Key, replace the Enter Key with '\0' */
	Str[i] = '\0';
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	9b 81       	ldd	r25, Y+3	; 0x03
    1042:	fc 01       	movw	r30, r24
    1044:	e2 0f       	add	r30, r18
    1046:	f3 1f       	adc	r31, r19
    1048:	10 82       	st	Z, r1
}
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	1f 91       	pop	r17
    1056:	0f 91       	pop	r16
    1058:	08 95       	ret

0000105a <USART_RXC_SetCallBack>:
*                  Every set callback function follow specific interrupt.
* [Args]  : Pointer To Function take void and return void
* [Return]: Void
*/
void USART_RXC_SetCallBack(void (*Ptr_To_fun)(void))
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	00 d0       	rcall	.+0      	; 0x1060 <USART_RXC_SetCallBack+0x6>
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	9a 83       	std	Y+2, r25	; 0x02
    1066:	89 83       	std	Y+1, r24	; 0x01
	g_Ptr_To_Fun_RXC = (volatile void *)Ptr_To_fun;
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	9a 81       	ldd	r25, Y+2	; 0x02
    106c:	90 93 69 01 	sts	0x0169, r25
    1070:	80 93 68 01 	sts	0x0168, r24
}
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <USART_TXC_SetCallBack>:

void USART_TXC_SetCallBack(void (*Ptr_To_fun)(void))
{
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	00 d0       	rcall	.+0      	; 0x1084 <USART_TXC_SetCallBack+0x6>
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	9a 83       	std	Y+2, r25	; 0x02
    108a:	89 83       	std	Y+1, r24	; 0x01
	g_Ptr_To_Fun_TXC = (volatile void *)Ptr_To_fun;
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	9a 81       	ldd	r25, Y+2	; 0x02
    1090:	90 93 6b 01 	sts	0x016B, r25
    1094:	80 93 6a 01 	sts	0x016A, r24
}
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <USART_UDRE_SetCallBack>:

void USART_UDRE_SetCallBack(void (*Ptr_To_fun)(void))
{
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <USART_UDRE_SetCallBack+0x6>
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	9a 83       	std	Y+2, r25	; 0x02
    10ae:	89 83       	std	Y+1, r24	; 0x01
	g_Ptr_To_Fun_UDRE = (volatile void *)Ptr_To_fun;
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	9a 81       	ldd	r25, Y+2	; 0x02
    10b4:	90 93 6d 01 	sts	0x016D, r25
    10b8:	80 93 6c 01 	sts	0x016C, r24
}
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	08 95       	ret

000010c6 <__vector_19>:

/*
 * [Description]: The ISR's specific For TWI Interrupt Enable
 */
ISR(TWI_vect)
{
    10c6:	1f 92       	push	r1
    10c8:	0f 92       	push	r0
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	0f 92       	push	r0
    10ce:	11 24       	eor	r1, r1
    10d0:	2f 93       	push	r18
    10d2:	3f 93       	push	r19
    10d4:	4f 93       	push	r20
    10d6:	5f 93       	push	r21
    10d8:	6f 93       	push	r22
    10da:	7f 93       	push	r23
    10dc:	8f 93       	push	r24
    10de:	9f 93       	push	r25
    10e0:	af 93       	push	r26
    10e2:	bf 93       	push	r27
    10e4:	ef 93       	push	r30
    10e6:	ff 93       	push	r31
    10e8:	df 93       	push	r29
    10ea:	cf 93       	push	r28
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
	/* Call the Call Back function in the application after the Event is Occur */
	if(g_Ptr_To_Fun_TWI != NULL_PTR)
    10f0:	80 91 6e 01 	lds	r24, 0x016E
    10f4:	90 91 6f 01 	lds	r25, 0x016F
    10f8:	00 97       	sbiw	r24, 0x00	; 0
    10fa:	29 f0       	breq	.+10     	; 0x1106 <__vector_19+0x40>
	{
		/* This is called --> Call Back Notification */
		/* another method to call the function using pointer to function g_Ptr_To_Fun_TWI(); */
		(*g_Ptr_To_Fun_TWI)();
    10fc:	e0 91 6e 01 	lds	r30, 0x016E
    1100:	f0 91 6f 01 	lds	r31, 0x016F
    1104:	09 95       	icall
	}
}
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	ff 91       	pop	r31
    110c:	ef 91       	pop	r30
    110e:	bf 91       	pop	r27
    1110:	af 91       	pop	r26
    1112:	9f 91       	pop	r25
    1114:	8f 91       	pop	r24
    1116:	7f 91       	pop	r23
    1118:	6f 91       	pop	r22
    111a:	5f 91       	pop	r21
    111c:	4f 91       	pop	r20
    111e:	3f 91       	pop	r19
    1120:	2f 91       	pop	r18
    1122:	0f 90       	pop	r0
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	0f 90       	pop	r0
    1128:	1f 90       	pop	r1
    112a:	18 95       	reti

0000112c <TWI_init>:
 * [Description]  : Functional responsible for Initialize the TWI device.
 * [Args]  : Void
 * [Return]: Void
 */
void TWI_init(void)
{
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
	/* Clear The Status Register and Choose Prescaler */
	TWSR_REG = TWI_PRESCALER_SELECTOR;
    1134:	e1 e2       	ldi	r30, 0x21	; 33
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	10 82       	st	Z, r1

	TWBR_REG = BITRATE; /* Set Bit Rate */
    113a:	e0 e2       	ldi	r30, 0x20	; 32
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	82 e0       	ldi	r24, 0x02	; 2
    1140:	80 83       	st	Z, r24

#if TWI_INT_EN == ENABLE
	TWCR_REG |= I2C_INTERRUPT_ENABLED; /* Enable TWI Interrupt */
#elif TWI_INT_EN == DISABLE
	TWCR_REG |= I2C_INTERRUPT_ENABLED; /* Disable TWI Interrupt */
    1142:	a6 e5       	ldi	r26, 0x56	; 86
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e6 e5       	ldi	r30, 0x56	; 86
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	81 60       	ori	r24, 0x01	; 1
    114e:	8c 93       	st	X, r24
#endif

	/* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
	       General Call Recognition: Off */
	TWAR_REG = TWI_MY_ADDRESS;
    1150:	e2 e2       	ldi	r30, 0x22	; 34
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	84 e4       	ldi	r24, 0x44	; 68
    1156:	80 83       	st	Z, r24

	TWCR_REG = (1<<TWCR_TWEN); /* enable TWI */
    1158:	e6 e5       	ldi	r30, 0x56	; 86
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	84 e0       	ldi	r24, 0x04	; 4
    115e:	80 83       	st	Z, r24
}
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	08 95       	ret

00001166 <TWI_start>:
 * [Description]  : Functional responsible for Send Start Condition to the Slave.
 * [Args]  : Void
 * [Return]: Enum
 */
TWI_Retuens_t TWI_start(void)
{
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	0f 92       	push	r0
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR_REG = (1<<TWCR_TWINT) | (1<<TWCR_TWSTA) | (1<<TWCR_TWEN);
    1170:	e6 e5       	ldi	r30, 0x56	; 86
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	84 ea       	ldi	r24, 0xA4	; 164
    1176:	80 83       	st	Z, r24

	 /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(!(TWCR_REG & (1<<TWCR_TWINT)));
    1178:	e6 e5       	ldi	r30, 0x56	; 86
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	88 23       	and	r24, r24
    1180:	dc f7       	brge	.-10     	; 0x1178 <TWI_start+0x12>

	if((TWI_getStatus()) != TWI_START_STATE) /* check for Start condition Sent */
    1182:	0e 94 aa 09 	call	0x1354	; 0x1354 <TWI_getStatus>
    1186:	88 30       	cpi	r24, 0x08	; 8
    1188:	19 f0       	breq	.+6      	; 0x1190 <TWI_start+0x2a>
	{
		return START_NOT_SENT;
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	89 83       	std	Y+1, r24	; 0x01
    118e:	01 c0       	rjmp	.+2      	; 0x1192 <TWI_start+0x2c>
	}
	else
	{
		return EVENT_OK;
    1190:	19 82       	std	Y+1, r1	; 0x01
    1192:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    1194:	0f 90       	pop	r0
    1196:	cf 91       	pop	r28
    1198:	df 91       	pop	r29
    119a:	08 95       	ret

0000119c <TWI_repeatedStart>:
 * [Description]  : Functional responsible for Send repeated Start Condition to the Slave.
 * [Args]  : Void
 * [Return]: Enum
 */
TWI_Retuens_t TWI_repeatedStart(void)
{
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	0f 92       	push	r0
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR_REG = (1<<TWCR_TWINT) | (1<<TWCR_TWSTA) | (1<<TWCR_TWEN);
    11a6:	e6 e5       	ldi	r30, 0x56	; 86
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	84 ea       	ldi	r24, 0xA4	; 164
    11ac:	80 83       	st	Z, r24

	 /* Wait for TWINT flag set in TWCR Register (repeated start bit is send successfully) */
	while(!(TWCR_REG & (1<<TWCR_TWINT)));
    11ae:	e6 e5       	ldi	r30, 0x56	; 86
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	88 23       	and	r24, r24
    11b6:	dc f7       	brge	.-10     	; 0x11ae <TWI_repeatedStart+0x12>

	if((TWI_getStatus()) != TWI_REPEATED_START_STATE) /* check for Repeated Start condition Sent */
    11b8:	0e 94 aa 09 	call	0x1354	; 0x1354 <TWI_getStatus>
    11bc:	80 31       	cpi	r24, 0x10	; 16
    11be:	19 f0       	breq	.+6      	; 0x11c6 <TWI_repeatedStart+0x2a>
	{
		return REPEATED_START_NOT_SENT;
    11c0:	82 e0       	ldi	r24, 0x02	; 2
    11c2:	89 83       	std	Y+1, r24	; 0x01
    11c4:	01 c0       	rjmp	.+2      	; 0x11c8 <TWI_repeatedStart+0x2c>
	}
	else
	{
		return EVENT_OK;
    11c6:	19 82       	std	Y+1, r1	; 0x01
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    11ca:	0f 90       	pop	r0
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <TWI_addressSelect>:
 * [Args]  : 1- uint8 to take the address
 * 			 2- Enum to select write or read Mode
 * [Return]: Enum
 */
TWI_Retuens_t TWI_addressSelect(uint8 address, TWI_Mode_t rw)
{
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <TWI_addressSelect+0x6>
    11d8:	0f 92       	push	r0
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	89 83       	std	Y+1, r24	; 0x01
    11e0:	6a 83       	std	Y+2, r22	; 0x02
	if(rw == TWI_WRITE_MODE)
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	88 23       	and	r24, r24
    11e6:	29 f4       	brne	.+10     	; 0x11f2 <TWI_addressSelect+0x20>
	{
		TWDR_REG = address + TWI_WRITE_MODE; /* Put SLA+W On TWI data Register */
    11e8:	e3 e2       	ldi	r30, 0x23	; 35
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	80 83       	st	Z, r24
    11f0:	08 c0       	rjmp	.+16     	; 0x1202 <TWI_addressSelect+0x30>
	}
	else if(rw == TWI_READ_MODE)
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	29 f4       	brne	.+10     	; 0x1202 <TWI_addressSelect+0x30>
	{
		TWDR_REG = address + TWI_READ_MODE; /* Put SLA+R On TWI data Register */
    11f8:	e3 e2       	ldi	r30, 0x23	; 35
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	8f 5f       	subi	r24, 0xFF	; 255
    1200:	80 83       	st	Z, r24

    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR_REG = (1<<TWCR_TWINT) | (1<<TWCR_TWEN);
    1202:	e6 e5       	ldi	r30, 0x56	; 86
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	84 e8       	ldi	r24, 0x84	; 132
    1208:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(!(TWCR_REG & (1<<TWCR_TWINT)));
    120a:	e6 e5       	ldi	r30, 0x56	; 86
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	88 23       	and	r24, r24
    1212:	dc f7       	brge	.-10     	; 0x120a <TWI_addressSelect+0x38>

	if((TWI_getStatus()) == TWI_MT_SLA_W_ACK_STATE) /* check for SLA+W transmitted & ACK received */
    1214:	0e 94 aa 09 	call	0x1354	; 0x1354 <TWI_getStatus>
    1218:	88 31       	cpi	r24, 0x18	; 24
    121a:	19 f4       	brne	.+6      	; 0x1222 <TWI_addressSelect+0x50>
	{
		return SLA_W_ACK_SENT;
    121c:	83 e0       	ldi	r24, 0x03	; 3
    121e:	8b 83       	std	Y+3, r24	; 0x03
    1220:	17 c0       	rjmp	.+46     	; 0x1250 <TWI_addressSelect+0x7e>
	}
	else if((TWI_getStatus()) == TWI_MT_SLA_W_NACK_STATE) /* check for SLA+W transmitted & NACK received */
    1222:	0e 94 aa 09 	call	0x1354	; 0x1354 <TWI_getStatus>
    1226:	80 32       	cpi	r24, 0x20	; 32
    1228:	19 f4       	brne	.+6      	; 0x1230 <TWI_addressSelect+0x5e>
	{
		return SLA_W_NACK_SENT;
    122a:	84 e0       	ldi	r24, 0x04	; 4
    122c:	8b 83       	std	Y+3, r24	; 0x03
    122e:	10 c0       	rjmp	.+32     	; 0x1250 <TWI_addressSelect+0x7e>
	}

	if((TWI_getStatus()) == TWI_MT_SLA_R_ACK_STATE) /* check for SLA+R transmitted & ACK received */
    1230:	0e 94 aa 09 	call	0x1354	; 0x1354 <TWI_getStatus>
    1234:	80 34       	cpi	r24, 0x40	; 64
    1236:	19 f4       	brne	.+6      	; 0x123e <TWI_addressSelect+0x6c>
	{
		return SLA_R_ACK_SENT;
    1238:	85 e0       	ldi	r24, 0x05	; 5
    123a:	8b 83       	std	Y+3, r24	; 0x03
    123c:	09 c0       	rjmp	.+18     	; 0x1250 <TWI_addressSelect+0x7e>
	}
	else if((TWI_getStatus()) == TWI_MT_SLA_R_NACK_STATE) /* check for SLA+R transmitted & NACK received */
    123e:	0e 94 aa 09 	call	0x1354	; 0x1354 <TWI_getStatus>
    1242:	88 34       	cpi	r24, 0x48	; 72
    1244:	19 f4       	brne	.+6      	; 0x124c <TWI_addressSelect+0x7a>
	{
		return SLA_R_NACK_SENT;
    1246:	86 e0       	ldi	r24, 0x06	; 6
    1248:	8b 83       	std	Y+3, r24	; 0x03
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <TWI_addressSelect+0x7e>
	}
	else
	{
		return SLA_RW_FAILED;
    124c:	87 e0       	ldi	r24, 0x07	; 7
    124e:	8b 83       	std	Y+3, r24	; 0x03
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <TWI_dataEvent>:
 * 			 2- Enum to select write or read Mode
 * 			 3- Enum to select after transmit or receive the data send ACK or NACK
 * [Return]: Enum
 */
TWI_Retuens_t TWI_dataEvent(uint8 *data, TWI_Mode_t rw, TWI_ACK_t ack)
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	00 d0       	rcall	.+0      	; 0x1264 <TWI_dataEvent+0x6>
    1264:	00 d0       	rcall	.+0      	; 0x1266 <TWI_dataEvent+0x8>
    1266:	0f 92       	push	r0
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	9a 83       	std	Y+2, r25	; 0x02
    126e:	89 83       	std	Y+1, r24	; 0x01
    1270:	6b 83       	std	Y+3, r22	; 0x03
    1272:	4c 83       	std	Y+4, r20	; 0x04
	if(rw == TWI_WRITE_MODE)
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	88 23       	and	r24, r24
    1278:	01 f5       	brne	.+64     	; 0x12ba <TWI_dataEvent+0x5c>
	{
		TWDR_REG = *data; /* Put data On TWI data Register */
    127a:	a3 e2       	ldi	r26, 0x23	; 35
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e9 81       	ldd	r30, Y+1	; 0x01
    1280:	fa 81       	ldd	r31, Y+2	; 0x02
    1282:	80 81       	ld	r24, Z
    1284:	8c 93       	st	X, r24

	    /*
		 * Clear the TWINT flag before sending the data TWINT=1
		 * Enable TWI Module TWEN=1
		 */
		TWCR_REG = (1<<TWCR_TWINT) | (1<<TWCR_TWEN);
    1286:	e6 e5       	ldi	r30, 0x56	; 86
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	84 e8       	ldi	r24, 0x84	; 132
    128c:	80 83       	st	Z, r24

		/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
		while(!(TWCR_REG & (1<<TWCR_TWINT)));
    128e:	e6 e5       	ldi	r30, 0x56	; 86
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	88 23       	and	r24, r24
    1296:	dc f7       	brge	.-10     	; 0x128e <TWI_dataEvent+0x30>

		if((TWI_getStatus()) == TWI_MT_DATA_W_ACK_STATE) /* check for Data transmitted & ACK received */
    1298:	0e 94 aa 09 	call	0x1354	; 0x1354 <TWI_getStatus>
    129c:	88 32       	cpi	r24, 0x28	; 40
    129e:	19 f4       	brne	.+6      	; 0x12a6 <TWI_dataEvent+0x48>
		{
			return DATA_WRITE_ACK_SENT;
    12a0:	88 e0       	ldi	r24, 0x08	; 8
    12a2:	8d 83       	std	Y+5, r24	; 0x05
    12a4:	3a c0       	rjmp	.+116    	; 0x131a <TWI_dataEvent+0xbc>
		}
		else if((TWI_getStatus()) == TWI_MT_DATA_W_NACK_STATE) /* check for Data transmitted & NACK received */
    12a6:	0e 94 aa 09 	call	0x1354	; 0x1354 <TWI_getStatus>
    12aa:	80 33       	cpi	r24, 0x30	; 48
    12ac:	19 f4       	brne	.+6      	; 0x12b4 <TWI_dataEvent+0x56>
		{
			return DATA_WRITE_NACK_SENT;
    12ae:	89 e0       	ldi	r24, 0x09	; 9
    12b0:	8d 83       	std	Y+5, r24	; 0x05
    12b2:	33 c0       	rjmp	.+102    	; 0x131a <TWI_dataEvent+0xbc>
		}
		else
		{
			return DATA_WRITE_FAILED;
    12b4:	8a e0       	ldi	r24, 0x0A	; 10
    12b6:	8d 83       	std	Y+5, r24	; 0x05
    12b8:	30 c0       	rjmp	.+96     	; 0x131a <TWI_dataEvent+0xbc>
		}
	}
	else if(rw == TWI_READ_MODE)
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	81 30       	cpi	r24, 0x01	; 1
    12be:	59 f5       	brne	.+86     	; 0x1316 <TWI_dataEvent+0xb8>
	{
		if(ack == ACK)
    12c0:	8c 81       	ldd	r24, Y+4	; 0x04
    12c2:	88 23       	and	r24, r24
    12c4:	29 f4       	brne	.+10     	; 0x12d0 <TWI_dataEvent+0x72>
			/*
			 * Clear the TWINT flag before reading the data TWINT=1
			 * Enable sending ACK after reading or receiving data TWEA=1
			 * Enable TWI Module TWEN=1
			 */
			TWCR_REG = (1<<TWCR_TWINT) | (1<<TWCR_TWEA) | (1<<TWCR_TWEN);
    12c6:	e6 e5       	ldi	r30, 0x56	; 86
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	84 ec       	ldi	r24, 0xC4	; 196
    12cc:	80 83       	st	Z, r24
    12ce:	07 c0       	rjmp	.+14     	; 0x12de <TWI_dataEvent+0x80>
		}
		else if(ack == NACK)
    12d0:	8c 81       	ldd	r24, Y+4	; 0x04
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	21 f4       	brne	.+8      	; 0x12de <TWI_dataEvent+0x80>
		{
		     /*
			 * Clear the TWINT flag before reading the data TWINT=1
			 * Enable TWI Module TWEN=1
			 */
			TWCR_REG = (1<<TWCR_TWINT) | (1<<TWCR_TWEN);
    12d6:	e6 e5       	ldi	r30, 0x56	; 86
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	84 e8       	ldi	r24, 0x84	; 132
    12dc:	80 83       	st	Z, r24
		}

		/* Wait for TWINT flag set in TWCR Register(data is received successfully) */
		while(!(TWCR_REG & (1<<TWCR_TWINT)));
    12de:	e6 e5       	ldi	r30, 0x56	; 86
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	88 23       	and	r24, r24
    12e6:	dc f7       	brge	.-10     	; 0x12de <TWI_dataEvent+0x80>

		*data = TWDR_REG; /* Read Data */
    12e8:	e3 e2       	ldi	r30, 0x23	; 35
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	e9 81       	ldd	r30, Y+1	; 0x01
    12f0:	fa 81       	ldd	r31, Y+2	; 0x02
    12f2:	80 83       	st	Z, r24

		if((TWI_getStatus()) == TWI_MR_DATA_R_ACK_STATE) /* check for Data & ACK received */
    12f4:	0e 94 aa 09 	call	0x1354	; 0x1354 <TWI_getStatus>
    12f8:	80 35       	cpi	r24, 0x50	; 80
    12fa:	19 f4       	brne	.+6      	; 0x1302 <TWI_dataEvent+0xa4>
		{
			return DATA_READ_ACK_SENT; /* return to indicate ACK received */
    12fc:	8b e0       	ldi	r24, 0x0B	; 11
    12fe:	8d 83       	std	Y+5, r24	; 0x05
    1300:	0c c0       	rjmp	.+24     	; 0x131a <TWI_dataEvent+0xbc>
		}
		else if((TWI_getStatus()) == TWI_MR_DATA_R_NACK_STATE) /* check for Data transmitted & NACK received */
    1302:	0e 94 aa 09 	call	0x1354	; 0x1354 <TWI_getStatus>
    1306:	88 35       	cpi	r24, 0x58	; 88
    1308:	19 f4       	brne	.+6      	; 0x1310 <TWI_dataEvent+0xb2>
		{
			return DATA_READ_NACK_SENT; /* return to indicate NACK received */
    130a:	8c e0       	ldi	r24, 0x0C	; 12
    130c:	8d 83       	std	Y+5, r24	; 0x05
    130e:	05 c0       	rjmp	.+10     	; 0x131a <TWI_dataEvent+0xbc>
		}
		else
		{
			return DATA_READ_FAILED; /* else return for data transmission failure */
    1310:	8d e0       	ldi	r24, 0x0D	; 13
    1312:	8d 83       	std	Y+5, r24	; 0x05
    1314:	02 c0       	rjmp	.+4      	; 0x131a <TWI_dataEvent+0xbc>
		}
	}
	else
	{
		return DATA_RW_FAILED;
    1316:	8e e0       	ldi	r24, 0x0E	; 14
    1318:	8d 83       	std	Y+5, r24	; 0x05
    131a:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <TWI_stop>:
 * [Description]  : Functional responsible for Send Stop Condition to the Slave.
 * [Args]  : Void
 * [Return]: Void
 */
void TWI_stop(void)
{
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR_REG = (1<<TWCR_TWINT) | (1<<TWCR_TWSTO) | (1<<TWCR_TWEN);
    1334:	e6 e5       	ldi	r30, 0x56	; 86
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	84 e9       	ldi	r24, 0x94	; 148
    133a:	80 83       	st	Z, r24

	 /* Wait for TWSTO is clear in TWCR Register (stop bit is send successfully) */
	while(TWCR_REG & (1<<TWCR_TWSTO));
    133c:	e6 e5       	ldi	r30, 0x56	; 86
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	88 2f       	mov	r24, r24
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	80 71       	andi	r24, 0x10	; 16
    1348:	90 70       	andi	r25, 0x00	; 0
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	b9 f7       	brne	.-18     	; 0x133c <TWI_stop+0x10>
}
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <TWI_getStatus>:
 * [Description]  : Functional responsible for Get the STatus of the TWI logic and the Two-wire Serial Bus.
 * [Args]  : void
 * [Return]: uint8
 */
uint8 TWI_getStatus(void)
{
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	return (TWSR_REG & 0xF8);
    135c:	e1 e2       	ldi	r30, 0x21	; 33
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	88 7f       	andi	r24, 0xF8	; 248
}
    1364:	cf 91       	pop	r28
    1366:	df 91       	pop	r29
    1368:	08 95       	ret

0000136a <TWI_SetCallBack>:
* [Description]  : This function's is responsible to set the Call Back function address.
* [Args]  : Pointer To Function take void and return void
* [Return]: Void
*/
void TWI_SetCallBack(void (*Ptr_To_fun)(void))
{
    136a:	df 93       	push	r29
    136c:	cf 93       	push	r28
    136e:	00 d0       	rcall	.+0      	; 0x1370 <TWI_SetCallBack+0x6>
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	9a 83       	std	Y+2, r25	; 0x02
    1376:	89 83       	std	Y+1, r24	; 0x01
	g_Ptr_To_Fun_TWI = (volatile void *)Ptr_To_fun;
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	9a 81       	ldd	r25, Y+2	; 0x02
    137c:	90 93 6f 01 	sts	0x016F, r25
    1380:	80 93 6e 01 	sts	0x016E, r24
}
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <__vector_11>:

/*
 * [Description]: The ISR's specific For TIMER0
 */
ISR(TIMER0_OVF_vect)
{
    138e:	1f 92       	push	r1
    1390:	0f 92       	push	r0
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	0f 92       	push	r0
    1396:	11 24       	eor	r1, r1
    1398:	2f 93       	push	r18
    139a:	3f 93       	push	r19
    139c:	4f 93       	push	r20
    139e:	5f 93       	push	r21
    13a0:	6f 93       	push	r22
    13a2:	7f 93       	push	r23
    13a4:	8f 93       	push	r24
    13a6:	9f 93       	push	r25
    13a8:	af 93       	push	r26
    13aa:	bf 93       	push	r27
    13ac:	ef 93       	push	r30
    13ae:	ff 93       	push	r31
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
	/* Call the Call Back function in the application after the Event is Occur */
	if(g_Ptr_To_Fun_TIMER_0 != NULL_PTR)
    13b8:	80 91 70 01 	lds	r24, 0x0170
    13bc:	90 91 71 01 	lds	r25, 0x0171
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	29 f0       	breq	.+10     	; 0x13ce <__vector_11+0x40>
	{
		/* This is called --> Call Back Notification */
		/* another method to call the function using pointer to function g_Ptr_To_Fun_0(); */
		(*g_Ptr_To_Fun_TIMER_0)();
    13c4:	e0 91 70 01 	lds	r30, 0x0170
    13c8:	f0 91 71 01 	lds	r31, 0x0171
    13cc:	09 95       	icall
	}
}
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	ff 91       	pop	r31
    13d4:	ef 91       	pop	r30
    13d6:	bf 91       	pop	r27
    13d8:	af 91       	pop	r26
    13da:	9f 91       	pop	r25
    13dc:	8f 91       	pop	r24
    13de:	7f 91       	pop	r23
    13e0:	6f 91       	pop	r22
    13e2:	5f 91       	pop	r21
    13e4:	4f 91       	pop	r20
    13e6:	3f 91       	pop	r19
    13e8:	2f 91       	pop	r18
    13ea:	0f 90       	pop	r0
    13ec:	0f be       	out	0x3f, r0	; 63
    13ee:	0f 90       	pop	r0
    13f0:	1f 90       	pop	r1
    13f2:	18 95       	reti

000013f4 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    13f4:	1f 92       	push	r1
    13f6:	0f 92       	push	r0
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	0f 92       	push	r0
    13fc:	11 24       	eor	r1, r1
    13fe:	2f 93       	push	r18
    1400:	3f 93       	push	r19
    1402:	4f 93       	push	r20
    1404:	5f 93       	push	r21
    1406:	6f 93       	push	r22
    1408:	7f 93       	push	r23
    140a:	8f 93       	push	r24
    140c:	9f 93       	push	r25
    140e:	af 93       	push	r26
    1410:	bf 93       	push	r27
    1412:	ef 93       	push	r30
    1414:	ff 93       	push	r31
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_TIMER_0 != NULL_PTR)
    141e:	80 91 70 01 	lds	r24, 0x0170
    1422:	90 91 71 01 	lds	r25, 0x0171
    1426:	00 97       	sbiw	r24, 0x00	; 0
    1428:	29 f0       	breq	.+10     	; 0x1434 <__vector_10+0x40>
	{
		(*g_Ptr_To_Fun_TIMER_0)();
    142a:	e0 91 70 01 	lds	r30, 0x0170
    142e:	f0 91 71 01 	lds	r31, 0x0171
    1432:	09 95       	icall
	}
}
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	ff 91       	pop	r31
    143a:	ef 91       	pop	r30
    143c:	bf 91       	pop	r27
    143e:	af 91       	pop	r26
    1440:	9f 91       	pop	r25
    1442:	8f 91       	pop	r24
    1444:	7f 91       	pop	r23
    1446:	6f 91       	pop	r22
    1448:	5f 91       	pop	r21
    144a:	4f 91       	pop	r20
    144c:	3f 91       	pop	r19
    144e:	2f 91       	pop	r18
    1450:	0f 90       	pop	r0
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	0f 90       	pop	r0
    1456:	1f 90       	pop	r1
    1458:	18 95       	reti

0000145a <__vector_9>:

/*
 * [Description]: The ISR's specific For TIMER1
 */
ISR(TIMER1_OVF_vect)
{
    145a:	1f 92       	push	r1
    145c:	0f 92       	push	r0
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	0f 92       	push	r0
    1462:	11 24       	eor	r1, r1
    1464:	2f 93       	push	r18
    1466:	3f 93       	push	r19
    1468:	4f 93       	push	r20
    146a:	5f 93       	push	r21
    146c:	6f 93       	push	r22
    146e:	7f 93       	push	r23
    1470:	8f 93       	push	r24
    1472:	9f 93       	push	r25
    1474:	af 93       	push	r26
    1476:	bf 93       	push	r27
    1478:	ef 93       	push	r30
    147a:	ff 93       	push	r31
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_TIMER_1 != NULL_PTR)
    1484:	80 91 72 01 	lds	r24, 0x0172
    1488:	90 91 73 01 	lds	r25, 0x0173
    148c:	00 97       	sbiw	r24, 0x00	; 0
    148e:	29 f0       	breq	.+10     	; 0x149a <__vector_9+0x40>
	{
		(*g_Ptr_To_Fun_TIMER_1)();
    1490:	e0 91 72 01 	lds	r30, 0x0172
    1494:	f0 91 73 01 	lds	r31, 0x0173
    1498:	09 95       	icall
	}
}
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	ff 91       	pop	r31
    14a0:	ef 91       	pop	r30
    14a2:	bf 91       	pop	r27
    14a4:	af 91       	pop	r26
    14a6:	9f 91       	pop	r25
    14a8:	8f 91       	pop	r24
    14aa:	7f 91       	pop	r23
    14ac:	6f 91       	pop	r22
    14ae:	5f 91       	pop	r21
    14b0:	4f 91       	pop	r20
    14b2:	3f 91       	pop	r19
    14b4:	2f 91       	pop	r18
    14b6:	0f 90       	pop	r0
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	0f 90       	pop	r0
    14bc:	1f 90       	pop	r1
    14be:	18 95       	reti

000014c0 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    14c0:	1f 92       	push	r1
    14c2:	0f 92       	push	r0
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	0f 92       	push	r0
    14c8:	11 24       	eor	r1, r1
    14ca:	2f 93       	push	r18
    14cc:	3f 93       	push	r19
    14ce:	4f 93       	push	r20
    14d0:	5f 93       	push	r21
    14d2:	6f 93       	push	r22
    14d4:	7f 93       	push	r23
    14d6:	8f 93       	push	r24
    14d8:	9f 93       	push	r25
    14da:	af 93       	push	r26
    14dc:	bf 93       	push	r27
    14de:	ef 93       	push	r30
    14e0:	ff 93       	push	r31
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	cd b7       	in	r28, 0x3d	; 61
    14e8:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_TIMER_1 != NULL_PTR)
    14ea:	80 91 72 01 	lds	r24, 0x0172
    14ee:	90 91 73 01 	lds	r25, 0x0173
    14f2:	00 97       	sbiw	r24, 0x00	; 0
    14f4:	29 f0       	breq	.+10     	; 0x1500 <__vector_7+0x40>
	{
		(*g_Ptr_To_Fun_TIMER_1)();
    14f6:	e0 91 72 01 	lds	r30, 0x0172
    14fa:	f0 91 73 01 	lds	r31, 0x0173
    14fe:	09 95       	icall
	}
}
    1500:	cf 91       	pop	r28
    1502:	df 91       	pop	r29
    1504:	ff 91       	pop	r31
    1506:	ef 91       	pop	r30
    1508:	bf 91       	pop	r27
    150a:	af 91       	pop	r26
    150c:	9f 91       	pop	r25
    150e:	8f 91       	pop	r24
    1510:	7f 91       	pop	r23
    1512:	6f 91       	pop	r22
    1514:	5f 91       	pop	r21
    1516:	4f 91       	pop	r20
    1518:	3f 91       	pop	r19
    151a:	2f 91       	pop	r18
    151c:	0f 90       	pop	r0
    151e:	0f be       	out	0x3f, r0	; 63
    1520:	0f 90       	pop	r0
    1522:	1f 90       	pop	r1
    1524:	18 95       	reti

00001526 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
    1526:	1f 92       	push	r1
    1528:	0f 92       	push	r0
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	0f 92       	push	r0
    152e:	11 24       	eor	r1, r1
    1530:	2f 93       	push	r18
    1532:	3f 93       	push	r19
    1534:	4f 93       	push	r20
    1536:	5f 93       	push	r21
    1538:	6f 93       	push	r22
    153a:	7f 93       	push	r23
    153c:	8f 93       	push	r24
    153e:	9f 93       	push	r25
    1540:	af 93       	push	r26
    1542:	bf 93       	push	r27
    1544:	ef 93       	push	r30
    1546:	ff 93       	push	r31
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_TIMER_1 != NULL_PTR)
    1550:	80 91 72 01 	lds	r24, 0x0172
    1554:	90 91 73 01 	lds	r25, 0x0173
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	29 f0       	breq	.+10     	; 0x1566 <__vector_8+0x40>
	{
		(*g_Ptr_To_Fun_TIMER_1)();
    155c:	e0 91 72 01 	lds	r30, 0x0172
    1560:	f0 91 73 01 	lds	r31, 0x0173
    1564:	09 95       	icall
	}
}
    1566:	cf 91       	pop	r28
    1568:	df 91       	pop	r29
    156a:	ff 91       	pop	r31
    156c:	ef 91       	pop	r30
    156e:	bf 91       	pop	r27
    1570:	af 91       	pop	r26
    1572:	9f 91       	pop	r25
    1574:	8f 91       	pop	r24
    1576:	7f 91       	pop	r23
    1578:	6f 91       	pop	r22
    157a:	5f 91       	pop	r21
    157c:	4f 91       	pop	r20
    157e:	3f 91       	pop	r19
    1580:	2f 91       	pop	r18
    1582:	0f 90       	pop	r0
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	0f 90       	pop	r0
    1588:	1f 90       	pop	r1
    158a:	18 95       	reti

0000158c <__vector_5>:

/*
 * [Description]: The ISR's specific For TIMER1
 */
ISR(TIMER2_OVF_vect)
{
    158c:	1f 92       	push	r1
    158e:	0f 92       	push	r0
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	0f 92       	push	r0
    1594:	11 24       	eor	r1, r1
    1596:	2f 93       	push	r18
    1598:	3f 93       	push	r19
    159a:	4f 93       	push	r20
    159c:	5f 93       	push	r21
    159e:	6f 93       	push	r22
    15a0:	7f 93       	push	r23
    15a2:	8f 93       	push	r24
    15a4:	9f 93       	push	r25
    15a6:	af 93       	push	r26
    15a8:	bf 93       	push	r27
    15aa:	ef 93       	push	r30
    15ac:	ff 93       	push	r31
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_TIMER_2 != NULL_PTR)
    15b6:	80 91 74 01 	lds	r24, 0x0174
    15ba:	90 91 75 01 	lds	r25, 0x0175
    15be:	00 97       	sbiw	r24, 0x00	; 0
    15c0:	29 f0       	breq	.+10     	; 0x15cc <__vector_5+0x40>
	{
		(*g_Ptr_To_Fun_TIMER_2)();
    15c2:	e0 91 74 01 	lds	r30, 0x0174
    15c6:	f0 91 75 01 	lds	r31, 0x0175
    15ca:	09 95       	icall
	}
}
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	ff 91       	pop	r31
    15d2:	ef 91       	pop	r30
    15d4:	bf 91       	pop	r27
    15d6:	af 91       	pop	r26
    15d8:	9f 91       	pop	r25
    15da:	8f 91       	pop	r24
    15dc:	7f 91       	pop	r23
    15de:	6f 91       	pop	r22
    15e0:	5f 91       	pop	r21
    15e2:	4f 91       	pop	r20
    15e4:	3f 91       	pop	r19
    15e6:	2f 91       	pop	r18
    15e8:	0f 90       	pop	r0
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	0f 90       	pop	r0
    15ee:	1f 90       	pop	r1
    15f0:	18 95       	reti

000015f2 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    15f2:	1f 92       	push	r1
    15f4:	0f 92       	push	r0
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	0f 92       	push	r0
    15fa:	11 24       	eor	r1, r1
    15fc:	2f 93       	push	r18
    15fe:	3f 93       	push	r19
    1600:	4f 93       	push	r20
    1602:	5f 93       	push	r21
    1604:	6f 93       	push	r22
    1606:	7f 93       	push	r23
    1608:	8f 93       	push	r24
    160a:	9f 93       	push	r25
    160c:	af 93       	push	r26
    160e:	bf 93       	push	r27
    1610:	ef 93       	push	r30
    1612:	ff 93       	push	r31
    1614:	df 93       	push	r29
    1616:	cf 93       	push	r28
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_TIMER_2 != NULL_PTR)
    161c:	80 91 74 01 	lds	r24, 0x0174
    1620:	90 91 75 01 	lds	r25, 0x0175
    1624:	00 97       	sbiw	r24, 0x00	; 0
    1626:	29 f0       	breq	.+10     	; 0x1632 <__vector_4+0x40>
	{
		(*g_Ptr_To_Fun_TIMER_2)();
    1628:	e0 91 74 01 	lds	r30, 0x0174
    162c:	f0 91 75 01 	lds	r31, 0x0175
    1630:	09 95       	icall
	}
}
    1632:	cf 91       	pop	r28
    1634:	df 91       	pop	r29
    1636:	ff 91       	pop	r31
    1638:	ef 91       	pop	r30
    163a:	bf 91       	pop	r27
    163c:	af 91       	pop	r26
    163e:	9f 91       	pop	r25
    1640:	8f 91       	pop	r24
    1642:	7f 91       	pop	r23
    1644:	6f 91       	pop	r22
    1646:	5f 91       	pop	r21
    1648:	4f 91       	pop	r20
    164a:	3f 91       	pop	r19
    164c:	2f 91       	pop	r18
    164e:	0f 90       	pop	r0
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	0f 90       	pop	r0
    1654:	1f 90       	pop	r1
    1656:	18 95       	reti

00001658 <TIMER_Init>:
 *                  The same time from Configuration of timer .
 * [Args]  : void
 * [Return]: Void
 */
void TIMER_Init(void)
{
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62

		TCCR1A_REG |= TIMER1_MODE_PWM_PHASECORRECT_10_BIT_A_MSK;
		TCCR1B_REG |= TIMER1_MODE_PWM_PHASECORRECT_10_BIT_B_MSK;
		break;
	case TIMER1_MODE_CTC_MSK:
		TCCR1A_REG &= TIMER1_MODE_clr_A_MSK;
    1660:	af e4       	ldi	r26, 0x4F	; 79
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	ef e4       	ldi	r30, 0x4F	; 79
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	8c 7f       	andi	r24, 0xFC	; 252
    166c:	8c 93       	st	X, r24
		TCCR1B_REG &= TIMER1_MODE_clr_B_MSK;
    166e:	ae e4       	ldi	r26, 0x4E	; 78
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	ee e4       	ldi	r30, 0x4E	; 78
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	87 7e       	andi	r24, 0xE7	; 231
    167a:	8c 93       	st	X, r24

		TCCR1A_REG |= TIMER1_MODE_CTC_A_MSK;
    167c:	af e4       	ldi	r26, 0x4F	; 79
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	ef e4       	ldi	r30, 0x4F	; 79
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	8c 60       	ori	r24, 0x0C	; 12
    1688:	8c 93       	st	X, r24
		TCCR1B_REG |= TIMER1_MODE_CTC_B_MSK;
    168a:	ae e4       	ldi	r26, 0x4E	; 78
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	ee e4       	ldi	r30, 0x4E	; 78
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	88 60       	ori	r24, 0x08	; 8
    1696:	8c 93       	st	X, r24
	case TIMER1_CLK_WITH_256_PRESCALER_MSK:
		TCCR1B_REG &= TIMER1_CLK_WITH_PRESCALER_clr_MSK;
		TCCR1B_REG |= TIMER1_CLK_WITH_256_PRESCALER_MSK;
		break;
	case TIMER1_CLK_WITH_1024_PRESCALER_MSK:
		TCCR1B_REG &= TIMER1_CLK_WITH_PRESCALER_clr_MSK;
    1698:	ae e4       	ldi	r26, 0x4E	; 78
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	ee e4       	ldi	r30, 0x4E	; 78
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	88 7f       	andi	r24, 0xF8	; 248
    16a4:	8c 93       	st	X, r24
		TCCR1B_REG |= TIMER1_CLK_WITH_1024_PRESCALER_MSK;
    16a6:	ae e4       	ldi	r26, 0x4E	; 78
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	ee e4       	ldi	r30, 0x4E	; 78
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	85 60       	ori	r24, 0x05	; 5
    16b2:	8c 93       	st	X, r24
		TCCR1B_REG |= TIMER1_EXTERNAL_CLK_WITH_RISING_EDGE_MSK;
		break;
	}

	/* Initial value for Timer/Counter1 */
	TCNT1_REG = TIMER1_INITIAL_VALUE;
    16b4:	ec e4       	ldi	r30, 0x4C	; 76
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	11 82       	std	Z+1, r1	; 0x01
    16ba:	10 82       	st	Z, r1

	/* Compare value for Timer/Counter0 */
	OCR1A_REG = TIMER1_COMPARE_A_VALUE;
    16bc:	ea e4       	ldi	r30, 0x4A	; 74
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	84 e8       	ldi	r24, 0x84	; 132
    16c2:	9e e1       	ldi	r25, 0x1E	; 30
    16c4:	91 83       	std	Z+1, r25	; 0x01
    16c6:	80 83       	st	Z, r24
	OCR1B_REG = TIMER1_COMPARE_B_VALUE;
    16c8:	e8 e4       	ldi	r30, 0x48	; 72
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	11 82       	std	Z+1, r1	; 0x01
    16ce:	10 82       	st	Z, r1
	/* Compare value for Timer/Counter2 */
	OCR2_REG = TIMER2_COMPARE_VALUE;
#endif

	/* To enable TIMER's Interrupt */
	TIMER_EnableInterrupt();
    16d0:	0e 94 6d 0b 	call	0x16da	; 0x16da <TIMER_EnableInterrupt>
}
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	08 95       	ret

000016da <TIMER_EnableInterrupt>:
 *                  Depend on Timer That you made it Enable.
 * [Args]  : void
 * [Return]: Void
 */
void TIMER_EnableInterrupt(void)
{
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
#if TIMER1 == ENABLE

#if TIMER1_OVF_INT_EN == ENABLE
	SET_BIT(TIMSK_REG,TIMSK_TOIE1);
#elif TIMER1_COMPA_INT_EN == ENABLE
	SET_BIT(TIMSK_REG,TIMSK_OCIE1A);
    16e2:	a9 e5       	ldi	r26, 0x59	; 89
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e9 e5       	ldi	r30, 0x59	; 89
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	80 61       	ori	r24, 0x10	; 16
    16ee:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,TIMSK_TOIE2);
#elif TIMER2_COMP_INT_EN == ENABLE
	SET_BIT(TIMSK_REG,TIMSK_OCIE2);
#endif
#endif
}
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	08 95       	ret

000016f6 <TIMER0_SetCallBack>:
 *                  Every set callback function follow specific Timer.
 * [Args]  : Pointer To Function take void and return void
 * [Return]: Void
 */
void TIMER0_SetCallBack(void (*Ptr_To_fun)(void))
{
    16f6:	df 93       	push	r29
    16f8:	cf 93       	push	r28
    16fa:	00 d0       	rcall	.+0      	; 0x16fc <TIMER0_SetCallBack+0x6>
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	9a 83       	std	Y+2, r25	; 0x02
    1702:	89 83       	std	Y+1, r24	; 0x01
	g_Ptr_To_Fun_TIMER_0 = (volatile void *)Ptr_To_fun;
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	9a 81       	ldd	r25, Y+2	; 0x02
    1708:	90 93 71 01 	sts	0x0171, r25
    170c:	80 93 70 01 	sts	0x0170, r24
}
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	cf 91       	pop	r28
    1716:	df 91       	pop	r29
    1718:	08 95       	ret

0000171a <TIMER1_SetCallBack>:

void TIMER1_SetCallBack(void (*Ptr_To_fun)(void))
{
    171a:	df 93       	push	r29
    171c:	cf 93       	push	r28
    171e:	00 d0       	rcall	.+0      	; 0x1720 <TIMER1_SetCallBack+0x6>
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	9a 83       	std	Y+2, r25	; 0x02
    1726:	89 83       	std	Y+1, r24	; 0x01
	g_Ptr_To_Fun_TIMER_1 = (volatile void *)Ptr_To_fun;
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	9a 81       	ldd	r25, Y+2	; 0x02
    172c:	90 93 73 01 	sts	0x0173, r25
    1730:	80 93 72 01 	sts	0x0172, r24
}
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
    1738:	cf 91       	pop	r28
    173a:	df 91       	pop	r29
    173c:	08 95       	ret

0000173e <TIMER2_SetCallBack>:

void TIMER2_SetCallBack(void (*Ptr_To_fun)(void))
{
    173e:	df 93       	push	r29
    1740:	cf 93       	push	r28
    1742:	00 d0       	rcall	.+0      	; 0x1744 <TIMER2_SetCallBack+0x6>
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	9a 83       	std	Y+2, r25	; 0x02
    174a:	89 83       	std	Y+1, r24	; 0x01
	g_Ptr_To_Fun_TIMER_2 = (volatile void *)Ptr_To_fun;
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	9a 81       	ldd	r25, Y+2	; 0x02
    1750:	90 93 75 01 	sts	0x0175, r25
    1754:	80 93 74 01 	sts	0x0174, r24
}
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	08 95       	ret

00001762 <TIMER_DeInit>:
 * [Description]  : This function is responsible to De-initialization all Timers
 * [Args]  : uint8
 * [Return]: Void
 */
void TIMER_DeInit(uint8 Timer_ID)
{
    1762:	df 93       	push	r29
    1764:	cf 93       	push	r28
    1766:	0f 92       	push	r0
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
    176c:	89 83       	std	Y+1, r24	; 0x01
	if(0 == Timer_ID)
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	88 23       	and	r24, r24
    1772:	21 f4       	brne	.+8      	; 0x177c <TIMER_DeInit+0x1a>
	{
		/* TIMER0 De-init */
		TCCR0_REG = 0;
    1774:	e3 e5       	ldi	r30, 0x53	; 83
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	10 82       	st	Z, r1
    177a:	10 c0       	rjmp	.+32     	; 0x179c <TIMER_DeInit+0x3a>
	}
	else if(1 == Timer_ID)
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	39 f4       	brne	.+14     	; 0x1790 <TIMER_DeInit+0x2e>
	{
		/* TIMER1 De-init */
		TCCR1A_REG = 0;
    1782:	ef e4       	ldi	r30, 0x4F	; 79
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	10 82       	st	Z, r1
		TCCR1B_REG = 0;
    1788:	ee e4       	ldi	r30, 0x4E	; 78
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	10 82       	st	Z, r1
    178e:	06 c0       	rjmp	.+12     	; 0x179c <TIMER_DeInit+0x3a>
	}
	else if(2 == Timer_ID)
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	82 30       	cpi	r24, 0x02	; 2
    1794:	19 f4       	brne	.+6      	; 0x179c <TIMER_DeInit+0x3a>
	{
		/* TIMER2 De-init */
		TCCR2_REG = 0;
    1796:	e5 e4       	ldi	r30, 0x45	; 69
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	10 82       	st	Z, r1
	}
	else{}
}
    179c:	0f 90       	pop	r0
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	08 95       	ret

000017a4 <Timer0_PWM_DutyCycle>:
 *					 5. Setup the direction for OC0 as output pin.
 * [Args]  : uint8 required input duty cycle
 * [Return]: Void
 */
void Timer0_PWM_DutyCycle(uint8 duty_cycle)
{
    17a4:	0f 93       	push	r16
    17a6:	1f 93       	push	r17
    17a8:	df 93       	push	r29
    17aa:	cf 93       	push	r28
    17ac:	0f 92       	push	r0
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
    17b2:	89 83       	std	Y+1, r24	; 0x01
	/* Initial value for Timer/Counter0 */
	TCNT0_REG = TIMER0_INITIAL_VALUE;
    17b4:	e2 e5       	ldi	r30, 0x52	; 82
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	10 82       	st	Z, r1

	/* Set Compare value */
	OCR0_REG = ((float32)duty_cycle / 100) * 255;
    17ba:	0c e5       	ldi	r16, 0x5C	; 92
    17bc:	10 e0       	ldi	r17, 0x00	; 0
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	88 2f       	mov	r24, r24
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	a0 e0       	ldi	r26, 0x00	; 0
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	bc 01       	movw	r22, r24
    17ca:	cd 01       	movw	r24, r26
    17cc:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	bc 01       	movw	r22, r24
    17d6:	cd 01       	movw	r24, r26
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	48 ec       	ldi	r20, 0xC8	; 200
    17de:	52 e4       	ldi	r21, 0x42	; 66
    17e0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	bc 01       	movw	r22, r24
    17ea:	cd 01       	movw	r24, r26
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	4f e7       	ldi	r20, 0x7F	; 127
    17f2:	53 e4       	ldi	r21, 0x43	; 67
    17f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	bc 01       	movw	r22, r24
    17fe:	cd 01       	movw	r24, r26
    1800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	f8 01       	movw	r30, r16
    180a:	80 83       	st	Z, r24

#if (TIMER0_MODE_SELECTOR == TIMER0_MODE_PWM_PHASECORRECT_MSK)
	TCCR0_REG &= TIMER0_MODE_clr_MSK;
    180c:	a3 e5       	ldi	r26, 0x53	; 83
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	e3 e5       	ldi	r30, 0x53	; 83
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	87 7b       	andi	r24, 0xB7	; 183
    1818:	8c 93       	st	X, r24
	TCCR0_REG |= TIMER0_MODE_PWM_PHASECORRECT_MSK;
    181a:	a3 e5       	ldi	r26, 0x53	; 83
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	e3 e5       	ldi	r30, 0x53	; 83
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	80 64       	ori	r24, 0x40	; 64
    1826:	8c 93       	st	X, r24
	TCCR0_REG &= TIMER0_MODE_clr_MSK;
	TCCR0_REG |= TIMER0_MODE_FASTPWM_MSK;
#endif

#if TIMER0_OC0_BEHAVIOR_SELECTOR == TIMER0_OC0_NON_INVERTING_MSK
	TCCR0_REG &= TIMER0_OC0_clr_MSK;
    1828:	a3 e5       	ldi	r26, 0x53	; 83
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	e3 e5       	ldi	r30, 0x53	; 83
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	8f 7c       	andi	r24, 0xCF	; 207
    1834:	8c 93       	st	X, r24
	GPIO_SetPinDir(TIMER0_OC0_PORT, TIMER0_OC0_Pin, pin_output);
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	63 e0       	ldi	r22, 0x03	; 3
    183a:	41 e0       	ldi	r20, 0x01	; 1
    183c:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <GPIO_SetPinDir>
	TCCR0_REG |= TIMER0_OC0_NON_INVERTING_MSK;
    1840:	a3 e5       	ldi	r26, 0x53	; 83
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e3 e5       	ldi	r30, 0x53	; 83
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	80 62       	ori	r24, 0x20	; 32
    184c:	8c 93       	st	X, r24
	case TIMER0_CLK_WITH_8_PRESCALER_MSK:
		TCCR0_REG &= TIMER0_CLK_WITH_PRESCALER_clr_MSK;
		TCCR0_REG |= TIMER0_CLK_WITH_8_PRESCALER_MSK;
		break;
	case TIMER0_CLK_WITH_64_PRESCALER_MSK:
		TCCR0_REG &= TIMER0_CLK_WITH_PRESCALER_clr_MSK;
    184e:	a3 e5       	ldi	r26, 0x53	; 83
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e3 e5       	ldi	r30, 0x53	; 83
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	88 7f       	andi	r24, 0xF8	; 248
    185a:	8c 93       	st	X, r24
		TCCR0_REG |= TIMER0_CLK_WITH_64_PRESCALER_MSK;
    185c:	a3 e5       	ldi	r26, 0x53	; 83
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e3 e5       	ldi	r30, 0x53	; 83
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	83 60       	ori	r24, 0x03	; 3
    1868:	8c 93       	st	X, r24
	case TIMER0_EXTERNAL_CLK_WITH_RISING_EDGE_MSK:
		TCCR0_REG &= TIMER0_CLK_WITH_PRESCALER_clr_MSK;
		TCCR0_REG |= TIMER0_EXTERNAL_CLK_WITH_RISING_EDGE_MSK;
		break;
	}
}
    186a:	0f 90       	pop	r0
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	1f 91       	pop	r17
    1872:	0f 91       	pop	r16
    1874:	08 95       	ret

00001876 <Timer1_PWM_DutyCycle>:
 *					 5. Setup the direction for OC1B as output pin.
 * [Args]  : required input duty cycle
 * [Return]: Void
 */
void Timer1_PWM_DutyCycle(uint16  duty_cycle)
{
    1876:	0f 93       	push	r16
    1878:	1f 93       	push	r17
    187a:	df 93       	push	r29
    187c:	cf 93       	push	r28
    187e:	00 d0       	rcall	.+0      	; 0x1880 <Timer1_PWM_DutyCycle+0xa>
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
    1884:	9a 83       	std	Y+2, r25	; 0x02
    1886:	89 83       	std	Y+1, r24	; 0x01
	/* Initial value for Timer/Counter1 */
	TCNT1_REG = TIMER1_INITIAL_VALUE;
    1888:	ec e4       	ldi	r30, 0x4C	; 76
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	11 82       	std	Z+1, r1	; 0x01
    188e:	10 82       	st	Z, r1
	/*
	 * use fast mode with top value at OCRA reg
	 * diconnect OC1A PIN ,and generate the PWM on OC1B PIN
	 */
	/* Compare value for Timer/Counter0 */
	OCR1A_REG = TIMER1_COMPARE_A_VALUE;
    1890:	ea e4       	ldi	r30, 0x4A	; 74
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	84 e8       	ldi	r24, 0x84	; 132
    1896:	9e e1       	ldi	r25, 0x1E	; 30
    1898:	91 83       	std	Z+1, r25	; 0x01
    189a:	80 83       	st	Z, r24
	OCR1B_REG = ((float32)duty_cycle / 100) * 65535;
    189c:	08 e4       	ldi	r16, 0x48	; 72
    189e:	10 e0       	ldi	r17, 0x00	; 0
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	9a 81       	ldd	r25, Y+2	; 0x02
    18a4:	cc 01       	movw	r24, r24
    18a6:	a0 e0       	ldi	r26, 0x00	; 0
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	bc 01       	movw	r22, r24
    18ac:	cd 01       	movw	r24, r26
    18ae:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	bc 01       	movw	r22, r24
    18b8:	cd 01       	movw	r24, r26
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	48 ec       	ldi	r20, 0xC8	; 200
    18c0:	52 e4       	ldi	r21, 0x42	; 66
    18c2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	bc 01       	movw	r22, r24
    18cc:	cd 01       	movw	r24, r26
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	3f ef       	ldi	r19, 0xFF	; 255
    18d2:	4f e7       	ldi	r20, 0x7F	; 127
    18d4:	57 e4       	ldi	r21, 0x47	; 71
    18d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	bc 01       	movw	r22, r24
    18e0:	cd 01       	movw	r24, r26
    18e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	f8 01       	movw	r30, r16
    18ec:	91 83       	std	Z+1, r25	; 0x01
    18ee:	80 83       	st	Z, r24

	TCCR1A_REG |= TIMER1_MODE_FAST_PWM_A_MSK;
	TCCR1B_REG |= TIMER1_MODE_FAST_PWM_B_MSK;
#endif

	GPIO_SetPinDir(TIMER1_OC1B_PORT, TIMER1_OC1B_Pin, pin_output);
    18f0:	83 e0       	ldi	r24, 0x03	; 3
    18f2:	64 e0       	ldi	r22, 0x04	; 4
    18f4:	41 e0       	ldi	r20, 0x01	; 1
    18f6:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <GPIO_SetPinDir>
	case TIMER1_CLK_WITH_256_PRESCALER_MSK:
		TCCR1B_REG &= TIMER1_CLK_WITH_PRESCALER_clr_MSK;
		TCCR1B_REG |= TIMER1_CLK_WITH_256_PRESCALER_MSK;
		break;
	case TIMER1_CLK_WITH_1024_PRESCALER_MSK:
		TCCR1B_REG &= TIMER1_CLK_WITH_PRESCALER_clr_MSK;
    18fa:	ae e4       	ldi	r26, 0x4E	; 78
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	ee e4       	ldi	r30, 0x4E	; 78
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	88 7f       	andi	r24, 0xF8	; 248
    1906:	8c 93       	st	X, r24
		TCCR1B_REG |= TIMER1_CLK_WITH_1024_PRESCALER_MSK;
    1908:	ae e4       	ldi	r26, 0x4E	; 78
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	ee e4       	ldi	r30, 0x4E	; 78
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	85 60       	ori	r24, 0x05	; 5
    1914:	8c 93       	st	X, r24
	case TIMER1_EXTERNAL_CLK_WITH_RISING_EDGE_MSK:
		TCCR1B_REG &= TIMER1_CLK_WITH_PRESCALER_clr_MSK;
		TCCR1B_REG |= TIMER1_EXTERNAL_CLK_WITH_RISING_EDGE_MSK;
		break;
	}
}
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	1f 91       	pop	r17
    1920:	0f 91       	pop	r16
    1922:	08 95       	ret

00001924 <Timer2_PWM_DutyCycle>:
 *					 5. Setup the direction for OCR2 as output pin.
 * [Args]  : required input duty cycle
 * [Return]: Void
 */
void Timer2_PWM_DutyCycle(uint8 duty_cycle)
{
    1924:	0f 93       	push	r16
    1926:	1f 93       	push	r17
    1928:	df 93       	push	r29
    192a:	cf 93       	push	r28
    192c:	0f 92       	push	r0
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
    1932:	89 83       	std	Y+1, r24	; 0x01

	/* Initial value for Timer/Counter2 */
	TCNT2_REG = TIMER2_INITIAL_VALUE;
    1934:	e4 e4       	ldi	r30, 0x44	; 68
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	10 82       	st	Z, r1

	/* Compare value for Timer/Counter2 */
	OCR2_REG = ((float32)duty_cycle / 100) * 255;
    193a:	03 e4       	ldi	r16, 0x43	; 67
    193c:	10 e0       	ldi	r17, 0x00	; 0
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	88 2f       	mov	r24, r24
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	a0 e0       	ldi	r26, 0x00	; 0
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	bc 01       	movw	r22, r24
    194a:	cd 01       	movw	r24, r26
    194c:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    1950:	dc 01       	movw	r26, r24
    1952:	cb 01       	movw	r24, r22
    1954:	bc 01       	movw	r22, r24
    1956:	cd 01       	movw	r24, r26
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	48 ec       	ldi	r20, 0xC8	; 200
    195e:	52 e4       	ldi	r21, 0x42	; 66
    1960:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	bc 01       	movw	r22, r24
    196a:	cd 01       	movw	r24, r26
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	4f e7       	ldi	r20, 0x7F	; 127
    1972:	53 e4       	ldi	r21, 0x43	; 67
    1974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	bc 01       	movw	r22, r24
    197e:	cd 01       	movw	r24, r26
    1980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	f8 01       	movw	r30, r16
    198a:	80 83       	st	Z, r24
	TCCR2_REG &= TIMER2_MODE_clr_MSK;
	TCCR2_REG |= TIMER2_MODE_FASTPWM_MSK;
#endif

#if TIMER2_OC2_BEHAVIOR_SELECTOR == TIMER2_OC2_NON_INVERTING_MSK
	TCCR2_REG &= TIMER2_OC2_clr_MSK;
    198c:	a5 e4       	ldi	r26, 0x45	; 69
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e5 e4       	ldi	r30, 0x45	; 69
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	8f 7c       	andi	r24, 0xCF	; 207
    1998:	8c 93       	st	X, r24
	GPIO_SetPinDir(TIMER2_OC2_PORT, TIMER2_OC2_Pin, pin_output);
    199a:	83 e0       	ldi	r24, 0x03	; 3
    199c:	67 e0       	ldi	r22, 0x07	; 7
    199e:	41 e0       	ldi	r20, 0x01	; 1
    19a0:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <GPIO_SetPinDir>
	TCCR2_REG |= TIMER2_OC2_NON_INVERTING_MSK;
    19a4:	a5 e4       	ldi	r26, 0x45	; 69
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e5 e4       	ldi	r30, 0x45	; 69
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	80 62       	ori	r24, 0x20	; 32
    19b0:	8c 93       	st	X, r24
	case TIMER2_CLK_WITH_256_PRESCALER_MSK:
		TCCR2_REG &= TIMER2_CLK_WITH_PRESCALER_clr_MSK;
		TCCR2_REG |= TIMER2_CLK_WITH_256_PRESCALER_MSK;
		break;
	case TIMER2_CLK_WITH_1024_PRESCALER_MSK:
		TCCR2_REG &= TIMER2_CLK_WITH_PRESCALER_clr_MSK;
    19b2:	a5 e4       	ldi	r26, 0x45	; 69
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e5 e4       	ldi	r30, 0x45	; 69
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	88 7f       	andi	r24, 0xF8	; 248
    19be:	8c 93       	st	X, r24
		TCCR2_REG |= TIMER2_CLK_WITH_1024_PRESCALER_MSK;
    19c0:	a5 e4       	ldi	r26, 0x45	; 69
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	e5 e4       	ldi	r30, 0x45	; 69
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	87 60       	ori	r24, 0x07	; 7
    19cc:	8c 93       	st	X, r24
		break;
	}
}
    19ce:	0f 90       	pop	r0
    19d0:	cf 91       	pop	r28
    19d2:	df 91       	pop	r29
    19d4:	1f 91       	pop	r17
    19d6:	0f 91       	pop	r16
    19d8:	08 95       	ret

000019da <GI_Enable>:
 * [FUNCTION NAME]: GI_Enable
 * [DISCRIPTION]  : This Function used to enable Global Interrupt Enable (GIE)
 * [RUTURN]: Void
 */
void GI_Enable(void)
{
    19da:	df 93       	push	r29
    19dc:	cf 93       	push	r28
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,SREG_I);
    19e2:	af e5       	ldi	r26, 0x5F	; 95
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	ef e5       	ldi	r30, 0x5F	; 95
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	80 68       	ori	r24, 0x80	; 128
    19ee:	8c 93       	st	X, r24
}
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	08 95       	ret

000019f6 <GI_Disable>:
 * [FUNCTION NAME]: GI_Disable
 * [DISCRIPTION]  : This Function used to Disable Global Interrupt Enable (GIE)
 * [RUTURN]: Void
 */
void GI_Disable(void)
{
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG_REG,SREG_I);
    19fe:	af e5       	ldi	r26, 0x5F	; 95
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	ef e5       	ldi	r30, 0x5F	; 95
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	8f 77       	andi	r24, 0x7F	; 127
    1a0a:	8c 93       	st	X, r24
}
    1a0c:	cf 91       	pop	r28
    1a0e:	df 91       	pop	r29
    1a10:	08 95       	ret

00001a12 <GPIO_SetPinDir>:
 [RUTURN]: Void
 [NOTE]: if Number of PORTn >= 4 OR PINn >= 8 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/

void GPIO_SetPinDir(uint8 PORTn, uint8 PINn, GPIO_PinDirection Dir)
{
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	00 d0       	rcall	.+0      	; 0x1a18 <GPIO_SetPinDir+0x6>
    1a18:	00 d0       	rcall	.+0      	; 0x1a1a <GPIO_SetPinDir+0x8>
    1a1a:	0f 92       	push	r0
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	89 83       	std	Y+1, r24	; 0x01
    1a22:	6a 83       	std	Y+2, r22	; 0x02
    1a24:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number.
	 */
	if((PORTn >= NUM_OF_PORTS) || (PINn >= NUM_OF_PINS_PER_PORT))
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	84 30       	cpi	r24, 0x04	; 4
    1a2a:	08 f0       	brcs	.+2      	; 0x1a2e <GPIO_SetPinDir+0x1c>
    1a2c:	d5 c0       	rjmp	.+426    	; 0x1bd8 <GPIO_SetPinDir+0x1c6>
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	88 30       	cpi	r24, 0x08	; 8
    1a32:	08 f0       	brcs	.+2      	; 0x1a36 <GPIO_SetPinDir+0x24>
    1a34:	d1 c0       	rjmp	.+418    	; 0x1bd8 <GPIO_SetPinDir+0x1c6>
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(PORTn)
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	3d 83       	std	Y+5, r19	; 0x05
    1a3e:	2c 83       	std	Y+4, r18	; 0x04
    1a40:	8c 81       	ldd	r24, Y+4	; 0x04
    1a42:	9d 81       	ldd	r25, Y+5	; 0x05
    1a44:	81 30       	cpi	r24, 0x01	; 1
    1a46:	91 05       	cpc	r25, r1
    1a48:	09 f4       	brne	.+2      	; 0x1a4c <GPIO_SetPinDir+0x3a>
    1a4a:	43 c0       	rjmp	.+134    	; 0x1ad2 <GPIO_SetPinDir+0xc0>
    1a4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a50:	22 30       	cpi	r18, 0x02	; 2
    1a52:	31 05       	cpc	r19, r1
    1a54:	2c f4       	brge	.+10     	; 0x1a60 <GPIO_SetPinDir+0x4e>
    1a56:	8c 81       	ldd	r24, Y+4	; 0x04
    1a58:	9d 81       	ldd	r25, Y+5	; 0x05
    1a5a:	00 97       	sbiw	r24, 0x00	; 0
    1a5c:	71 f0       	breq	.+28     	; 0x1a7a <GPIO_SetPinDir+0x68>
    1a5e:	bc c0       	rjmp	.+376    	; 0x1bd8 <GPIO_SetPinDir+0x1c6>
    1a60:	2c 81       	ldd	r18, Y+4	; 0x04
    1a62:	3d 81       	ldd	r19, Y+5	; 0x05
    1a64:	22 30       	cpi	r18, 0x02	; 2
    1a66:	31 05       	cpc	r19, r1
    1a68:	09 f4       	brne	.+2      	; 0x1a6c <GPIO_SetPinDir+0x5a>
    1a6a:	5f c0       	rjmp	.+190    	; 0x1b2a <GPIO_SetPinDir+0x118>
    1a6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a70:	83 30       	cpi	r24, 0x03	; 3
    1a72:	91 05       	cpc	r25, r1
    1a74:	09 f4       	brne	.+2      	; 0x1a78 <GPIO_SetPinDir+0x66>
    1a76:	85 c0       	rjmp	.+266    	; 0x1b82 <GPIO_SetPinDir+0x170>
    1a78:	af c0       	rjmp	.+350    	; 0x1bd8 <GPIO_SetPinDir+0x1c6>
		{
		case PORTA_ID:
			if(Dir == pin_output)
    1a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7c:	81 30       	cpi	r24, 0x01	; 1
    1a7e:	a1 f4       	brne	.+40     	; 0x1aa8 <GPIO_SetPinDir+0x96>
			{
				SET_BIT(DDRA_REG,PINn);
    1a80:	aa e3       	ldi	r26, 0x3A	; 58
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	ea e3       	ldi	r30, 0x3A	; 58
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	48 2f       	mov	r20, r24
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	02 2e       	mov	r0, r18
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <GPIO_SetPinDir+0x8c>
    1a9a:	88 0f       	add	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	0a 94       	dec	r0
    1aa0:	e2 f7       	brpl	.-8      	; 0x1a9a <GPIO_SetPinDir+0x88>
    1aa2:	84 2b       	or	r24, r20
    1aa4:	8c 93       	st	X, r24
    1aa6:	98 c0       	rjmp	.+304    	; 0x1bd8 <GPIO_SetPinDir+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA_REG,PINn);
    1aa8:	aa e3       	ldi	r26, 0x3A	; 58
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	ea e3       	ldi	r30, 0x3A	; 58
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	48 2f       	mov	r20, r24
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	02 2e       	mov	r0, r18
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <GPIO_SetPinDir+0xb4>
    1ac2:	88 0f       	add	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	0a 94       	dec	r0
    1ac8:	e2 f7       	brpl	.-8      	; 0x1ac2 <GPIO_SetPinDir+0xb0>
    1aca:	80 95       	com	r24
    1acc:	84 23       	and	r24, r20
    1ace:	8c 93       	st	X, r24
    1ad0:	83 c0       	rjmp	.+262    	; 0x1bd8 <GPIO_SetPinDir+0x1c6>
			}
			break;
		case PORTB_ID:
			if(Dir == pin_output)
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	81 30       	cpi	r24, 0x01	; 1
    1ad6:	a1 f4       	brne	.+40     	; 0x1b00 <GPIO_SetPinDir+0xee>
			{
				SET_BIT(DDRB_REG,PINn);
    1ad8:	a7 e3       	ldi	r26, 0x37	; 55
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e7 e3       	ldi	r30, 0x37	; 55
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	48 2f       	mov	r20, r24
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	02 2e       	mov	r0, r18
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <GPIO_SetPinDir+0xe4>
    1af2:	88 0f       	add	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	0a 94       	dec	r0
    1af8:	e2 f7       	brpl	.-8      	; 0x1af2 <GPIO_SetPinDir+0xe0>
    1afa:	84 2b       	or	r24, r20
    1afc:	8c 93       	st	X, r24
    1afe:	6c c0       	rjmp	.+216    	; 0x1bd8 <GPIO_SetPinDir+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB_REG,PINn);
    1b00:	a7 e3       	ldi	r26, 0x37	; 55
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e7 e3       	ldi	r30, 0x37	; 55
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	48 2f       	mov	r20, r24
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	28 2f       	mov	r18, r24
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	02 2e       	mov	r0, r18
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <GPIO_SetPinDir+0x10c>
    1b1a:	88 0f       	add	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	0a 94       	dec	r0
    1b20:	e2 f7       	brpl	.-8      	; 0x1b1a <GPIO_SetPinDir+0x108>
    1b22:	80 95       	com	r24
    1b24:	84 23       	and	r24, r20
    1b26:	8c 93       	st	X, r24
    1b28:	57 c0       	rjmp	.+174    	; 0x1bd8 <GPIO_SetPinDir+0x1c6>
			}
			break;
		case PORTC_ID:
			if(Dir == pin_output)
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2c:	81 30       	cpi	r24, 0x01	; 1
    1b2e:	a1 f4       	brne	.+40     	; 0x1b58 <GPIO_SetPinDir+0x146>
			{
				SET_BIT(DDRC_REG,PINn);
    1b30:	a4 e3       	ldi	r26, 0x34	; 52
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e4 e3       	ldi	r30, 0x34	; 52
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	48 2f       	mov	r20, r24
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	02 2e       	mov	r0, r18
    1b48:	02 c0       	rjmp	.+4      	; 0x1b4e <GPIO_SetPinDir+0x13c>
    1b4a:	88 0f       	add	r24, r24
    1b4c:	99 1f       	adc	r25, r25
    1b4e:	0a 94       	dec	r0
    1b50:	e2 f7       	brpl	.-8      	; 0x1b4a <GPIO_SetPinDir+0x138>
    1b52:	84 2b       	or	r24, r20
    1b54:	8c 93       	st	X, r24
    1b56:	40 c0       	rjmp	.+128    	; 0x1bd8 <GPIO_SetPinDir+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC_REG,PINn);
    1b58:	a4 e3       	ldi	r26, 0x34	; 52
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	e4 e3       	ldi	r30, 0x34	; 52
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	48 2f       	mov	r20, r24
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	28 2f       	mov	r18, r24
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	02 2e       	mov	r0, r18
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <GPIO_SetPinDir+0x164>
    1b72:	88 0f       	add	r24, r24
    1b74:	99 1f       	adc	r25, r25
    1b76:	0a 94       	dec	r0
    1b78:	e2 f7       	brpl	.-8      	; 0x1b72 <GPIO_SetPinDir+0x160>
    1b7a:	80 95       	com	r24
    1b7c:	84 23       	and	r24, r20
    1b7e:	8c 93       	st	X, r24
    1b80:	2b c0       	rjmp	.+86     	; 0x1bd8 <GPIO_SetPinDir+0x1c6>
			}
			break;
		case PORTD_ID:
			if(Dir == pin_output)
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	81 30       	cpi	r24, 0x01	; 1
    1b86:	a1 f4       	brne	.+40     	; 0x1bb0 <GPIO_SetPinDir+0x19e>
			{
				SET_BIT(DDRD_REG,PINn);
    1b88:	a1 e3       	ldi	r26, 0x31	; 49
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	e1 e3       	ldi	r30, 0x31	; 49
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	48 2f       	mov	r20, r24
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	28 2f       	mov	r18, r24
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	02 2e       	mov	r0, r18
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <GPIO_SetPinDir+0x194>
    1ba2:	88 0f       	add	r24, r24
    1ba4:	99 1f       	adc	r25, r25
    1ba6:	0a 94       	dec	r0
    1ba8:	e2 f7       	brpl	.-8      	; 0x1ba2 <GPIO_SetPinDir+0x190>
    1baa:	84 2b       	or	r24, r20
    1bac:	8c 93       	st	X, r24
    1bae:	14 c0       	rjmp	.+40     	; 0x1bd8 <GPIO_SetPinDir+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD_REG,PINn);
    1bb0:	a1 e3       	ldi	r26, 0x31	; 49
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	e1 e3       	ldi	r30, 0x31	; 49
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	48 2f       	mov	r20, r24
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	02 2e       	mov	r0, r18
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <GPIO_SetPinDir+0x1bc>
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	0a 94       	dec	r0
    1bd0:	e2 f7       	brpl	.-8      	; 0x1bca <GPIO_SetPinDir+0x1b8>
    1bd2:	80 95       	com	r24
    1bd4:	84 23       	and	r24, r20
    1bd6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1bd8:	0f 90       	pop	r0
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	08 95       	ret

00001be8 <GPIO_ReadPin>:
 [Args]: PORTn_ID(n=A,B,C,D) and PINn_ID(n =0...7)
 [RUTURN]: uint8
 [NOTE]: if Number of PORTn >= 4 OR PINn >= 8 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
uint8 GPIO_ReadPin(uint8 PORTn, uint8 PINn)
{
    1be8:	df 93       	push	r29
    1bea:	cf 93       	push	r28
    1bec:	00 d0       	rcall	.+0      	; 0x1bee <GPIO_ReadPin+0x6>
    1bee:	00 d0       	rcall	.+0      	; 0x1bf0 <GPIO_ReadPin+0x8>
    1bf0:	0f 92       	push	r0
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
    1bf6:	8a 83       	std	Y+2, r24	; 0x02
    1bf8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1bfa:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((PORTn >= NUM_OF_PORTS) || (PINn >= NUM_OF_PINS_PER_PORT))
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	84 30       	cpi	r24, 0x04	; 4
    1c00:	08 f0       	brcs	.+2      	; 0x1c04 <GPIO_ReadPin+0x1c>
    1c02:	84 c0       	rjmp	.+264    	; 0x1d0c <GPIO_ReadPin+0x124>
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	88 30       	cpi	r24, 0x08	; 8
    1c08:	08 f0       	brcs	.+2      	; 0x1c0c <GPIO_ReadPin+0x24>
    1c0a:	80 c0       	rjmp	.+256    	; 0x1d0c <GPIO_ReadPin+0x124>
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		/* Read the pin value as required */
		switch(PORTn)
    1c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0e:	28 2f       	mov	r18, r24
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	3d 83       	std	Y+5, r19	; 0x05
    1c14:	2c 83       	std	Y+4, r18	; 0x04
    1c16:	4c 81       	ldd	r20, Y+4	; 0x04
    1c18:	5d 81       	ldd	r21, Y+5	; 0x05
    1c1a:	41 30       	cpi	r20, 0x01	; 1
    1c1c:	51 05       	cpc	r21, r1
    1c1e:	79 f1       	breq	.+94     	; 0x1c7e <GPIO_ReadPin+0x96>
    1c20:	8c 81       	ldd	r24, Y+4	; 0x04
    1c22:	9d 81       	ldd	r25, Y+5	; 0x05
    1c24:	82 30       	cpi	r24, 0x02	; 2
    1c26:	91 05       	cpc	r25, r1
    1c28:	34 f4       	brge	.+12     	; 0x1c36 <GPIO_ReadPin+0x4e>
    1c2a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c2c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c2e:	21 15       	cp	r18, r1
    1c30:	31 05       	cpc	r19, r1
    1c32:	69 f0       	breq	.+26     	; 0x1c4e <GPIO_ReadPin+0x66>
    1c34:	6b c0       	rjmp	.+214    	; 0x1d0c <GPIO_ReadPin+0x124>
    1c36:	4c 81       	ldd	r20, Y+4	; 0x04
    1c38:	5d 81       	ldd	r21, Y+5	; 0x05
    1c3a:	42 30       	cpi	r20, 0x02	; 2
    1c3c:	51 05       	cpc	r21, r1
    1c3e:	b9 f1       	breq	.+110    	; 0x1cae <GPIO_ReadPin+0xc6>
    1c40:	8c 81       	ldd	r24, Y+4	; 0x04
    1c42:	9d 81       	ldd	r25, Y+5	; 0x05
    1c44:	83 30       	cpi	r24, 0x03	; 3
    1c46:	91 05       	cpc	r25, r1
    1c48:	09 f4       	brne	.+2      	; 0x1c4c <GPIO_ReadPin+0x64>
    1c4a:	49 c0       	rjmp	.+146    	; 0x1cde <GPIO_ReadPin+0xf6>
    1c4c:	5f c0       	rjmp	.+190    	; 0x1d0c <GPIO_ReadPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA_REG,PINn))
    1c4e:	e9 e3       	ldi	r30, 0x39	; 57
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	28 2f       	mov	r18, r24
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	88 2f       	mov	r24, r24
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	a9 01       	movw	r20, r18
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <GPIO_ReadPin+0x7e>
    1c62:	55 95       	asr	r21
    1c64:	47 95       	ror	r20
    1c66:	8a 95       	dec	r24
    1c68:	e2 f7       	brpl	.-8      	; 0x1c62 <GPIO_ReadPin+0x7a>
    1c6a:	ca 01       	movw	r24, r20
    1c6c:	81 70       	andi	r24, 0x01	; 1
    1c6e:	90 70       	andi	r25, 0x00	; 0
    1c70:	88 23       	and	r24, r24
    1c72:	19 f0       	breq	.+6      	; 0x1c7a <GPIO_ReadPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	89 83       	std	Y+1, r24	; 0x01
    1c78:	49 c0       	rjmp	.+146    	; 0x1d0c <GPIO_ReadPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c7a:	19 82       	std	Y+1, r1	; 0x01
    1c7c:	47 c0       	rjmp	.+142    	; 0x1d0c <GPIO_ReadPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB_REG,PINn))
    1c7e:	e6 e3       	ldi	r30, 0x36	; 54
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	28 2f       	mov	r18, r24
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8a:	88 2f       	mov	r24, r24
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	a9 01       	movw	r20, r18
    1c90:	02 c0       	rjmp	.+4      	; 0x1c96 <GPIO_ReadPin+0xae>
    1c92:	55 95       	asr	r21
    1c94:	47 95       	ror	r20
    1c96:	8a 95       	dec	r24
    1c98:	e2 f7       	brpl	.-8      	; 0x1c92 <GPIO_ReadPin+0xaa>
    1c9a:	ca 01       	movw	r24, r20
    1c9c:	81 70       	andi	r24, 0x01	; 1
    1c9e:	90 70       	andi	r25, 0x00	; 0
    1ca0:	88 23       	and	r24, r24
    1ca2:	19 f0       	breq	.+6      	; 0x1caa <GPIO_ReadPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	89 83       	std	Y+1, r24	; 0x01
    1ca8:	31 c0       	rjmp	.+98     	; 0x1d0c <GPIO_ReadPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1caa:	19 82       	std	Y+1, r1	; 0x01
    1cac:	2f c0       	rjmp	.+94     	; 0x1d0c <GPIO_ReadPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC_REG,PINn))
    1cae:	e3 e3       	ldi	r30, 0x33	; 51
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	88 2f       	mov	r24, r24
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	a9 01       	movw	r20, r18
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <GPIO_ReadPin+0xde>
    1cc2:	55 95       	asr	r21
    1cc4:	47 95       	ror	r20
    1cc6:	8a 95       	dec	r24
    1cc8:	e2 f7       	brpl	.-8      	; 0x1cc2 <GPIO_ReadPin+0xda>
    1cca:	ca 01       	movw	r24, r20
    1ccc:	81 70       	andi	r24, 0x01	; 1
    1cce:	90 70       	andi	r25, 0x00	; 0
    1cd0:	88 23       	and	r24, r24
    1cd2:	19 f0       	breq	.+6      	; 0x1cda <GPIO_ReadPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	89 83       	std	Y+1, r24	; 0x01
    1cd8:	19 c0       	rjmp	.+50     	; 0x1d0c <GPIO_ReadPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1cda:	19 82       	std	Y+1, r1	; 0x01
    1cdc:	17 c0       	rjmp	.+46     	; 0x1d0c <GPIO_ReadPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND_REG,PINn))
    1cde:	e0 e3       	ldi	r30, 0x30	; 48
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	28 2f       	mov	r18, r24
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	88 2f       	mov	r24, r24
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	a9 01       	movw	r20, r18
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <GPIO_ReadPin+0x10e>
    1cf2:	55 95       	asr	r21
    1cf4:	47 95       	ror	r20
    1cf6:	8a 95       	dec	r24
    1cf8:	e2 f7       	brpl	.-8      	; 0x1cf2 <GPIO_ReadPin+0x10a>
    1cfa:	ca 01       	movw	r24, r20
    1cfc:	81 70       	andi	r24, 0x01	; 1
    1cfe:	90 70       	andi	r25, 0x00	; 0
    1d00:	88 23       	and	r24, r24
    1d02:	19 f0       	breq	.+6      	; 0x1d0a <GPIO_ReadPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	89 83       	std	Y+1, r24	; 0x01
    1d08:	01 c0       	rjmp	.+2      	; 0x1d0c <GPIO_ReadPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d0a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	0f 90       	pop	r0
    1d18:	cf 91       	pop	r28
    1d1a:	df 91       	pop	r29
    1d1c:	08 95       	ret

00001d1e <GPIO_WritePin>:
 [Args]: PORTn_ID(n=A,B,C,D) and PINn_ID(n =0...7) and Level (logic_low or logic_high)
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 OR PINn >= 8 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_WritePin(uint8 PORTn, uint8 PINn, STD_LevelType level)
{
    1d1e:	df 93       	push	r29
    1d20:	cf 93       	push	r28
    1d22:	00 d0       	rcall	.+0      	; 0x1d24 <GPIO_WritePin+0x6>
    1d24:	00 d0       	rcall	.+0      	; 0x1d26 <GPIO_WritePin+0x8>
    1d26:	0f 92       	push	r0
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
    1d2c:	89 83       	std	Y+1, r24	; 0x01
    1d2e:	6a 83       	std	Y+2, r22	; 0x02
    1d30:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((PORTn >= NUM_OF_PORTS) || (PINn >= NUM_OF_PINS_PER_PORT))
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	84 30       	cpi	r24, 0x04	; 4
    1d36:	08 f0       	brcs	.+2      	; 0x1d3a <GPIO_WritePin+0x1c>
    1d38:	d5 c0       	rjmp	.+426    	; 0x1ee4 <GPIO_WritePin+0x1c6>
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	88 30       	cpi	r24, 0x08	; 8
    1d3e:	08 f0       	brcs	.+2      	; 0x1d42 <GPIO_WritePin+0x24>
    1d40:	d1 c0       	rjmp	.+418    	; 0x1ee4 <GPIO_WritePin+0x1c6>
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		/* Write the pin value as required */
		switch(PORTn)
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	28 2f       	mov	r18, r24
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	3d 83       	std	Y+5, r19	; 0x05
    1d4a:	2c 83       	std	Y+4, r18	; 0x04
    1d4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d50:	81 30       	cpi	r24, 0x01	; 1
    1d52:	91 05       	cpc	r25, r1
    1d54:	09 f4       	brne	.+2      	; 0x1d58 <GPIO_WritePin+0x3a>
    1d56:	43 c0       	rjmp	.+134    	; 0x1dde <GPIO_WritePin+0xc0>
    1d58:	2c 81       	ldd	r18, Y+4	; 0x04
    1d5a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d5c:	22 30       	cpi	r18, 0x02	; 2
    1d5e:	31 05       	cpc	r19, r1
    1d60:	2c f4       	brge	.+10     	; 0x1d6c <GPIO_WritePin+0x4e>
    1d62:	8c 81       	ldd	r24, Y+4	; 0x04
    1d64:	9d 81       	ldd	r25, Y+5	; 0x05
    1d66:	00 97       	sbiw	r24, 0x00	; 0
    1d68:	71 f0       	breq	.+28     	; 0x1d86 <GPIO_WritePin+0x68>
    1d6a:	bc c0       	rjmp	.+376    	; 0x1ee4 <GPIO_WritePin+0x1c6>
    1d6c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d6e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d70:	22 30       	cpi	r18, 0x02	; 2
    1d72:	31 05       	cpc	r19, r1
    1d74:	09 f4       	brne	.+2      	; 0x1d78 <GPIO_WritePin+0x5a>
    1d76:	5f c0       	rjmp	.+190    	; 0x1e36 <GPIO_WritePin+0x118>
    1d78:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d7c:	83 30       	cpi	r24, 0x03	; 3
    1d7e:	91 05       	cpc	r25, r1
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <GPIO_WritePin+0x66>
    1d82:	85 c0       	rjmp	.+266    	; 0x1e8e <GPIO_WritePin+0x170>
    1d84:	af c0       	rjmp	.+350    	; 0x1ee4 <GPIO_WritePin+0x1c6>
		{
		case PORTA_ID:
			if(level == LOGIC_HIGH)
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	81 30       	cpi	r24, 0x01	; 1
    1d8a:	a1 f4       	brne	.+40     	; 0x1db4 <GPIO_WritePin+0x96>
			{
				SET_BIT(PORTA_REG,PINn);
    1d8c:	ab e3       	ldi	r26, 0x3B	; 59
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	eb e3       	ldi	r30, 0x3B	; 59
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	48 2f       	mov	r20, r24
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	02 2e       	mov	r0, r18
    1da4:	02 c0       	rjmp	.+4      	; 0x1daa <GPIO_WritePin+0x8c>
    1da6:	88 0f       	add	r24, r24
    1da8:	99 1f       	adc	r25, r25
    1daa:	0a 94       	dec	r0
    1dac:	e2 f7       	brpl	.-8      	; 0x1da6 <GPIO_WritePin+0x88>
    1dae:	84 2b       	or	r24, r20
    1db0:	8c 93       	st	X, r24
    1db2:	98 c0       	rjmp	.+304    	; 0x1ee4 <GPIO_WritePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA_REG,PINn);
    1db4:	ab e3       	ldi	r26, 0x3B	; 59
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	eb e3       	ldi	r30, 0x3B	; 59
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	48 2f       	mov	r20, r24
    1dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc2:	28 2f       	mov	r18, r24
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	02 2e       	mov	r0, r18
    1dcc:	02 c0       	rjmp	.+4      	; 0x1dd2 <GPIO_WritePin+0xb4>
    1dce:	88 0f       	add	r24, r24
    1dd0:	99 1f       	adc	r25, r25
    1dd2:	0a 94       	dec	r0
    1dd4:	e2 f7       	brpl	.-8      	; 0x1dce <GPIO_WritePin+0xb0>
    1dd6:	80 95       	com	r24
    1dd8:	84 23       	and	r24, r20
    1dda:	8c 93       	st	X, r24
    1ddc:	83 c0       	rjmp	.+262    	; 0x1ee4 <GPIO_WritePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(level == LOGIC_HIGH)
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	81 30       	cpi	r24, 0x01	; 1
    1de2:	a1 f4       	brne	.+40     	; 0x1e0c <GPIO_WritePin+0xee>
			{
				SET_BIT(PORTB_REG,PINn);
    1de4:	a8 e3       	ldi	r26, 0x38	; 56
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e8 e3       	ldi	r30, 0x38	; 56
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	48 2f       	mov	r20, r24
    1df0:	8a 81       	ldd	r24, Y+2	; 0x02
    1df2:	28 2f       	mov	r18, r24
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	02 2e       	mov	r0, r18
    1dfc:	02 c0       	rjmp	.+4      	; 0x1e02 <GPIO_WritePin+0xe4>
    1dfe:	88 0f       	add	r24, r24
    1e00:	99 1f       	adc	r25, r25
    1e02:	0a 94       	dec	r0
    1e04:	e2 f7       	brpl	.-8      	; 0x1dfe <GPIO_WritePin+0xe0>
    1e06:	84 2b       	or	r24, r20
    1e08:	8c 93       	st	X, r24
    1e0a:	6c c0       	rjmp	.+216    	; 0x1ee4 <GPIO_WritePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB_REG,PINn);
    1e0c:	a8 e3       	ldi	r26, 0x38	; 56
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	e8 e3       	ldi	r30, 0x38	; 56
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	48 2f       	mov	r20, r24
    1e18:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1a:	28 2f       	mov	r18, r24
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	02 2e       	mov	r0, r18
    1e24:	02 c0       	rjmp	.+4      	; 0x1e2a <GPIO_WritePin+0x10c>
    1e26:	88 0f       	add	r24, r24
    1e28:	99 1f       	adc	r25, r25
    1e2a:	0a 94       	dec	r0
    1e2c:	e2 f7       	brpl	.-8      	; 0x1e26 <GPIO_WritePin+0x108>
    1e2e:	80 95       	com	r24
    1e30:	84 23       	and	r24, r20
    1e32:	8c 93       	st	X, r24
    1e34:	57 c0       	rjmp	.+174    	; 0x1ee4 <GPIO_WritePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(level == LOGIC_HIGH)
    1e36:	8b 81       	ldd	r24, Y+3	; 0x03
    1e38:	81 30       	cpi	r24, 0x01	; 1
    1e3a:	a1 f4       	brne	.+40     	; 0x1e64 <GPIO_WritePin+0x146>
			{
				SET_BIT(PORTC_REG,PINn);
    1e3c:	a5 e3       	ldi	r26, 0x35	; 53
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	e5 e3       	ldi	r30, 0x35	; 53
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	48 2f       	mov	r20, r24
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	28 2f       	mov	r18, r24
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	02 2e       	mov	r0, r18
    1e54:	02 c0       	rjmp	.+4      	; 0x1e5a <GPIO_WritePin+0x13c>
    1e56:	88 0f       	add	r24, r24
    1e58:	99 1f       	adc	r25, r25
    1e5a:	0a 94       	dec	r0
    1e5c:	e2 f7       	brpl	.-8      	; 0x1e56 <GPIO_WritePin+0x138>
    1e5e:	84 2b       	or	r24, r20
    1e60:	8c 93       	st	X, r24
    1e62:	40 c0       	rjmp	.+128    	; 0x1ee4 <GPIO_WritePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC_REG,PINn);
    1e64:	a5 e3       	ldi	r26, 0x35	; 53
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	e5 e3       	ldi	r30, 0x35	; 53
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	48 2f       	mov	r20, r24
    1e70:	8a 81       	ldd	r24, Y+2	; 0x02
    1e72:	28 2f       	mov	r18, r24
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	02 2e       	mov	r0, r18
    1e7c:	02 c0       	rjmp	.+4      	; 0x1e82 <GPIO_WritePin+0x164>
    1e7e:	88 0f       	add	r24, r24
    1e80:	99 1f       	adc	r25, r25
    1e82:	0a 94       	dec	r0
    1e84:	e2 f7       	brpl	.-8      	; 0x1e7e <GPIO_WritePin+0x160>
    1e86:	80 95       	com	r24
    1e88:	84 23       	and	r24, r20
    1e8a:	8c 93       	st	X, r24
    1e8c:	2b c0       	rjmp	.+86     	; 0x1ee4 <GPIO_WritePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(level == LOGIC_HIGH)
    1e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e90:	81 30       	cpi	r24, 0x01	; 1
    1e92:	a1 f4       	brne	.+40     	; 0x1ebc <GPIO_WritePin+0x19e>
			{
				SET_BIT(PORTD_REG,PINn);
    1e94:	a2 e3       	ldi	r26, 0x32	; 50
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	e2 e3       	ldi	r30, 0x32	; 50
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	48 2f       	mov	r20, r24
    1ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea2:	28 2f       	mov	r18, r24
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	02 2e       	mov	r0, r18
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <GPIO_WritePin+0x194>
    1eae:	88 0f       	add	r24, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	0a 94       	dec	r0
    1eb4:	e2 f7       	brpl	.-8      	; 0x1eae <GPIO_WritePin+0x190>
    1eb6:	84 2b       	or	r24, r20
    1eb8:	8c 93       	st	X, r24
    1eba:	14 c0       	rjmp	.+40     	; 0x1ee4 <GPIO_WritePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD_REG,PINn);
    1ebc:	a2 e3       	ldi	r26, 0x32	; 50
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	e2 e3       	ldi	r30, 0x32	; 50
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	48 2f       	mov	r20, r24
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eca:	28 2f       	mov	r18, r24
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	02 2e       	mov	r0, r18
    1ed4:	02 c0       	rjmp	.+4      	; 0x1eda <GPIO_WritePin+0x1bc>
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	0a 94       	dec	r0
    1edc:	e2 f7       	brpl	.-8      	; 0x1ed6 <GPIO_WritePin+0x1b8>
    1ede:	80 95       	com	r24
    1ee0:	84 23       	and	r24, r20
    1ee2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	08 95       	ret

00001ef4 <GPIO_FlipPin>:
 [Args]: PORTn_ID(n=A,B,C,D) and PINn_ID(n =0...7)
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 OR PINn >= 8 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_FlipPin(uint8 PORTn, uint8 PINn)
{
    1ef4:	df 93       	push	r29
    1ef6:	cf 93       	push	r28
    1ef8:	00 d0       	rcall	.+0      	; 0x1efa <GPIO_FlipPin+0x6>
    1efa:	00 d0       	rcall	.+0      	; 0x1efc <GPIO_FlipPin+0x8>
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    1f00:	89 83       	std	Y+1, r24	; 0x01
    1f02:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((PORTn >= NUM_OF_PORTS) || (PINn >= NUM_OF_PINS_PER_PORT))
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	84 30       	cpi	r24, 0x04	; 4
    1f08:	08 f0       	brcs	.+2      	; 0x1f0c <GPIO_FlipPin+0x18>
    1f0a:	72 c0       	rjmp	.+228    	; 0x1ff0 <GPIO_FlipPin+0xfc>
    1f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0e:	88 30       	cpi	r24, 0x08	; 8
    1f10:	08 f0       	brcs	.+2      	; 0x1f14 <GPIO_FlipPin+0x20>
    1f12:	6e c0       	rjmp	.+220    	; 0x1ff0 <GPIO_FlipPin+0xfc>
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		/* Flip the pin value as required */
		switch(PORTn)
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	28 2f       	mov	r18, r24
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	3c 83       	std	Y+4, r19	; 0x04
    1f1c:	2b 83       	std	Y+3, r18	; 0x03
    1f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f20:	9c 81       	ldd	r25, Y+4	; 0x04
    1f22:	81 30       	cpi	r24, 0x01	; 1
    1f24:	91 05       	cpc	r25, r1
    1f26:	49 f1       	breq	.+82     	; 0x1f7a <GPIO_FlipPin+0x86>
    1f28:	2b 81       	ldd	r18, Y+3	; 0x03
    1f2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f2c:	22 30       	cpi	r18, 0x02	; 2
    1f2e:	31 05       	cpc	r19, r1
    1f30:	2c f4       	brge	.+10     	; 0x1f3c <GPIO_FlipPin+0x48>
    1f32:	8b 81       	ldd	r24, Y+3	; 0x03
    1f34:	9c 81       	ldd	r25, Y+4	; 0x04
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	61 f0       	breq	.+24     	; 0x1f52 <GPIO_FlipPin+0x5e>
    1f3a:	5a c0       	rjmp	.+180    	; 0x1ff0 <GPIO_FlipPin+0xfc>
    1f3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f3e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f40:	22 30       	cpi	r18, 0x02	; 2
    1f42:	31 05       	cpc	r19, r1
    1f44:	71 f1       	breq	.+92     	; 0x1fa2 <GPIO_FlipPin+0xae>
    1f46:	8b 81       	ldd	r24, Y+3	; 0x03
    1f48:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4a:	83 30       	cpi	r24, 0x03	; 3
    1f4c:	91 05       	cpc	r25, r1
    1f4e:	e9 f1       	breq	.+122    	; 0x1fca <GPIO_FlipPin+0xd6>
    1f50:	4f c0       	rjmp	.+158    	; 0x1ff0 <GPIO_FlipPin+0xfc>
		{
		case PORTA_ID:
			TOGGLE_BIT(PORTA_REG,PINn);
    1f52:	ab e3       	ldi	r26, 0x3B	; 59
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	eb e3       	ldi	r30, 0x3B	; 59
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	48 2f       	mov	r20, r24
    1f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f60:	28 2f       	mov	r18, r24
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	02 2e       	mov	r0, r18
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <GPIO_FlipPin+0x7c>
    1f6c:	88 0f       	add	r24, r24
    1f6e:	99 1f       	adc	r25, r25
    1f70:	0a 94       	dec	r0
    1f72:	e2 f7       	brpl	.-8      	; 0x1f6c <GPIO_FlipPin+0x78>
    1f74:	84 27       	eor	r24, r20
    1f76:	8c 93       	st	X, r24
    1f78:	3b c0       	rjmp	.+118    	; 0x1ff0 <GPIO_FlipPin+0xfc>
			break;
		case PORTB_ID:
			TOGGLE_BIT(PORTB_REG,PINn);
    1f7a:	a8 e3       	ldi	r26, 0x38	; 56
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	e8 e3       	ldi	r30, 0x38	; 56
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	48 2f       	mov	r20, r24
    1f86:	8a 81       	ldd	r24, Y+2	; 0x02
    1f88:	28 2f       	mov	r18, r24
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	02 2e       	mov	r0, r18
    1f92:	02 c0       	rjmp	.+4      	; 0x1f98 <GPIO_FlipPin+0xa4>
    1f94:	88 0f       	add	r24, r24
    1f96:	99 1f       	adc	r25, r25
    1f98:	0a 94       	dec	r0
    1f9a:	e2 f7       	brpl	.-8      	; 0x1f94 <GPIO_FlipPin+0xa0>
    1f9c:	84 27       	eor	r24, r20
    1f9e:	8c 93       	st	X, r24
    1fa0:	27 c0       	rjmp	.+78     	; 0x1ff0 <GPIO_FlipPin+0xfc>
			break;
		case PORTC_ID:
			TOGGLE_BIT(PORTC_REG,PINn);
    1fa2:	a5 e3       	ldi	r26, 0x35	; 53
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	e5 e3       	ldi	r30, 0x35	; 53
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	48 2f       	mov	r20, r24
    1fae:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb0:	28 2f       	mov	r18, r24
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	02 2e       	mov	r0, r18
    1fba:	02 c0       	rjmp	.+4      	; 0x1fc0 <GPIO_FlipPin+0xcc>
    1fbc:	88 0f       	add	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	0a 94       	dec	r0
    1fc2:	e2 f7       	brpl	.-8      	; 0x1fbc <GPIO_FlipPin+0xc8>
    1fc4:	84 27       	eor	r24, r20
    1fc6:	8c 93       	st	X, r24
    1fc8:	13 c0       	rjmp	.+38     	; 0x1ff0 <GPIO_FlipPin+0xfc>
			break;
		case PORTD_ID:
			TOGGLE_BIT(PORTD_REG,PINn);
    1fca:	a2 e3       	ldi	r26, 0x32	; 50
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	e2 e3       	ldi	r30, 0x32	; 50
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	48 2f       	mov	r20, r24
    1fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd8:	28 2f       	mov	r18, r24
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	02 2e       	mov	r0, r18
    1fe2:	02 c0       	rjmp	.+4      	; 0x1fe8 <GPIO_FlipPin+0xf4>
    1fe4:	88 0f       	add	r24, r24
    1fe6:	99 1f       	adc	r25, r25
    1fe8:	0a 94       	dec	r0
    1fea:	e2 f7       	brpl	.-8      	; 0x1fe4 <GPIO_FlipPin+0xf0>
    1fec:	84 27       	eor	r24, r20
    1fee:	8c 93       	st	X, r24
			break;
		}
	}
}
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	cf 91       	pop	r28
    1ffa:	df 91       	pop	r29
    1ffc:	08 95       	ret

00001ffe <GPIO_SetPortDir>:
 [Args]: PORTn_ID(n=A,B,C,D) and Direction (input_port or output_port)
 [RUTURN]: Void
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_SetPortDir(uint8 PORTn, GPIO_PortDirection Dir)
{
    1ffe:	df 93       	push	r29
    2000:	cf 93       	push	r28
    2002:	00 d0       	rcall	.+0      	; 0x2004 <GPIO_SetPortDir+0x6>
    2004:	00 d0       	rcall	.+0      	; 0x2006 <GPIO_SetPortDir+0x8>
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    200e:	89 81       	ldd	r24, Y+1	; 0x01
    2010:	84 30       	cpi	r24, 0x04	; 4
    2012:	90 f5       	brcc	.+100    	; 0x2078 <GPIO_SetPortDir+0x7a>
	{
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		switch(PORTn)
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	28 2f       	mov	r18, r24
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	3c 83       	std	Y+4, r19	; 0x04
    201c:	2b 83       	std	Y+3, r18	; 0x03
    201e:	8b 81       	ldd	r24, Y+3	; 0x03
    2020:	9c 81       	ldd	r25, Y+4	; 0x04
    2022:	81 30       	cpi	r24, 0x01	; 1
    2024:	91 05       	cpc	r25, r1
    2026:	d1 f0       	breq	.+52     	; 0x205c <GPIO_SetPortDir+0x5e>
    2028:	2b 81       	ldd	r18, Y+3	; 0x03
    202a:	3c 81       	ldd	r19, Y+4	; 0x04
    202c:	22 30       	cpi	r18, 0x02	; 2
    202e:	31 05       	cpc	r19, r1
    2030:	2c f4       	brge	.+10     	; 0x203c <GPIO_SetPortDir+0x3e>
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	9c 81       	ldd	r25, Y+4	; 0x04
    2036:	00 97       	sbiw	r24, 0x00	; 0
    2038:	61 f0       	breq	.+24     	; 0x2052 <GPIO_SetPortDir+0x54>
    203a:	1e c0       	rjmp	.+60     	; 0x2078 <GPIO_SetPortDir+0x7a>
    203c:	2b 81       	ldd	r18, Y+3	; 0x03
    203e:	3c 81       	ldd	r19, Y+4	; 0x04
    2040:	22 30       	cpi	r18, 0x02	; 2
    2042:	31 05       	cpc	r19, r1
    2044:	81 f0       	breq	.+32     	; 0x2066 <GPIO_SetPortDir+0x68>
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	9c 81       	ldd	r25, Y+4	; 0x04
    204a:	83 30       	cpi	r24, 0x03	; 3
    204c:	91 05       	cpc	r25, r1
    204e:	81 f0       	breq	.+32     	; 0x2070 <GPIO_SetPortDir+0x72>
    2050:	13 c0       	rjmp	.+38     	; 0x2078 <GPIO_SetPortDir+0x7a>
		{
		case PORTA_ID:
			DDRA_REG = Dir;
    2052:	ea e3       	ldi	r30, 0x3A	; 58
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	8a 81       	ldd	r24, Y+2	; 0x02
    2058:	80 83       	st	Z, r24
    205a:	0e c0       	rjmp	.+28     	; 0x2078 <GPIO_SetPortDir+0x7a>
			break;
		case PORTB_ID:
			DDRB_REG = Dir;
    205c:	e7 e3       	ldi	r30, 0x37	; 55
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	8a 81       	ldd	r24, Y+2	; 0x02
    2062:	80 83       	st	Z, r24
    2064:	09 c0       	rjmp	.+18     	; 0x2078 <GPIO_SetPortDir+0x7a>
			break;
		case PORTC_ID:
			DDRC_REG = Dir;
    2066:	e4 e3       	ldi	r30, 0x34	; 52
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	80 83       	st	Z, r24
    206e:	04 c0       	rjmp	.+8      	; 0x2078 <GPIO_SetPortDir+0x7a>
			break;
		case PORTD_ID:
			DDRD_REG = Dir;
    2070:	e1 e3       	ldi	r30, 0x31	; 49
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	8a 81       	ldd	r24, Y+2	; 0x02
    2076:	80 83       	st	Z, r24
			break;
		}
	}
}
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	cf 91       	pop	r28
    2082:	df 91       	pop	r29
    2084:	08 95       	ret

00002086 <GPIO_ReadPort>:
 [Args]: PORTn_ID(n=A,B,C,D)
 [RUTURN]: uint8
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
uint8 GPIO_ReadPort(uint8 PORTn)
{
    2086:	df 93       	push	r29
    2088:	cf 93       	push	r28
    208a:	00 d0       	rcall	.+0      	; 0x208c <GPIO_ReadPort+0x6>
    208c:	00 d0       	rcall	.+0      	; 0x208e <GPIO_ReadPort+0x8>
    208e:	cd b7       	in	r28, 0x3d	; 61
    2090:	de b7       	in	r29, 0x3e	; 62
    2092:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_value = LOGIC_LOW;
    2094:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    2096:	8a 81       	ldd	r24, Y+2	; 0x02
    2098:	84 30       	cpi	r24, 0x04	; 4
    209a:	90 f5       	brcc	.+100    	; 0x2100 <GPIO_ReadPort+0x7a>
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		/* Read the port value as required */
		switch(PORTn)
    209c:	8a 81       	ldd	r24, Y+2	; 0x02
    209e:	28 2f       	mov	r18, r24
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	3c 83       	std	Y+4, r19	; 0x04
    20a4:	2b 83       	std	Y+3, r18	; 0x03
    20a6:	8b 81       	ldd	r24, Y+3	; 0x03
    20a8:	9c 81       	ldd	r25, Y+4	; 0x04
    20aa:	81 30       	cpi	r24, 0x01	; 1
    20ac:	91 05       	cpc	r25, r1
    20ae:	d1 f0       	breq	.+52     	; 0x20e4 <GPIO_ReadPort+0x5e>
    20b0:	2b 81       	ldd	r18, Y+3	; 0x03
    20b2:	3c 81       	ldd	r19, Y+4	; 0x04
    20b4:	22 30       	cpi	r18, 0x02	; 2
    20b6:	31 05       	cpc	r19, r1
    20b8:	2c f4       	brge	.+10     	; 0x20c4 <GPIO_ReadPort+0x3e>
    20ba:	8b 81       	ldd	r24, Y+3	; 0x03
    20bc:	9c 81       	ldd	r25, Y+4	; 0x04
    20be:	00 97       	sbiw	r24, 0x00	; 0
    20c0:	61 f0       	breq	.+24     	; 0x20da <GPIO_ReadPort+0x54>
    20c2:	1e c0       	rjmp	.+60     	; 0x2100 <GPIO_ReadPort+0x7a>
    20c4:	2b 81       	ldd	r18, Y+3	; 0x03
    20c6:	3c 81       	ldd	r19, Y+4	; 0x04
    20c8:	22 30       	cpi	r18, 0x02	; 2
    20ca:	31 05       	cpc	r19, r1
    20cc:	81 f0       	breq	.+32     	; 0x20ee <GPIO_ReadPort+0x68>
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
    20d0:	9c 81       	ldd	r25, Y+4	; 0x04
    20d2:	83 30       	cpi	r24, 0x03	; 3
    20d4:	91 05       	cpc	r25, r1
    20d6:	81 f0       	breq	.+32     	; 0x20f8 <GPIO_ReadPort+0x72>
    20d8:	13 c0       	rjmp	.+38     	; 0x2100 <GPIO_ReadPort+0x7a>
		{
		case PORTA_ID:
			port_value = PINA_REG;
    20da:	e9 e3       	ldi	r30, 0x39	; 57
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	89 83       	std	Y+1, r24	; 0x01
    20e2:	0e c0       	rjmp	.+28     	; 0x2100 <GPIO_ReadPort+0x7a>
			break;
		case PORTB_ID:
			port_value = PINB_REG;
    20e4:	e6 e3       	ldi	r30, 0x36	; 54
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	80 81       	ld	r24, Z
    20ea:	89 83       	std	Y+1, r24	; 0x01
    20ec:	09 c0       	rjmp	.+18     	; 0x2100 <GPIO_ReadPort+0x7a>
			break;
		case PORTC_ID:
			port_value = PINC_REG;
    20ee:	e3 e3       	ldi	r30, 0x33	; 51
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	89 83       	std	Y+1, r24	; 0x01
    20f6:	04 c0       	rjmp	.+8      	; 0x2100 <GPIO_ReadPort+0x7a>
			break;
		case PORTD_ID:
			port_value = PIND_REG;
    20f8:	e0 e3       	ldi	r30, 0x30	; 48
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
    20fe:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return port_value;
    2100:	89 81       	ldd	r24, Y+1	; 0x01
}
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	cf 91       	pop	r28
    210c:	df 91       	pop	r29
    210e:	08 95       	ret

00002110 <GPIO_WritePort>:
 [Args]: PORTn_ID(n=A,B,C,D) and PINn_ID(n =0...7) and Level (logic_low or logic_high)
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_WritePort(uint8 PORTn, uint8 value)
{
    2110:	df 93       	push	r29
    2112:	cf 93       	push	r28
    2114:	00 d0       	rcall	.+0      	; 0x2116 <GPIO_WritePort+0x6>
    2116:	00 d0       	rcall	.+0      	; 0x2118 <GPIO_WritePort+0x8>
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
    211c:	89 83       	std	Y+1, r24	; 0x01
    211e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	84 30       	cpi	r24, 0x04	; 4
    2124:	90 f5       	brcc	.+100    	; 0x218a <GPIO_WritePort+0x7a>
	{
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		switch(PORTn)
    2126:	89 81       	ldd	r24, Y+1	; 0x01
    2128:	28 2f       	mov	r18, r24
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	3c 83       	std	Y+4, r19	; 0x04
    212e:	2b 83       	std	Y+3, r18	; 0x03
    2130:	8b 81       	ldd	r24, Y+3	; 0x03
    2132:	9c 81       	ldd	r25, Y+4	; 0x04
    2134:	81 30       	cpi	r24, 0x01	; 1
    2136:	91 05       	cpc	r25, r1
    2138:	d1 f0       	breq	.+52     	; 0x216e <GPIO_WritePort+0x5e>
    213a:	2b 81       	ldd	r18, Y+3	; 0x03
    213c:	3c 81       	ldd	r19, Y+4	; 0x04
    213e:	22 30       	cpi	r18, 0x02	; 2
    2140:	31 05       	cpc	r19, r1
    2142:	2c f4       	brge	.+10     	; 0x214e <GPIO_WritePort+0x3e>
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	9c 81       	ldd	r25, Y+4	; 0x04
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	61 f0       	breq	.+24     	; 0x2164 <GPIO_WritePort+0x54>
    214c:	1e c0       	rjmp	.+60     	; 0x218a <GPIO_WritePort+0x7a>
    214e:	2b 81       	ldd	r18, Y+3	; 0x03
    2150:	3c 81       	ldd	r19, Y+4	; 0x04
    2152:	22 30       	cpi	r18, 0x02	; 2
    2154:	31 05       	cpc	r19, r1
    2156:	81 f0       	breq	.+32     	; 0x2178 <GPIO_WritePort+0x68>
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	9c 81       	ldd	r25, Y+4	; 0x04
    215c:	83 30       	cpi	r24, 0x03	; 3
    215e:	91 05       	cpc	r25, r1
    2160:	81 f0       	breq	.+32     	; 0x2182 <GPIO_WritePort+0x72>
    2162:	13 c0       	rjmp	.+38     	; 0x218a <GPIO_WritePort+0x7a>
		{
		case PORTA_ID:
			PORTA_REG = value;
    2164:	eb e3       	ldi	r30, 0x3B	; 59
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	8a 81       	ldd	r24, Y+2	; 0x02
    216a:	80 83       	st	Z, r24
    216c:	0e c0       	rjmp	.+28     	; 0x218a <GPIO_WritePort+0x7a>
			break;
		case PORTB_ID:
			PORTB_REG = value;
    216e:	e8 e3       	ldi	r30, 0x38	; 56
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	8a 81       	ldd	r24, Y+2	; 0x02
    2174:	80 83       	st	Z, r24
    2176:	09 c0       	rjmp	.+18     	; 0x218a <GPIO_WritePort+0x7a>
			break;
		case PORTC_ID:
			PORTC_REG = value;
    2178:	e5 e3       	ldi	r30, 0x35	; 53
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	80 83       	st	Z, r24
    2180:	04 c0       	rjmp	.+8      	; 0x218a <GPIO_WritePort+0x7a>
			break;
		case PORTD_ID:
			PORTD_REG = value;
    2182:	e2 e3       	ldi	r30, 0x32	; 50
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	8a 81       	ldd	r24, Y+2	; 0x02
    2188:	80 83       	st	Z, r24
			break;
		}
	}
}
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	cf 91       	pop	r28
    2194:	df 91       	pop	r29
    2196:	08 95       	ret

00002198 <GPIO_FlipPort>:
 [Args]: PORTn_ID(n=A,B,C,D)
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_FlipPort(uint8 PORTn)
{
    2198:	df 93       	push	r29
    219a:	cf 93       	push	r28
    219c:	00 d0       	rcall	.+0      	; 0x219e <GPIO_FlipPort+0x6>
    219e:	0f 92       	push	r0
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
    21a4:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	84 30       	cpi	r24, 0x04	; 4
    21aa:	08 f0       	brcs	.+2      	; 0x21ae <GPIO_FlipPort+0x16>
    21ac:	3e c0       	rjmp	.+124    	; 0x222a <GPIO_FlipPort+0x92>
	{
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		switch(PORTn)
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	28 2f       	mov	r18, r24
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	3b 83       	std	Y+3, r19	; 0x03
    21b6:	2a 83       	std	Y+2, r18	; 0x02
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	9b 81       	ldd	r25, Y+3	; 0x03
    21bc:	81 30       	cpi	r24, 0x01	; 1
    21be:	91 05       	cpc	r25, r1
    21c0:	e9 f0       	breq	.+58     	; 0x21fc <GPIO_FlipPort+0x64>
    21c2:	2a 81       	ldd	r18, Y+2	; 0x02
    21c4:	3b 81       	ldd	r19, Y+3	; 0x03
    21c6:	22 30       	cpi	r18, 0x02	; 2
    21c8:	31 05       	cpc	r19, r1
    21ca:	2c f4       	brge	.+10     	; 0x21d6 <GPIO_FlipPort+0x3e>
    21cc:	8a 81       	ldd	r24, Y+2	; 0x02
    21ce:	9b 81       	ldd	r25, Y+3	; 0x03
    21d0:	00 97       	sbiw	r24, 0x00	; 0
    21d2:	61 f0       	breq	.+24     	; 0x21ec <GPIO_FlipPort+0x54>
    21d4:	2a c0       	rjmp	.+84     	; 0x222a <GPIO_FlipPort+0x92>
    21d6:	2a 81       	ldd	r18, Y+2	; 0x02
    21d8:	3b 81       	ldd	r19, Y+3	; 0x03
    21da:	22 30       	cpi	r18, 0x02	; 2
    21dc:	31 05       	cpc	r19, r1
    21de:	b1 f0       	breq	.+44     	; 0x220c <GPIO_FlipPort+0x74>
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	9b 81       	ldd	r25, Y+3	; 0x03
    21e4:	83 30       	cpi	r24, 0x03	; 3
    21e6:	91 05       	cpc	r25, r1
    21e8:	c9 f0       	breq	.+50     	; 0x221c <GPIO_FlipPort+0x84>
    21ea:	1f c0       	rjmp	.+62     	; 0x222a <GPIO_FlipPort+0x92>
		{
		case PORTA_ID:
			PORTA_REG = ~PORTA_REG;
    21ec:	ab e3       	ldi	r26, 0x3B	; 59
    21ee:	b0 e0       	ldi	r27, 0x00	; 0
    21f0:	eb e3       	ldi	r30, 0x3B	; 59
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	80 81       	ld	r24, Z
    21f6:	80 95       	com	r24
    21f8:	8c 93       	st	X, r24
    21fa:	17 c0       	rjmp	.+46     	; 0x222a <GPIO_FlipPort+0x92>
			break;
		case PORTB_ID:
			PORTB_REG = ~PORTB_REG;
    21fc:	a8 e3       	ldi	r26, 0x38	; 56
    21fe:	b0 e0       	ldi	r27, 0x00	; 0
    2200:	e8 e3       	ldi	r30, 0x38	; 56
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	80 95       	com	r24
    2208:	8c 93       	st	X, r24
    220a:	0f c0       	rjmp	.+30     	; 0x222a <GPIO_FlipPort+0x92>
			break;
		case PORTC_ID:
			PORTC_REG = ~PORTC_REG;
    220c:	a5 e3       	ldi	r26, 0x35	; 53
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	e5 e3       	ldi	r30, 0x35	; 53
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	80 95       	com	r24
    2218:	8c 93       	st	X, r24
    221a:	07 c0       	rjmp	.+14     	; 0x222a <GPIO_FlipPort+0x92>
			break;
		case PORTD_ID:
			PORTD_REG = ~PORTD_REG;
    221c:	a2 e3       	ldi	r26, 0x32	; 50
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	e2 e3       	ldi	r30, 0x32	; 50
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	80 95       	com	r24
    2228:	8c 93       	st	X, r24
			break;
		}
	}
}
    222a:	0f 90       	pop	r0
    222c:	0f 90       	pop	r0
    222e:	0f 90       	pop	r0
    2230:	cf 91       	pop	r28
    2232:	df 91       	pop	r29
    2234:	08 95       	ret

00002236 <GPIO_WriteLowNibble>:
 [Args]: PORTn_ID(n=A,B,C,D) and value
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_WriteLowNibble(uint8 PORTn, uint8 value)
{
    2236:	df 93       	push	r29
    2238:	cf 93       	push	r28
    223a:	00 d0       	rcall	.+0      	; 0x223c <GPIO_WriteLowNibble+0x6>
    223c:	00 d0       	rcall	.+0      	; 0x223e <GPIO_WriteLowNibble+0x8>
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
    2242:	89 83       	std	Y+1, r24	; 0x01
    2244:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	84 30       	cpi	r24, 0x04	; 4
    224a:	08 f0       	brcs	.+2      	; 0x224e <GPIO_WriteLowNibble+0x18>
    224c:	61 c0       	rjmp	.+194    	; 0x2310 <GPIO_WriteLowNibble+0xda>
	{
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		value &= 0x0F;
    224e:	8a 81       	ldd	r24, Y+2	; 0x02
    2250:	8f 70       	andi	r24, 0x0F	; 15
    2252:	8a 83       	std	Y+2, r24	; 0x02

		switch(PORTn)
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	28 2f       	mov	r18, r24
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	3c 83       	std	Y+4, r19	; 0x04
    225c:	2b 83       	std	Y+3, r18	; 0x03
    225e:	8b 81       	ldd	r24, Y+3	; 0x03
    2260:	9c 81       	ldd	r25, Y+4	; 0x04
    2262:	81 30       	cpi	r24, 0x01	; 1
    2264:	91 05       	cpc	r25, r1
    2266:	29 f1       	breq	.+74     	; 0x22b2 <GPIO_WriteLowNibble+0x7c>
    2268:	2b 81       	ldd	r18, Y+3	; 0x03
    226a:	3c 81       	ldd	r19, Y+4	; 0x04
    226c:	22 30       	cpi	r18, 0x02	; 2
    226e:	31 05       	cpc	r19, r1
    2270:	2c f4       	brge	.+10     	; 0x227c <GPIO_WriteLowNibble+0x46>
    2272:	8b 81       	ldd	r24, Y+3	; 0x03
    2274:	9c 81       	ldd	r25, Y+4	; 0x04
    2276:	00 97       	sbiw	r24, 0x00	; 0
    2278:	61 f0       	breq	.+24     	; 0x2292 <GPIO_WriteLowNibble+0x5c>
    227a:	4a c0       	rjmp	.+148    	; 0x2310 <GPIO_WriteLowNibble+0xda>
    227c:	2b 81       	ldd	r18, Y+3	; 0x03
    227e:	3c 81       	ldd	r19, Y+4	; 0x04
    2280:	22 30       	cpi	r18, 0x02	; 2
    2282:	31 05       	cpc	r19, r1
    2284:	31 f1       	breq	.+76     	; 0x22d2 <GPIO_WriteLowNibble+0x9c>
    2286:	8b 81       	ldd	r24, Y+3	; 0x03
    2288:	9c 81       	ldd	r25, Y+4	; 0x04
    228a:	83 30       	cpi	r24, 0x03	; 3
    228c:	91 05       	cpc	r25, r1
    228e:	89 f1       	breq	.+98     	; 0x22f2 <GPIO_WriteLowNibble+0xbc>
    2290:	3f c0       	rjmp	.+126    	; 0x2310 <GPIO_WriteLowNibble+0xda>
		{
		case PORTA_ID:
			PORTA_REG &= 0xF0;
    2292:	ab e3       	ldi	r26, 0x3B	; 59
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	eb e3       	ldi	r30, 0x3B	; 59
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	80 7f       	andi	r24, 0xF0	; 240
    229e:	8c 93       	st	X, r24
			PORTA_REG |= value;
    22a0:	ab e3       	ldi	r26, 0x3B	; 59
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	eb e3       	ldi	r30, 0x3B	; 59
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	90 81       	ld	r25, Z
    22aa:	8a 81       	ldd	r24, Y+2	; 0x02
    22ac:	89 2b       	or	r24, r25
    22ae:	8c 93       	st	X, r24
    22b0:	2f c0       	rjmp	.+94     	; 0x2310 <GPIO_WriteLowNibble+0xda>

			break;
		case PORTB_ID:
			PORTB_REG &= 0xF0;
    22b2:	a8 e3       	ldi	r26, 0x38	; 56
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	e8 e3       	ldi	r30, 0x38	; 56
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	80 7f       	andi	r24, 0xF0	; 240
    22be:	8c 93       	st	X, r24
			PORTB_REG |= value;
    22c0:	a8 e3       	ldi	r26, 0x38	; 56
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	e8 e3       	ldi	r30, 0x38	; 56
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	90 81       	ld	r25, Z
    22ca:	8a 81       	ldd	r24, Y+2	; 0x02
    22cc:	89 2b       	or	r24, r25
    22ce:	8c 93       	st	X, r24
    22d0:	1f c0       	rjmp	.+62     	; 0x2310 <GPIO_WriteLowNibble+0xda>
			break;
		case PORTC_ID:
			PORTC_REG &= 0xF0;
    22d2:	a5 e3       	ldi	r26, 0x35	; 53
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	e5 e3       	ldi	r30, 0x35	; 53
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	80 7f       	andi	r24, 0xF0	; 240
    22de:	8c 93       	st	X, r24
			PORTC_REG |= value;
    22e0:	a5 e3       	ldi	r26, 0x35	; 53
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	e5 e3       	ldi	r30, 0x35	; 53
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	90 81       	ld	r25, Z
    22ea:	8a 81       	ldd	r24, Y+2	; 0x02
    22ec:	89 2b       	or	r24, r25
    22ee:	8c 93       	st	X, r24
    22f0:	0f c0       	rjmp	.+30     	; 0x2310 <GPIO_WriteLowNibble+0xda>
			break;
		case PORTD_ID:
			PORTD_REG &= 0xF0;
    22f2:	a2 e3       	ldi	r26, 0x32	; 50
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	e2 e3       	ldi	r30, 0x32	; 50
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
    22fc:	80 7f       	andi	r24, 0xF0	; 240
    22fe:	8c 93       	st	X, r24
			PORTD_REG |= value;
    2300:	a2 e3       	ldi	r26, 0x32	; 50
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	e2 e3       	ldi	r30, 0x32	; 50
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	90 81       	ld	r25, Z
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	89 2b       	or	r24, r25
    230e:	8c 93       	st	X, r24
			break;
		}
	}
}
    2310:	0f 90       	pop	r0
    2312:	0f 90       	pop	r0
    2314:	0f 90       	pop	r0
    2316:	0f 90       	pop	r0
    2318:	cf 91       	pop	r28
    231a:	df 91       	pop	r29
    231c:	08 95       	ret

0000231e <GPIO_WriteHighNibble>:
 [Args]: PORTn_ID(n=A,B,C,D) and value
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_WriteHighNibble(uint8 PORTn, uint8 value)
{
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	00 d0       	rcall	.+0      	; 0x2324 <GPIO_WriteHighNibble+0x6>
    2324:	00 d0       	rcall	.+0      	; 0x2326 <GPIO_WriteHighNibble+0x8>
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
    232a:	89 83       	std	Y+1, r24	; 0x01
    232c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	84 30       	cpi	r24, 0x04	; 4
    2332:	08 f0       	brcs	.+2      	; 0x2336 <GPIO_WriteHighNibble+0x18>
    2334:	61 c0       	rjmp	.+194    	; 0x23f8 <GPIO_WriteHighNibble+0xda>
	{
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		value &= 0xF0;
    2336:	8a 81       	ldd	r24, Y+2	; 0x02
    2338:	80 7f       	andi	r24, 0xF0	; 240
    233a:	8a 83       	std	Y+2, r24	; 0x02

		switch(PORTn)
    233c:	89 81       	ldd	r24, Y+1	; 0x01
    233e:	28 2f       	mov	r18, r24
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	3c 83       	std	Y+4, r19	; 0x04
    2344:	2b 83       	std	Y+3, r18	; 0x03
    2346:	8b 81       	ldd	r24, Y+3	; 0x03
    2348:	9c 81       	ldd	r25, Y+4	; 0x04
    234a:	81 30       	cpi	r24, 0x01	; 1
    234c:	91 05       	cpc	r25, r1
    234e:	29 f1       	breq	.+74     	; 0x239a <GPIO_WriteHighNibble+0x7c>
    2350:	2b 81       	ldd	r18, Y+3	; 0x03
    2352:	3c 81       	ldd	r19, Y+4	; 0x04
    2354:	22 30       	cpi	r18, 0x02	; 2
    2356:	31 05       	cpc	r19, r1
    2358:	2c f4       	brge	.+10     	; 0x2364 <GPIO_WriteHighNibble+0x46>
    235a:	8b 81       	ldd	r24, Y+3	; 0x03
    235c:	9c 81       	ldd	r25, Y+4	; 0x04
    235e:	00 97       	sbiw	r24, 0x00	; 0
    2360:	61 f0       	breq	.+24     	; 0x237a <GPIO_WriteHighNibble+0x5c>
    2362:	4a c0       	rjmp	.+148    	; 0x23f8 <GPIO_WriteHighNibble+0xda>
    2364:	2b 81       	ldd	r18, Y+3	; 0x03
    2366:	3c 81       	ldd	r19, Y+4	; 0x04
    2368:	22 30       	cpi	r18, 0x02	; 2
    236a:	31 05       	cpc	r19, r1
    236c:	31 f1       	breq	.+76     	; 0x23ba <GPIO_WriteHighNibble+0x9c>
    236e:	8b 81       	ldd	r24, Y+3	; 0x03
    2370:	9c 81       	ldd	r25, Y+4	; 0x04
    2372:	83 30       	cpi	r24, 0x03	; 3
    2374:	91 05       	cpc	r25, r1
    2376:	89 f1       	breq	.+98     	; 0x23da <GPIO_WriteHighNibble+0xbc>
    2378:	3f c0       	rjmp	.+126    	; 0x23f8 <GPIO_WriteHighNibble+0xda>
		{
		case PORTA_ID:
			PORTA_REG &= 0x0F;
    237a:	ab e3       	ldi	r26, 0x3B	; 59
    237c:	b0 e0       	ldi	r27, 0x00	; 0
    237e:	eb e3       	ldi	r30, 0x3B	; 59
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	80 81       	ld	r24, Z
    2384:	8f 70       	andi	r24, 0x0F	; 15
    2386:	8c 93       	st	X, r24
			PORTA_REG |= value;
    2388:	ab e3       	ldi	r26, 0x3B	; 59
    238a:	b0 e0       	ldi	r27, 0x00	; 0
    238c:	eb e3       	ldi	r30, 0x3B	; 59
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	90 81       	ld	r25, Z
    2392:	8a 81       	ldd	r24, Y+2	; 0x02
    2394:	89 2b       	or	r24, r25
    2396:	8c 93       	st	X, r24
    2398:	2f c0       	rjmp	.+94     	; 0x23f8 <GPIO_WriteHighNibble+0xda>

			break;
		case PORTB_ID:
			PORTB_REG &= 0x0F;
    239a:	a8 e3       	ldi	r26, 0x38	; 56
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	e8 e3       	ldi	r30, 0x38	; 56
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	8f 70       	andi	r24, 0x0F	; 15
    23a6:	8c 93       	st	X, r24
			PORTB_REG |= value;
    23a8:	a8 e3       	ldi	r26, 0x38	; 56
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	e8 e3       	ldi	r30, 0x38	; 56
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	90 81       	ld	r25, Z
    23b2:	8a 81       	ldd	r24, Y+2	; 0x02
    23b4:	89 2b       	or	r24, r25
    23b6:	8c 93       	st	X, r24
    23b8:	1f c0       	rjmp	.+62     	; 0x23f8 <GPIO_WriteHighNibble+0xda>
			break;
		case PORTC_ID:
			PORTC_REG &= 0x0F;
    23ba:	a5 e3       	ldi	r26, 0x35	; 53
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	e5 e3       	ldi	r30, 0x35	; 53
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	8f 70       	andi	r24, 0x0F	; 15
    23c6:	8c 93       	st	X, r24
			PORTC_REG |= value;
    23c8:	a5 e3       	ldi	r26, 0x35	; 53
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	e5 e3       	ldi	r30, 0x35	; 53
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	90 81       	ld	r25, Z
    23d2:	8a 81       	ldd	r24, Y+2	; 0x02
    23d4:	89 2b       	or	r24, r25
    23d6:	8c 93       	st	X, r24
    23d8:	0f c0       	rjmp	.+30     	; 0x23f8 <GPIO_WriteHighNibble+0xda>
			break;
		case PORTD_ID:
			PORTD_REG &= 0x0F;
    23da:	a2 e3       	ldi	r26, 0x32	; 50
    23dc:	b0 e0       	ldi	r27, 0x00	; 0
    23de:	e2 e3       	ldi	r30, 0x32	; 50
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	8f 70       	andi	r24, 0x0F	; 15
    23e6:	8c 93       	st	X, r24
			PORTD_REG |= value;
    23e8:	a2 e3       	ldi	r26, 0x32	; 50
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	e2 e3       	ldi	r30, 0x32	; 50
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	90 81       	ld	r25, Z
    23f2:	8a 81       	ldd	r24, Y+2	; 0x02
    23f4:	89 2b       	or	r24, r25
    23f6:	8c 93       	st	X, r24
			break;
		}
	}
}
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	0f 90       	pop	r0
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	08 95       	ret

00002406 <EEPROM_init>:
 * [Description]  : Functional responsible for Initialize the external EEPROM 24C16.
 * [Args]  : void
 * [Return]: void
 */
void EEPROM_init(void)
{
    2406:	df 93       	push	r29
    2408:	cf 93       	push	r28
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
	TWI_init();
    240e:	0e 94 96 08 	call	0x112c	; 0x112c <TWI_init>
}
    2412:	cf 91       	pop	r28
    2414:	df 91       	pop	r29
    2416:	08 95       	ret

00002418 <EEPROM_writeByte>:
 * [Args]  : 1- uint16
 * 			 2- uint8
 * [Return]: uint8
 */
uint8 EEPROM_writeByte(uint16 u16addr,uint8 u8data)
{
    2418:	df 93       	push	r29
    241a:	cf 93       	push	r28
    241c:	00 d0       	rcall	.+0      	; 0x241e <EEPROM_writeByte+0x6>
    241e:	00 d0       	rcall	.+0      	; 0x2420 <EEPROM_writeByte+0x8>
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
    2424:	9a 83       	std	Y+2, r25	; 0x02
    2426:	89 83       	std	Y+1, r24	; 0x01
    2428:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	if(TWI_start() != EVENT_OK)
    242a:	0e 94 b3 08 	call	0x1166	; 0x1166 <TWI_start>
    242e:	88 23       	and	r24, r24
    2430:	11 f0       	breq	.+4      	; 0x2436 <EEPROM_writeByte+0x1e>
		return ERROR;
    2432:	1c 82       	std	Y+4, r1	; 0x04
    2434:	29 c0       	rjmp	.+82     	; 0x2488 <EEPROM_writeByte+0x70>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	if(TWI_addressSelect((uint8)(0xA0|((u16addr & 0x0700)>>7)), TWI_WRITE_MODE) != SLA_W_ACK_SENT)
    2436:	89 81       	ldd	r24, Y+1	; 0x01
    2438:	9a 81       	ldd	r25, Y+2	; 0x02
    243a:	80 70       	andi	r24, 0x00	; 0
    243c:	97 70       	andi	r25, 0x07	; 7
    243e:	88 0f       	add	r24, r24
    2440:	89 2f       	mov	r24, r25
    2442:	88 1f       	adc	r24, r24
    2444:	99 0b       	sbc	r25, r25
    2446:	91 95       	neg	r25
    2448:	80 6a       	ori	r24, 0xA0	; 160
    244a:	60 e0       	ldi	r22, 0x00	; 0
    244c:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <TWI_addressSelect>
    2450:	83 30       	cpi	r24, 0x03	; 3
    2452:	11 f0       	breq	.+4      	; 0x2458 <EEPROM_writeByte+0x40>
		return ERROR;
    2454:	1c 82       	std	Y+4, r1	; 0x04
    2456:	18 c0       	rjmp	.+48     	; 0x2488 <EEPROM_writeByte+0x70>

	 /* Send the required memory location address */
	if(TWI_dataEvent((uint8 *)&u16addr, TWI_WRITE_MODE, ACK) != DATA_WRITE_ACK_SENT)
    2458:	ce 01       	movw	r24, r28
    245a:	01 96       	adiw	r24, 0x01	; 1
    245c:	60 e0       	ldi	r22, 0x00	; 0
    245e:	40 e0       	ldi	r20, 0x00	; 0
    2460:	0e 94 2f 09 	call	0x125e	; 0x125e <TWI_dataEvent>
    2464:	88 30       	cpi	r24, 0x08	; 8
    2466:	11 f0       	breq	.+4      	; 0x246c <EEPROM_writeByte+0x54>
		return ERROR;
    2468:	1c 82       	std	Y+4, r1	; 0x04
    246a:	0e c0       	rjmp	.+28     	; 0x2488 <EEPROM_writeByte+0x70>

	/* write byte to eeprom */
	if(TWI_dataEvent(&u8data, TWI_WRITE_MODE, ACK) != DATA_WRITE_ACK_SENT)
    246c:	ce 01       	movw	r24, r28
    246e:	03 96       	adiw	r24, 0x03	; 3
    2470:	60 e0       	ldi	r22, 0x00	; 0
    2472:	40 e0       	ldi	r20, 0x00	; 0
    2474:	0e 94 2f 09 	call	0x125e	; 0x125e <TWI_dataEvent>
    2478:	88 30       	cpi	r24, 0x08	; 8
    247a:	11 f0       	breq	.+4      	; 0x2480 <EEPROM_writeByte+0x68>
		return ERROR;
    247c:	1c 82       	std	Y+4, r1	; 0x04
    247e:	04 c0       	rjmp	.+8      	; 0x2488 <EEPROM_writeByte+0x70>

	/* Send the Stop Bit */
	TWI_stop();
    2480:	0e 94 96 09 	call	0x132c	; 0x132c <TWI_stop>

	return SUCCESS;
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	8c 83       	std	Y+4, r24	; 0x04
    2488:	8c 81       	ldd	r24, Y+4	; 0x04
}
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	cf 91       	pop	r28
    2494:	df 91       	pop	r29
    2496:	08 95       	ret

00002498 <EEPROM_readByte>:
 * [Args]  : 1- uint16
 * 			 2- pointer to uint8
 * [Return]: uint8
 */
uint8 EEPROM_readByte(uint16 u16addr,uint8 *u8data)
{
    2498:	df 93       	push	r29
    249a:	cf 93       	push	r28
    249c:	00 d0       	rcall	.+0      	; 0x249e <EEPROM_readByte+0x6>
    249e:	00 d0       	rcall	.+0      	; 0x24a0 <EEPROM_readByte+0x8>
    24a0:	0f 92       	push	r0
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
    24a6:	9a 83       	std	Y+2, r25	; 0x02
    24a8:	89 83       	std	Y+1, r24	; 0x01
    24aa:	7c 83       	std	Y+4, r23	; 0x04
    24ac:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	if(TWI_start() != EVENT_OK)
    24ae:	0e 94 b3 08 	call	0x1166	; 0x1166 <TWI_start>
    24b2:	88 23       	and	r24, r24
    24b4:	11 f0       	breq	.+4      	; 0x24ba <EEPROM_readByte+0x22>
		return ERROR;
    24b6:	1d 82       	std	Y+5, r1	; 0x05
    24b8:	40 c0       	rjmp	.+128    	; 0x253a <EEPROM_readByte+0xa2>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	if(TWI_addressSelect((uint8)(0xA0|((u16addr & 0x0700)>>7)), TWI_WRITE_MODE) != SLA_W_ACK_SENT)
    24ba:	89 81       	ldd	r24, Y+1	; 0x01
    24bc:	9a 81       	ldd	r25, Y+2	; 0x02
    24be:	80 70       	andi	r24, 0x00	; 0
    24c0:	97 70       	andi	r25, 0x07	; 7
    24c2:	88 0f       	add	r24, r24
    24c4:	89 2f       	mov	r24, r25
    24c6:	88 1f       	adc	r24, r24
    24c8:	99 0b       	sbc	r25, r25
    24ca:	91 95       	neg	r25
    24cc:	80 6a       	ori	r24, 0xA0	; 160
    24ce:	60 e0       	ldi	r22, 0x00	; 0
    24d0:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <TWI_addressSelect>
    24d4:	83 30       	cpi	r24, 0x03	; 3
    24d6:	11 f0       	breq	.+4      	; 0x24dc <EEPROM_readByte+0x44>
		return ERROR;
    24d8:	1d 82       	std	Y+5, r1	; 0x05
    24da:	2f c0       	rjmp	.+94     	; 0x253a <EEPROM_readByte+0xa2>

	 /* Send the required memory location address */
	if(TWI_dataEvent((uint8 *)&u16addr, TWI_WRITE_MODE, ACK) != DATA_WRITE_ACK_SENT)
    24dc:	ce 01       	movw	r24, r28
    24de:	01 96       	adiw	r24, 0x01	; 1
    24e0:	60 e0       	ldi	r22, 0x00	; 0
    24e2:	40 e0       	ldi	r20, 0x00	; 0
    24e4:	0e 94 2f 09 	call	0x125e	; 0x125e <TWI_dataEvent>
    24e8:	88 30       	cpi	r24, 0x08	; 8
    24ea:	11 f0       	breq	.+4      	; 0x24f0 <EEPROM_readByte+0x58>
		return ERROR;
    24ec:	1d 82       	std	Y+5, r1	; 0x05
    24ee:	25 c0       	rjmp	.+74     	; 0x253a <EEPROM_readByte+0xa2>

	/* Send the Repeated Start Bit */
	if(TWI_repeatedStart() != EVENT_OK)
    24f0:	0e 94 ce 08 	call	0x119c	; 0x119c <TWI_repeatedStart>
    24f4:	88 23       	and	r24, r24
    24f6:	11 f0       	breq	.+4      	; 0x24fc <EEPROM_readByte+0x64>
		return ERROR;
    24f8:	1d 82       	std	Y+5, r1	; 0x05
    24fa:	1f c0       	rjmp	.+62     	; 0x253a <EEPROM_readByte+0xa2>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=1 (Read) */
	if(TWI_addressSelect((uint8)(0xA0|((u16addr & 0x0700)>>7)), TWI_READ_MODE) != SLA_R_ACK_SENT)
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2500:	80 70       	andi	r24, 0x00	; 0
    2502:	97 70       	andi	r25, 0x07	; 7
    2504:	88 0f       	add	r24, r24
    2506:	89 2f       	mov	r24, r25
    2508:	88 1f       	adc	r24, r24
    250a:	99 0b       	sbc	r25, r25
    250c:	91 95       	neg	r25
    250e:	80 6a       	ori	r24, 0xA0	; 160
    2510:	61 e0       	ldi	r22, 0x01	; 1
    2512:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <TWI_addressSelect>
    2516:	85 30       	cpi	r24, 0x05	; 5
    2518:	11 f0       	breq	.+4      	; 0x251e <EEPROM_readByte+0x86>
		return ERROR;
    251a:	1d 82       	std	Y+5, r1	; 0x05
    251c:	0e c0       	rjmp	.+28     	; 0x253a <EEPROM_readByte+0xa2>

	/* Read Byte from Memory without send ACK */
	if(TWI_dataEvent(u8data, TWI_READ_MODE, NACK) != DATA_READ_NACK_SENT)
    251e:	8b 81       	ldd	r24, Y+3	; 0x03
    2520:	9c 81       	ldd	r25, Y+4	; 0x04
    2522:	61 e0       	ldi	r22, 0x01	; 1
    2524:	41 e0       	ldi	r20, 0x01	; 1
    2526:	0e 94 2f 09 	call	0x125e	; 0x125e <TWI_dataEvent>
    252a:	8c 30       	cpi	r24, 0x0C	; 12
    252c:	11 f0       	breq	.+4      	; 0x2532 <EEPROM_readByte+0x9a>
		return ERROR;
    252e:	1d 82       	std	Y+5, r1	; 0x05
    2530:	04 c0       	rjmp	.+8      	; 0x253a <EEPROM_readByte+0xa2>

	/* Send the Stop Bit */
	TWI_stop();
    2532:	0e 94 96 09 	call	0x132c	; 0x132c <TWI_stop>

	return SUCCESS;
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	8d 83       	std	Y+5, r24	; 0x05
    253a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    253c:	0f 90       	pop	r0
    253e:	0f 90       	pop	r0
    2540:	0f 90       	pop	r0
    2542:	0f 90       	pop	r0
    2544:	0f 90       	pop	r0
    2546:	cf 91       	pop	r28
    2548:	df 91       	pop	r29
    254a:	08 95       	ret

0000254c <DcMotor_Init>:
 * 					 2. Stop the motor at the beginning
 * [Args]  : void
 * [Return]: Void
 */
void DcMotor_Init(void)
{
    254c:	df 93       	push	r29
    254e:	cf 93       	push	r28
    2550:	cd b7       	in	r28, 0x3d	; 61
    2552:	de b7       	in	r29, 0x3e	; 62
	/* Setup the motor pins as output pins */
	GPIO_SetPinDir(DC_MOTOR_PORT_ID, DC_MOTOR_PIN1_ID, pin_output);
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	60 e0       	ldi	r22, 0x00	; 0
    2558:	41 e0       	ldi	r20, 0x01	; 1
    255a:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <GPIO_SetPinDir>
	GPIO_SetPinDir(DC_MOTOR_PORT_ID, DC_MOTOR_PIN2_ID, pin_output);
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	61 e0       	ldi	r22, 0x01	; 1
    2562:	41 e0       	ldi	r20, 0x01	; 1
    2564:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <GPIO_SetPinDir>

	/* Motor is stopped at the beginning */
	GPIO_WritePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN1_ID, logic_low);
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	60 e0       	ldi	r22, 0x00	; 0
    256c:	40 e0       	ldi	r20, 0x00	; 0
    256e:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <GPIO_WritePin>
	GPIO_WritePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN2_ID, logic_low);
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	61 e0       	ldi	r22, 0x01	; 1
    2576:	40 e0       	ldi	r20, 0x00	; 0
    2578:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <GPIO_WritePin>
}
    257c:	cf 91       	pop	r28
    257e:	df 91       	pop	r29
    2580:	08 95       	ret

00002582 <DcMotor_Rotate>:
 * [Args]  : 1- Enum to select State
 * 			 2- uint8 to select Speed
 * [Return]: Void
 */
void DcMotor_Rotate(EN_DcMotorState_t state, uint8 speed)
{
    2582:	df 93       	push	r29
    2584:	cf 93       	push	r28
    2586:	00 d0       	rcall	.+0      	; 0x2588 <DcMotor_Rotate+0x6>
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
    258c:	89 83       	std	Y+1, r24	; 0x01
    258e:	6a 83       	std	Y+2, r22	; 0x02
	/* rotate the DC Motor CW/ or A-CW or stop the motor based on the state input state value */
	if(state == DC_MOTOR_ANTI_CLOCKWISE)
    2590:	89 81       	ldd	r24, Y+1	; 0x01
    2592:	82 30       	cpi	r24, 0x02	; 2
    2594:	59 f4       	brne	.+22     	; 0x25ac <DcMotor_Rotate+0x2a>
	{
		GPIO_WritePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN1_ID, logic_low);
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	60 e0       	ldi	r22, 0x00	; 0
    259a:	40 e0       	ldi	r20, 0x00	; 0
    259c:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <GPIO_WritePin>
		GPIO_WritePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN2_ID, logic_high);
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	61 e0       	ldi	r22, 0x01	; 1
    25a4:	41 e0       	ldi	r20, 0x01	; 1
    25a6:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <GPIO_WritePin>
    25aa:	18 c0       	rjmp	.+48     	; 0x25dc <DcMotor_Rotate+0x5a>

	}
	else if(state == DC_MOTOR_CLOCKWISE)
    25ac:	89 81       	ldd	r24, Y+1	; 0x01
    25ae:	81 30       	cpi	r24, 0x01	; 1
    25b0:	59 f4       	brne	.+22     	; 0x25c8 <DcMotor_Rotate+0x46>
	{
		GPIO_WritePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN1_ID, logic_high);
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	60 e0       	ldi	r22, 0x00	; 0
    25b6:	41 e0       	ldi	r20, 0x01	; 1
    25b8:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <GPIO_WritePin>
		GPIO_WritePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN2_ID, logic_low);
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	61 e0       	ldi	r22, 0x01	; 1
    25c0:	40 e0       	ldi	r20, 0x00	; 0
    25c2:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <GPIO_WritePin>
    25c6:	0a c0       	rjmp	.+20     	; 0x25dc <DcMotor_Rotate+0x5a>
	}
	else
	{
		GPIO_WritePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN1_ID, logic_low);
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	60 e0       	ldi	r22, 0x00	; 0
    25cc:	40 e0       	ldi	r20, 0x00	; 0
    25ce:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <GPIO_WritePin>
		GPIO_WritePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN2_ID, logic_low);
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	61 e0       	ldi	r22, 0x01	; 1
    25d6:	40 e0       	ldi	r20, 0x00	; 0
    25d8:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <GPIO_WritePin>
	}

	/* decimal value for the required motor speed, it should be from 0 --> 100 */
	Timer0_PWM_DutyCycle(speed);
    25dc:	8a 81       	ldd	r24, Y+2	; 0x02
    25de:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <Timer0_PWM_DutyCycle>
}
    25e2:	0f 90       	pop	r0
    25e4:	0f 90       	pop	r0
    25e6:	cf 91       	pop	r28
    25e8:	df 91       	pop	r29
    25ea:	08 95       	ret

000025ec <Buzzer_init>:
 [DISCRIPTION]:	This function is responsible for Sets the direction of buzzer pin as output pin.
 [Args]: void
 [Return]: void
 ---------------------------------------------------------------------------------------*/
void Buzzer_init(void)
{
    25ec:	df 93       	push	r29
    25ee:	cf 93       	push	r28
    25f0:	cd b7       	in	r28, 0x3d	; 61
    25f2:	de b7       	in	r29, 0x3e	; 62
	GPIO_SetPinDir(BUZZER_PORT_ID, BUZZER_PIN_ID, pin_output);
    25f4:	83 e0       	ldi	r24, 0x03	; 3
    25f6:	62 e0       	ldi	r22, 0x02	; 2
    25f8:	41 e0       	ldi	r20, 0x01	; 1
    25fa:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <GPIO_SetPinDir>
	GPIO_WritePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    25fe:	83 e0       	ldi	r24, 0x03	; 3
    2600:	62 e0       	ldi	r22, 0x02	; 2
    2602:	40 e0       	ldi	r20, 0x00	; 0
    2604:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <GPIO_WritePin>
}
    2608:	cf 91       	pop	r28
    260a:	df 91       	pop	r29
    260c:	08 95       	ret

0000260e <Buzzer_on>:
 [DISCRIPTION]:	This function is responsible for Turns on the buzzer.
 [Args]: void
 [Return]: void
 ---------------------------------------------------------------------------------------*/
void Buzzer_on(void)
{
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	cd b7       	in	r28, 0x3d	; 61
    2614:	de b7       	in	r29, 0x3e	; 62
	GPIO_WritePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    2616:	83 e0       	ldi	r24, 0x03	; 3
    2618:	62 e0       	ldi	r22, 0x02	; 2
    261a:	41 e0       	ldi	r20, 0x01	; 1
    261c:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <GPIO_WritePin>
}
    2620:	cf 91       	pop	r28
    2622:	df 91       	pop	r29
    2624:	08 95       	ret

00002626 <Buzzer_off>:
 [DISCRIPTION]:	This function is responsible for Turns off the buzzer.
 [Args]: void
 [Return]: void
 ---------------------------------------------------------------------------------------*/
void Buzzer_off(void)
{
    2626:	df 93       	push	r29
    2628:	cf 93       	push	r28
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
	GPIO_WritePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    262e:	83 e0       	ldi	r24, 0x03	; 3
    2630:	62 e0       	ldi	r22, 0x02	; 2
    2632:	40 e0       	ldi	r20, 0x00	; 0
    2634:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <GPIO_WritePin>
}
    2638:	cf 91       	pop	r28
    263a:	df 91       	pop	r29
    263c:	08 95       	ret

0000263e <APP_init>:
 * [Description]  : This function is responsible for initialize the application.
 * [Args]  : void
 * [Return]: void
 */
void APP_init(void)
{
    263e:	df 93       	push	r29
    2640:	cf 93       	push	r28
    2642:	cd b7       	in	r28, 0x3d	; 61
    2644:	de b7       	in	r29, 0x3e	; 62
	/* Initialize the USART driver */
	USART_Init();
    2646:	0e 94 50 07 	call	0xea0	; 0xea0 <USART_Init>
	/* Initialize the EEPROM driver*/
	EEPROM_init();
    264a:	0e 94 03 12 	call	0x2406	; 0x2406 <EEPROM_init>
	/* Initialize the Buzzer driver*/
	Buzzer_init();
    264e:	0e 94 f6 12 	call	0x25ec	; 0x25ec <Buzzer_init>
	/* Initialize the DC Motor driver*/
	DcMotor_Init();
    2652:	0e 94 a6 12 	call	0x254c	; 0x254c <DcMotor_Init>
	/* setting the callback function */
	TIMER1_SetCallBack(APP_handleTimer);
    2656:	8b e3       	ldi	r24, 0x3B	; 59
    2658:	95 e1       	ldi	r25, 0x15	; 21
    265a:	0e 94 8d 0b 	call	0x171a	; 0x171a <TIMER1_SetCallBack>
	/* Enable (I-bit) */
	GI_Enable();
    265e:	0e 94 ed 0c 	call	0x19da	; 0x19da <GI_Enable>
}
    2662:	cf 91       	pop	r28
    2664:	df 91       	pop	r29
    2666:	08 95       	ret

00002668 <APP_start>:
 * [Description]  : This function is responsible for Starting the application.
 * [Args]  : void
 * [Return]: void
 */
void APP_start(void)
{
    2668:	df 93       	push	r29
    266a:	cf 93       	push	r28
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
    2670:	2b 97       	sbiw	r28, 0x0b	; 11
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	cd bf       	out	0x3d, r28	; 61

	/* this loop keeps taking inputs until two matches */
	while(1)
	{
		/* check if the two password sent by HMI_ECU are identical and send to it the status */
		if(APP_adjustPasswordFirstTime(f_pass, s_pass) == SUCCESS)
    267c:	ce 01       	movw	r24, r28
    267e:	02 96       	adiw	r24, 0x02	; 2
    2680:	9e 01       	movw	r18, r28
    2682:	29 5f       	subi	r18, 0xF9	; 249
    2684:	3f 4f       	sbci	r19, 0xFF	; 255
    2686:	b9 01       	movw	r22, r18
    2688:	0e 94 f5 13 	call	0x27ea	; 0x27ea <APP_adjustPasswordFirstTime>
    268c:	81 30       	cpi	r24, 0x01	; 1
    268e:	21 f4       	brne	.+8      	; 0x2698 <APP_start+0x30>
		{
			APP_sendStatusToHMI_ECU(PASSWORD_MATCH);
    2690:	81 e1       	ldi	r24, 0x11	; 17
    2692:	0e 94 4a 14 	call	0x2894	; 0x2894 <APP_sendStatusToHMI_ECU>
    2696:	04 c0       	rjmp	.+8      	; 0x26a0 <APP_start+0x38>
			break;
		}
		else
		{
			APP_sendStatusToHMI_ECU(PASSWORD_DISMATCH);
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	0e 94 4a 14 	call	0x2894	; 0x2894 <APP_sendStatusToHMI_ECU>
    269e:	ee cf       	rjmp	.-36     	; 0x267c <APP_start+0x14>

	/* This loop to control the selected options taken by user */
	while(1)
	{
		/* Receive the option from HMI_ECU */
		selectOption = APP_getOptionFromHMI_ECU();
    26a0:	0e 94 38 14 	call	0x2870	; 0x2870 <APP_getOptionFromHMI_ECU>
    26a4:	89 83       	std	Y+1, r24	; 0x01

		if(OPEN_DOOR_OPTION == selectOption)
    26a6:	89 81       	ldd	r24, Y+1	; 0x01
    26a8:	8b 32       	cpi	r24, 0x2B	; 43
    26aa:	49 f4       	brne	.+18     	; 0x26be <APP_start+0x56>
		{
			APP_handleOpenDoorOption(f_pass, s_pass);
    26ac:	ce 01       	movw	r24, r28
    26ae:	02 96       	adiw	r24, 0x02	; 2
    26b0:	9e 01       	movw	r18, r28
    26b2:	29 5f       	subi	r18, 0xF9	; 249
    26b4:	3f 4f       	sbci	r19, 0xFF	; 255
    26b6:	b9 01       	movw	r22, r18
    26b8:	0e 94 86 14 	call	0x290c	; 0x290c <APP_handleOpenDoorOption>
    26bc:	f1 cf       	rjmp	.-30     	; 0x26a0 <APP_start+0x38>
		}
		else if(CHANGE_PASSWORD_OPTION == selectOption)
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	8d 32       	cpi	r24, 0x2D	; 45
    26c2:	71 f7       	brne	.-36     	; 0x26a0 <APP_start+0x38>
		{
			APP_handleChangePasswordOption(f_pass, s_pass);
    26c4:	ce 01       	movw	r24, r28
    26c6:	02 96       	adiw	r24, 0x02	; 2
    26c8:	9e 01       	movw	r18, r28
    26ca:	29 5f       	subi	r18, 0xF9	; 249
    26cc:	3f 4f       	sbci	r19, 0xFF	; 255
    26ce:	b9 01       	movw	r22, r18
    26d0:	0e 94 e7 14 	call	0x29ce	; 0x29ce <APP_handleChangePasswordOption>
    26d4:	e5 cf       	rjmp	.-54     	; 0x26a0 <APP_start+0x38>

000026d6 <APP_receivePassword>:
 * 					byte from HMI_ECU and save it into buffer.
 * [Args]  : pointer to uint8
 * [Return]: Void
 */
void APP_receivePassword(uint8 *pass)
{
    26d6:	0f 93       	push	r16
    26d8:	1f 93       	push	r17
    26da:	df 93       	push	r29
    26dc:	cf 93       	push	r28
    26de:	00 d0       	rcall	.+0      	; 0x26e0 <APP_receivePassword+0xa>
    26e0:	0f 92       	push	r0
    26e2:	cd b7       	in	r28, 0x3d	; 61
    26e4:	de b7       	in	r29, 0x3e	; 62
    26e6:	9b 83       	std	Y+3, r25	; 0x03
    26e8:	8a 83       	std	Y+2, r24	; 0x02
	/* Wait until HMI_ECU reply that it is ready to start communication */
	while(USART_recieveByte() != HMI_ECU_READY);
    26ea:	0e 94 a0 07 	call	0xf40	; 0xf40 <USART_recieveByte>
    26ee:	80 32       	cpi	r24, 0x20	; 32
    26f0:	91 05       	cpc	r25, r1
    26f2:	d9 f7       	brne	.-10     	; 0x26ea <APP_receivePassword+0x14>

	/* Send dummy byte to tell HMI_ECU that Control_ECU is ready */
	USART_sendByte(CONTROL_ECU_READY);
    26f4:	80 e1       	ldi	r24, 0x10	; 16
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	0e 94 87 07 	call	0xf0e	; 0xf0e <USART_sendByte>

	/* Save the password which is received by UART byte by byte */
	for(uint8 i=0; i<PASSWORD_LENGTH; i++)
    26fc:	19 82       	std	Y+1, r1	; 0x01
    26fe:	0f c0       	rjmp	.+30     	; 0x271e <APP_receivePassword+0x48>
	{
		pass[i] = USART_recieveByte();
    2700:	89 81       	ldd	r24, Y+1	; 0x01
    2702:	28 2f       	mov	r18, r24
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	8a 81       	ldd	r24, Y+2	; 0x02
    2708:	9b 81       	ldd	r25, Y+3	; 0x03
    270a:	8c 01       	movw	r16, r24
    270c:	02 0f       	add	r16, r18
    270e:	13 1f       	adc	r17, r19
    2710:	0e 94 a0 07 	call	0xf40	; 0xf40 <USART_recieveByte>
    2714:	f8 01       	movw	r30, r16
    2716:	80 83       	st	Z, r24

	/* Send dummy byte to tell HMI_ECU that Control_ECU is ready */
	USART_sendByte(CONTROL_ECU_READY);

	/* Save the password which is received by UART byte by byte */
	for(uint8 i=0; i<PASSWORD_LENGTH; i++)
    2718:	89 81       	ldd	r24, Y+1	; 0x01
    271a:	8f 5f       	subi	r24, 0xFF	; 255
    271c:	89 83       	std	Y+1, r24	; 0x01
    271e:	89 81       	ldd	r24, Y+1	; 0x01
    2720:	85 30       	cpi	r24, 0x05	; 5
    2722:	70 f3       	brcs	.-36     	; 0x2700 <APP_receivePassword+0x2a>
	{
		pass[i] = USART_recieveByte();
	}
}
    2724:	0f 90       	pop	r0
    2726:	0f 90       	pop	r0
    2728:	0f 90       	pop	r0
    272a:	cf 91       	pop	r28
    272c:	df 91       	pop	r29
    272e:	1f 91       	pop	r17
    2730:	0f 91       	pop	r16
    2732:	08 95       	ret

00002734 <APP_matchPassword>:
 * [Args]  : 1- pointer to constant uint8
 *           2- pointer to constant uint8
 * [Return]: boolean
 */
boolean APP_matchPassword(const uint8 *f_pass, const uint8 *s_pass)
{
    2734:	df 93       	push	r29
    2736:	cf 93       	push	r28
    2738:	00 d0       	rcall	.+0      	; 0x273a <APP_matchPassword+0x6>
    273a:	00 d0       	rcall	.+0      	; 0x273c <APP_matchPassword+0x8>
    273c:	00 d0       	rcall	.+0      	; 0x273e <APP_matchPassword+0xa>
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
    2742:	9b 83       	std	Y+3, r25	; 0x03
    2744:	8a 83       	std	Y+2, r24	; 0x02
    2746:	7d 83       	std	Y+5, r23	; 0x05
    2748:	6c 83       	std	Y+4, r22	; 0x04
	for(uint8 i=0; i<PASSWORD_LENGTH; i++)
    274a:	19 82       	std	Y+1, r1	; 0x01
    274c:	19 c0       	rjmp	.+50     	; 0x2780 <APP_matchPassword+0x4c>
	{
		if(f_pass[i] == s_pass[i])
    274e:	89 81       	ldd	r24, Y+1	; 0x01
    2750:	28 2f       	mov	r18, r24
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	8a 81       	ldd	r24, Y+2	; 0x02
    2756:	9b 81       	ldd	r25, Y+3	; 0x03
    2758:	fc 01       	movw	r30, r24
    275a:	e2 0f       	add	r30, r18
    275c:	f3 1f       	adc	r31, r19
    275e:	40 81       	ld	r20, Z
    2760:	89 81       	ldd	r24, Y+1	; 0x01
    2762:	28 2f       	mov	r18, r24
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	8c 81       	ldd	r24, Y+4	; 0x04
    2768:	9d 81       	ldd	r25, Y+5	; 0x05
    276a:	fc 01       	movw	r30, r24
    276c:	e2 0f       	add	r30, r18
    276e:	f3 1f       	adc	r31, r19
    2770:	80 81       	ld	r24, Z
    2772:	48 17       	cp	r20, r24
    2774:	11 f0       	breq	.+4      	; 0x277a <APP_matchPassword+0x46>
			continue;
		else
			return FALSE;
    2776:	1e 82       	std	Y+6, r1	; 0x06
    2778:	08 c0       	rjmp	.+16     	; 0x278a <APP_matchPassword+0x56>
 *           2- pointer to constant uint8
 * [Return]: boolean
 */
boolean APP_matchPassword(const uint8 *f_pass, const uint8 *s_pass)
{
	for(uint8 i=0; i<PASSWORD_LENGTH; i++)
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	8f 5f       	subi	r24, 0xFF	; 255
    277e:	89 83       	std	Y+1, r24	; 0x01
    2780:	89 81       	ldd	r24, Y+1	; 0x01
    2782:	85 30       	cpi	r24, 0x05	; 5
    2784:	20 f3       	brcs	.-56     	; 0x274e <APP_matchPassword+0x1a>
		if(f_pass[i] == s_pass[i])
			continue;
		else
			return FALSE;
	}
	return TRUE;
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	8e 83       	std	Y+6, r24	; 0x06
    278a:	8e 81       	ldd	r24, Y+6	; 0x06
}
    278c:	26 96       	adiw	r28, 0x06	; 6
    278e:	0f b6       	in	r0, 0x3f	; 63
    2790:	f8 94       	cli
    2792:	de bf       	out	0x3e, r29	; 62
    2794:	0f be       	out	0x3f, r0	; 63
    2796:	cd bf       	out	0x3d, r28	; 61
    2798:	cf 91       	pop	r28
    279a:	df 91       	pop	r29
    279c:	08 95       	ret

0000279e <APP_savePasswordInEEPROM>:
 * [Description]  : This function is responsible for saves the correct password in External EEPROM.
 * [Args]  :  pointer to constant uint8
 * [Return]: void
 */
void APP_savePasswordInEEPROM(const uint8 *pass)
{
    279e:	df 93       	push	r29
    27a0:	cf 93       	push	r28
    27a2:	00 d0       	rcall	.+0      	; 0x27a4 <APP_savePasswordInEEPROM+0x6>
    27a4:	0f 92       	push	r0
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
    27aa:	9b 83       	std	Y+3, r25	; 0x03
    27ac:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i=0; i<PASSWORD_LENGTH; i++)
    27ae:	19 82       	std	Y+1, r1	; 0x01
    27b0:	13 c0       	rjmp	.+38     	; 0x27d8 <APP_savePasswordInEEPROM+0x3a>
	{
		/* Write Every digit of password in the external EEPROM */
		EEPROM_writeByte(PASSWORD_LOCATION+i, pass[i]);
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	48 2f       	mov	r20, r24
    27b6:	50 e0       	ldi	r21, 0x00	; 0
    27b8:	89 81       	ldd	r24, Y+1	; 0x01
    27ba:	28 2f       	mov	r18, r24
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	8a 81       	ldd	r24, Y+2	; 0x02
    27c0:	9b 81       	ldd	r25, Y+3	; 0x03
    27c2:	fc 01       	movw	r30, r24
    27c4:	e2 0f       	add	r30, r18
    27c6:	f3 1f       	adc	r31, r19
    27c8:	20 81       	ld	r18, Z
    27ca:	ca 01       	movw	r24, r20
    27cc:	62 2f       	mov	r22, r18
    27ce:	0e 94 0c 12 	call	0x2418	; 0x2418 <EEPROM_writeByte>
 * [Args]  :  pointer to constant uint8
 * [Return]: void
 */
void APP_savePasswordInEEPROM(const uint8 *pass)
{
	for(uint8 i=0; i<PASSWORD_LENGTH; i++)
    27d2:	89 81       	ldd	r24, Y+1	; 0x01
    27d4:	8f 5f       	subi	r24, 0xFF	; 255
    27d6:	89 83       	std	Y+1, r24	; 0x01
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
    27da:	85 30       	cpi	r24, 0x05	; 5
    27dc:	50 f3       	brcs	.-44     	; 0x27b2 <APP_savePasswordInEEPROM+0x14>
	{
		/* Write Every digit of password in the external EEPROM */
		EEPROM_writeByte(PASSWORD_LOCATION+i, pass[i]);
	}
}
    27de:	0f 90       	pop	r0
    27e0:	0f 90       	pop	r0
    27e2:	0f 90       	pop	r0
    27e4:	cf 91       	pop	r28
    27e6:	df 91       	pop	r29
    27e8:	08 95       	ret

000027ea <APP_adjustPasswordFirstTime>:
 * [Args]  : 1- pointer to uint8
 * 			 2- pointer to uint8
 * [Return]: uint8
 */
uint8 APP_adjustPasswordFirstTime(uint8 *f_pass, uint8 *s_pass)
{
    27ea:	df 93       	push	r29
    27ec:	cf 93       	push	r28
    27ee:	00 d0       	rcall	.+0      	; 0x27f0 <APP_adjustPasswordFirstTime+0x6>
    27f0:	00 d0       	rcall	.+0      	; 0x27f2 <APP_adjustPasswordFirstTime+0x8>
    27f2:	0f 92       	push	r0
    27f4:	cd b7       	in	r28, 0x3d	; 61
    27f6:	de b7       	in	r29, 0x3e	; 62
    27f8:	9a 83       	std	Y+2, r25	; 0x02
    27fa:	89 83       	std	Y+1, r24	; 0x01
    27fc:	7c 83       	std	Y+4, r23	; 0x04
    27fe:	6b 83       	std	Y+3, r22	; 0x03
	/* Receive the first password from HMI_ECU */
	APP_receivePassword(f_pass);
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	9a 81       	ldd	r25, Y+2	; 0x02
    2804:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <APP_receivePassword>

	/* Receive the Second password from HMI_ECU */
	APP_receivePassword(s_pass);
    2808:	8b 81       	ldd	r24, Y+3	; 0x03
    280a:	9c 81       	ldd	r25, Y+4	; 0x04
    280c:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <APP_receivePassword>

	/* Save the password in External EEPROM if the two Passwords are matched */
	if(APP_matchPassword(f_pass, s_pass))
    2810:	89 81       	ldd	r24, Y+1	; 0x01
    2812:	9a 81       	ldd	r25, Y+2	; 0x02
    2814:	2b 81       	ldd	r18, Y+3	; 0x03
    2816:	3c 81       	ldd	r19, Y+4	; 0x04
    2818:	b9 01       	movw	r22, r18
    281a:	0e 94 9a 13 	call	0x2734	; 0x2734 <APP_matchPassword>
    281e:	88 23       	and	r24, r24
    2820:	39 f0       	breq	.+14     	; 0x2830 <APP_adjustPasswordFirstTime+0x46>
	{
		APP_savePasswordInEEPROM(f_pass);
    2822:	89 81       	ldd	r24, Y+1	; 0x01
    2824:	9a 81       	ldd	r25, Y+2	; 0x02
    2826:	0e 94 cf 13 	call	0x279e	; 0x279e <APP_savePasswordInEEPROM>
		return SUCCESS;
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	8d 83       	std	Y+5, r24	; 0x05
    282e:	01 c0       	rjmp	.+2      	; 0x2832 <APP_adjustPasswordFirstTime+0x48>
	}
	else
	{
		return ERROR;
    2830:	1d 82       	std	Y+5, r1	; 0x05
    2832:	8d 81       	ldd	r24, Y+5	; 0x05
	}
}
    2834:	0f 90       	pop	r0
    2836:	0f 90       	pop	r0
    2838:	0f 90       	pop	r0
    283a:	0f 90       	pop	r0
    283c:	0f 90       	pop	r0
    283e:	cf 91       	pop	r28
    2840:	df 91       	pop	r29
    2842:	08 95       	ret

00002844 <APP_timer>:
 * [Description]  : This function is responsible for tells the timer to start counting and give it how many Second you want.
 * [Args]  : uint8 required number of second
 * [Return]: void
 */
void APP_timer(uint8 delay)
{
    2844:	df 93       	push	r29
    2846:	cf 93       	push	r28
    2848:	0f 92       	push	r0
    284a:	cd b7       	in	r28, 0x3d	; 61
    284c:	de b7       	in	r29, 0x3e	; 62
    284e:	89 83       	std	Y+1, r24	; 0x01
	/* Initialize the timer */
	TIMER_Init();
    2850:	0e 94 2c 0b 	call	0x1658	; 0x1658 <TIMER_Init>

	/* waiting until the seconds count reaches the specified no. of seconds */
	while(seconds_tick < delay);
    2854:	90 91 76 01 	lds	r25, 0x0176
    2858:	89 81       	ldd	r24, Y+1	; 0x01
    285a:	98 17       	cp	r25, r24
    285c:	d8 f3       	brcs	.-10     	; 0x2854 <APP_timer+0x10>

	/* Stop The Timer1 */
	TIMER_DeInit(1);
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	0e 94 b1 0b 	call	0x1762	; 0x1762 <TIMER_DeInit>

	/* reset number of ticks */
	seconds_tick = 0;
    2864:	10 92 76 01 	sts	0x0176, r1
}
    2868:	0f 90       	pop	r0
    286a:	cf 91       	pop	r28
    286c:	df 91       	pop	r29
    286e:	08 95       	ret

00002870 <APP_getOptionFromHMI_ECU>:
 * [Description]  : This function is responsible for get the option from user (Open door - Change Password).
 * [Args]  : void
 * [Return]: uint8
 */
uint8 APP_getOptionFromHMI_ECU(void)
{
    2870:	df 93       	push	r29
    2872:	cf 93       	push	r28
    2874:	cd b7       	in	r28, 0x3d	; 61
    2876:	de b7       	in	r29, 0x3e	; 62
	/* Wait until HMI_ECU reply that it is ready to start communication */
	while(USART_recieveByte() != HMI_ECU_READY);
    2878:	0e 94 a0 07 	call	0xf40	; 0xf40 <USART_recieveByte>
    287c:	80 32       	cpi	r24, 0x20	; 32
    287e:	91 05       	cpc	r25, r1
    2880:	d9 f7       	brne	.-10     	; 0x2878 <APP_getOptionFromHMI_ECU+0x8>

	/* Send dummy byte to tell HMI_ECU that Control_ECU is ready */
	USART_sendByte(CONTROL_ECU_READY);
    2882:	80 e1       	ldi	r24, 0x10	; 16
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	0e 94 87 07 	call	0xf0e	; 0xf0e <USART_sendByte>

	return USART_recieveByte();
    288a:	0e 94 a0 07 	call	0xf40	; 0xf40 <USART_recieveByte>
}
    288e:	cf 91       	pop	r28
    2890:	df 91       	pop	r29
    2892:	08 95       	ret

00002894 <APP_sendStatusToHMI_ECU>:
 * [Description]  : This function is responsible for send status to HMI ECU (DOOR_IS_OPENING - DOOR_IS_CLOSING - DOOR_IS_CLOSED).
 * [Args]  : uint8
 * [Return]: void
 */
void APP_sendStatusToHMI_ECU(uint8 state)
{
    2894:	df 93       	push	r29
    2896:	cf 93       	push	r28
    2898:	0f 92       	push	r0
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
    289e:	89 83       	std	Y+1, r24	; 0x01
	/* Send dummy byte to tell HMI_ECU that Control_ECU is ready to start communication */
	USART_sendByte(CONTROL_ECU_READY);
    28a0:	80 e1       	ldi	r24, 0x10	; 16
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	0e 94 87 07 	call	0xf0e	; 0xf0e <USART_sendByte>

	/* Wait until HMI ECU reply that it is ready to receive  */
	while(USART_recieveByte() != HMI_ECU_READY);
    28a8:	0e 94 a0 07 	call	0xf40	; 0xf40 <USART_recieveByte>
    28ac:	80 32       	cpi	r24, 0x20	; 32
    28ae:	91 05       	cpc	r25, r1
    28b0:	d9 f7       	brne	.-10     	; 0x28a8 <APP_sendStatusToHMI_ECU+0x14>

	USART_sendByte(state);
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	88 2f       	mov	r24, r24
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	0e 94 87 07 	call	0xf0e	; 0xf0e <USART_sendByte>
}
    28bc:	0f 90       	pop	r0
    28be:	cf 91       	pop	r28
    28c0:	df 91       	pop	r29
    28c2:	08 95       	ret

000028c4 <APP_readPasswordFromEEPROM>:
 * [Description]  : This function is responsible for read the saved password from External EERROM.
 * [Args]  : pointer to uint8
 * [Return]: void
 */
void APP_readPasswordFromEEPROM(uint8 *pass)
{
    28c4:	df 93       	push	r29
    28c6:	cf 93       	push	r28
    28c8:	00 d0       	rcall	.+0      	; 0x28ca <APP_readPasswordFromEEPROM+0x6>
    28ca:	0f 92       	push	r0
    28cc:	cd b7       	in	r28, 0x3d	; 61
    28ce:	de b7       	in	r29, 0x3e	; 62
    28d0:	9b 83       	std	Y+3, r25	; 0x03
    28d2:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i=0; i<PASSWORD_LENGTH; i++)
    28d4:	19 82       	std	Y+1, r1	; 0x01
    28d6:	11 c0       	rjmp	.+34     	; 0x28fa <APP_readPasswordFromEEPROM+0x36>
	{
		EEPROM_readByte(PASSWORD_LOCATION+i, pass+i);
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	48 2f       	mov	r20, r24
    28dc:	50 e0       	ldi	r21, 0x00	; 0
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	28 2f       	mov	r18, r24
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	8a 81       	ldd	r24, Y+2	; 0x02
    28e6:	9b 81       	ldd	r25, Y+3	; 0x03
    28e8:	28 0f       	add	r18, r24
    28ea:	39 1f       	adc	r19, r25
    28ec:	ca 01       	movw	r24, r20
    28ee:	b9 01       	movw	r22, r18
    28f0:	0e 94 4c 12 	call	0x2498	; 0x2498 <EEPROM_readByte>
 * [Args]  : pointer to uint8
 * [Return]: void
 */
void APP_readPasswordFromEEPROM(uint8 *pass)
{
	for(uint8 i=0; i<PASSWORD_LENGTH; i++)
    28f4:	89 81       	ldd	r24, Y+1	; 0x01
    28f6:	8f 5f       	subi	r24, 0xFF	; 255
    28f8:	89 83       	std	Y+1, r24	; 0x01
    28fa:	89 81       	ldd	r24, Y+1	; 0x01
    28fc:	85 30       	cpi	r24, 0x05	; 5
    28fe:	60 f3       	brcs	.-40     	; 0x28d8 <APP_readPasswordFromEEPROM+0x14>
	{
		EEPROM_readByte(PASSWORD_LOCATION+i, pass+i);
	}
}
    2900:	0f 90       	pop	r0
    2902:	0f 90       	pop	r0
    2904:	0f 90       	pop	r0
    2906:	cf 91       	pop	r28
    2908:	df 91       	pop	r29
    290a:	08 95       	ret

0000290c <APP_handleOpenDoorOption>:
 * [Args]  : 1- pointer to uint8
 * 			 2- pointer to uint8
 * [Return]: void
 */
void APP_handleOpenDoorOption(uint8 *pass, uint8 *EEPROM_pass)
{
    290c:	df 93       	push	r29
    290e:	cf 93       	push	r28
    2910:	00 d0       	rcall	.+0      	; 0x2912 <APP_handleOpenDoorOption+0x6>
    2912:	00 d0       	rcall	.+0      	; 0x2914 <APP_handleOpenDoorOption+0x8>
    2914:	cd b7       	in	r28, 0x3d	; 61
    2916:	de b7       	in	r29, 0x3e	; 62
    2918:	9a 83       	std	Y+2, r25	; 0x02
    291a:	89 83       	std	Y+1, r24	; 0x01
    291c:	7c 83       	std	Y+4, r23	; 0x04
    291e:	6b 83       	std	Y+3, r22	; 0x03
	while(1)
	{
		/* receive the password from the HMI_ECU */
		APP_receivePassword(pass);
    2920:	89 81       	ldd	r24, Y+1	; 0x01
    2922:	9a 81       	ldd	r25, Y+2	; 0x02
    2924:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <APP_receivePassword>

		/* get the password saved in EEPROM */
		APP_readPasswordFromEEPROM(EEPROM_pass);
    2928:	8b 81       	ldd	r24, Y+3	; 0x03
    292a:	9c 81       	ldd	r25, Y+4	; 0x04
    292c:	0e 94 62 14 	call	0x28c4	; 0x28c4 <APP_readPasswordFromEEPROM>

		/* check the two password */
		if(APP_matchPassword(pass, EEPROM_pass) == TRUE)
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	9a 81       	ldd	r25, Y+2	; 0x02
    2934:	2b 81       	ldd	r18, Y+3	; 0x03
    2936:	3c 81       	ldd	r19, Y+4	; 0x04
    2938:	b9 01       	movw	r22, r18
    293a:	0e 94 9a 13 	call	0x2734	; 0x2734 <APP_matchPassword>
    293e:	81 30       	cpi	r24, 0x01	; 1
    2940:	19 f5       	brne	.+70     	; 0x2988 <APP_handleOpenDoorOption+0x7c>
		{
			/* if they match open the door and send the status to inform the HMI_ECU */
			APP_sendStatusToHMI_ECU(DOOR_IS_OPENING);
    2942:	82 e2       	ldi	r24, 0x22	; 34
    2944:	0e 94 4a 14 	call	0x2894	; 0x2894 <APP_sendStatusToHMI_ECU>

			/* DC motor will rotates for 15 seconds to open the door */
			DcMotor_Rotate(DC_MOTOR_CLOCKWISE, 100);
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	64 e6       	ldi	r22, 0x64	; 100
    294c:	0e 94 c1 12 	call	0x2582	; 0x2582 <DcMotor_Rotate>

			/*start counting 15 seconds*/
			APP_timer(15);
    2950:	8f e0       	ldi	r24, 0x0F	; 15
    2952:	0e 94 22 14 	call	0x2844	; 0x2844 <APP_timer>

			/* after 15 seconds the motor will stop for 3 seconds */
			DcMotor_Rotate(DC_MOTOR_STOP, 0);
    2956:	80 e0       	ldi	r24, 0x00	; 0
    2958:	60 e0       	ldi	r22, 0x00	; 0
    295a:	0e 94 c1 12 	call	0x2582	; 0x2582 <DcMotor_Rotate>

			/*start counting 3 seconds*/
			APP_timer(3);
    295e:	83 e0       	ldi	r24, 0x03	; 3
    2960:	0e 94 22 14 	call	0x2844	; 0x2844 <APP_timer>

			/* send status to HMIECU to inform it that the door is closing */
			APP_sendStatusToHMI_ECU(DOOR_IS_CLOSING);
    2964:	83 e3       	ldi	r24, 0x33	; 51
    2966:	0e 94 4a 14 	call	0x2894	; 0x2894 <APP_sendStatusToHMI_ECU>

			/* DC motor will rotates Anti-Clockwise for 15 seconds to close the door */
			DcMotor_Rotate(DC_MOTOR_ANTI_CLOCKWISE, 100);
    296a:	82 e0       	ldi	r24, 0x02	; 2
    296c:	64 e6       	ldi	r22, 0x64	; 100
    296e:	0e 94 c1 12 	call	0x2582	; 0x2582 <DcMotor_Rotate>

			/*start counting 15 seconds*/
			APP_timer(15);
    2972:	8f e0       	ldi	r24, 0x0F	; 15
    2974:	0e 94 22 14 	call	0x2844	; 0x2844 <APP_timer>

			/* after 15 seconds the motor will stop */
			DcMotor_Rotate(DC_MOTOR_STOP, 0);
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	60 e0       	ldi	r22, 0x00	; 0
    297c:	0e 94 c1 12 	call	0x2582	; 0x2582 <DcMotor_Rotate>

			/* to let HMI_ECU knows to stop displaying DOOR_IS_CLOSING */
			APP_sendStatusToHMI_ECU(DOOR_IS_CLOSED);
    2980:	84 e4       	ldi	r24, 0x44	; 68
    2982:	0e 94 4a 14 	call	0x2894	; 0x2894 <APP_sendStatusToHMI_ECU>
    2986:	1c c0       	rjmp	.+56     	; 0x29c0 <APP_handleOpenDoorOption+0xb4>
			break;
		}
		else
		{
			WrongPasswordCounts++;
    2988:	80 91 77 01 	lds	r24, 0x0177
    298c:	8f 5f       	subi	r24, 0xFF	; 255
    298e:	80 93 77 01 	sts	0x0177, r24
			if(WrongPasswordCounts < 3)
    2992:	80 91 77 01 	lds	r24, 0x0177
    2996:	83 30       	cpi	r24, 0x03	; 3
    2998:	20 f4       	brcc	.+8      	; 0x29a2 <APP_handleOpenDoorOption+0x96>
			{
				APP_sendStatusToHMI_ECU(PASSWORD_DISMATCH);
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	0e 94 4a 14 	call	0x2894	; 0x2894 <APP_sendStatusToHMI_ECU>
    29a0:	bf cf       	rjmp	.-130    	; 0x2920 <APP_handleOpenDoorOption+0x14>
			}
			else
			{
				/* reset the counter to be able to use it again */
				WrongPasswordCounts = 0;
    29a2:	10 92 77 01 	sts	0x0177, r1

				/* tell HMI_ECU to display error message */
				APP_sendStatusToHMI_ECU(ERROR_MESSAGE);
    29a6:	8f ef       	ldi	r24, 0xFF	; 255
    29a8:	0e 94 4a 14 	call	0x2894	; 0x2894 <APP_sendStatusToHMI_ECU>

				Buzzer_on(); /* START the alarm */
    29ac:	0e 94 07 13 	call	0x260e	; 0x260e <Buzzer_on>

				/* waiting 1 minute */
				APP_timer(60);
    29b0:	8c e3       	ldi	r24, 0x3C	; 60
    29b2:	0e 94 22 14 	call	0x2844	; 0x2844 <APP_timer>

				Buzzer_off(); /* stop the alarm */
    29b6:	0e 94 13 13 	call	0x2626	; 0x2626 <Buzzer_off>

				/* tell HMI_ECU to display the main menu again */
				APP_sendStatusToHMI_ECU(CONTINUE_PROGRAM);
    29ba:	85 e5       	ldi	r24, 0x55	; 85
    29bc:	0e 94 4a 14 	call	0x2894	; 0x2894 <APP_sendStatusToHMI_ECU>
				break;
			}
		}
	}
}
    29c0:	0f 90       	pop	r0
    29c2:	0f 90       	pop	r0
    29c4:	0f 90       	pop	r0
    29c6:	0f 90       	pop	r0
    29c8:	cf 91       	pop	r28
    29ca:	df 91       	pop	r29
    29cc:	08 95       	ret

000029ce <APP_handleChangePasswordOption>:
 * [Args]  : 1- pointer to uint8
 * 			 2- pointer to uint8
 * [Return]: void
 */
void APP_handleChangePasswordOption(uint8 *pass, uint8 *EEPROM_pass)
{
    29ce:	df 93       	push	r29
    29d0:	cf 93       	push	r28
    29d2:	00 d0       	rcall	.+0      	; 0x29d4 <APP_handleChangePasswordOption+0x6>
    29d4:	00 d0       	rcall	.+0      	; 0x29d6 <APP_handleChangePasswordOption+0x8>
    29d6:	cd b7       	in	r28, 0x3d	; 61
    29d8:	de b7       	in	r29, 0x3e	; 62
    29da:	9a 83       	std	Y+2, r25	; 0x02
    29dc:	89 83       	std	Y+1, r24	; 0x01
    29de:	7c 83       	std	Y+4, r23	; 0x04
    29e0:	6b 83       	std	Y+3, r22	; 0x03
	while(1)
	{
		/* receive the password from the HMI_ECU */
		APP_receivePassword(pass);
    29e2:	89 81       	ldd	r24, Y+1	; 0x01
    29e4:	9a 81       	ldd	r25, Y+2	; 0x02
    29e6:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <APP_receivePassword>

		/* get the password saved in EEPROM */
		APP_readPasswordFromEEPROM(EEPROM_pass);
    29ea:	8b 81       	ldd	r24, Y+3	; 0x03
    29ec:	9c 81       	ldd	r25, Y+4	; 0x04
    29ee:	0e 94 62 14 	call	0x28c4	; 0x28c4 <APP_readPasswordFromEEPROM>

		/* check the two password */
		if(APP_matchPassword(pass, EEPROM_pass) == TRUE)
    29f2:	89 81       	ldd	r24, Y+1	; 0x01
    29f4:	9a 81       	ldd	r25, Y+2	; 0x02
    29f6:	2b 81       	ldd	r18, Y+3	; 0x03
    29f8:	3c 81       	ldd	r19, Y+4	; 0x04
    29fa:	b9 01       	movw	r22, r18
    29fc:	0e 94 9a 13 	call	0x2734	; 0x2734 <APP_matchPassword>
    2a00:	81 30       	cpi	r24, 0x01	; 1
    2a02:	b1 f4       	brne	.+44     	; 0x2a30 <APP_handleChangePasswordOption+0x62>
		{
			/* if they match change the password in EEPROM and send the status to inform the HMI_ECU */
			APP_sendStatusToHMI_ECU(PASSWORD_MATCH);
    2a04:	81 e1       	ldi	r24, 0x11	; 17
    2a06:	0e 94 4a 14 	call	0x2894	; 0x2894 <APP_sendStatusToHMI_ECU>

			while(1)
			{
				/* save the password received from HMI_ECU IN EEPROM */
				if(APP_adjustPasswordFirstTime(pass, EEPROM_pass) == SUCCESS)
    2a0a:	89 81       	ldd	r24, Y+1	; 0x01
    2a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0e:	2b 81       	ldd	r18, Y+3	; 0x03
    2a10:	3c 81       	ldd	r19, Y+4	; 0x04
    2a12:	b9 01       	movw	r22, r18
    2a14:	0e 94 f5 13 	call	0x27ea	; 0x27ea <APP_adjustPasswordFirstTime>
    2a18:	81 30       	cpi	r24, 0x01	; 1
    2a1a:	31 f4       	brne	.+12     	; 0x2a28 <APP_handleChangePasswordOption+0x5a>
				{
					APP_sendStatusToHMI_ECU(PASSWORD_MATCH);
    2a1c:	81 e1       	ldi	r24, 0x11	; 17
    2a1e:	0e 94 4a 14 	call	0x2894	; 0x2894 <APP_sendStatusToHMI_ECU>
				{
					APP_sendStatusToHMI_ECU(PASSWORD_DISMATCH);
				}
			}

			WrongPasswordCounts = 0;
    2a22:	10 92 77 01 	sts	0x0177, r1
    2a26:	20 c0       	rjmp	.+64     	; 0x2a68 <APP_handleChangePasswordOption+0x9a>
					APP_sendStatusToHMI_ECU(PASSWORD_MATCH);
					break;
				}
				else
				{
					APP_sendStatusToHMI_ECU(PASSWORD_DISMATCH);
    2a28:	80 e0       	ldi	r24, 0x00	; 0
    2a2a:	0e 94 4a 14 	call	0x2894	; 0x2894 <APP_sendStatusToHMI_ECU>
    2a2e:	ed cf       	rjmp	.-38     	; 0x2a0a <APP_handleChangePasswordOption+0x3c>
			WrongPasswordCounts = 0;
			break;
		}
		else
		{
			WrongPasswordCounts++;
    2a30:	80 91 77 01 	lds	r24, 0x0177
    2a34:	8f 5f       	subi	r24, 0xFF	; 255
    2a36:	80 93 77 01 	sts	0x0177, r24
			if(WrongPasswordCounts < 3)
    2a3a:	80 91 77 01 	lds	r24, 0x0177
    2a3e:	83 30       	cpi	r24, 0x03	; 3
    2a40:	20 f4       	brcc	.+8      	; 0x2a4a <APP_handleChangePasswordOption+0x7c>
			{
				APP_sendStatusToHMI_ECU(PASSWORD_DISMATCH);
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	0e 94 4a 14 	call	0x2894	; 0x2894 <APP_sendStatusToHMI_ECU>
    2a48:	cc cf       	rjmp	.-104    	; 0x29e2 <APP_handleChangePasswordOption+0x14>
			}
			else
			{
				/* reset the wrong password counter */
				WrongPasswordCounts = 0;
    2a4a:	10 92 77 01 	sts	0x0177, r1

				/* tell HMI_ECU to display error message */
				APP_sendStatusToHMI_ECU(ERROR_MESSAGE);
    2a4e:	8f ef       	ldi	r24, 0xFF	; 255
    2a50:	0e 94 4a 14 	call	0x2894	; 0x2894 <APP_sendStatusToHMI_ECU>

				Buzzer_on(); /* START the alarm */
    2a54:	0e 94 07 13 	call	0x260e	; 0x260e <Buzzer_on>

				/* waiting 1 minute */
				APP_timer(60);
    2a58:	8c e3       	ldi	r24, 0x3C	; 60
    2a5a:	0e 94 22 14 	call	0x2844	; 0x2844 <APP_timer>

				Buzzer_off(); /* stop the alarm */
    2a5e:	0e 94 13 13 	call	0x2626	; 0x2626 <Buzzer_off>

				/* tell HMI_ECU to display the main menu again */
				APP_sendStatusToHMI_ECU(CONTINUE_PROGRAM);
    2a62:	85 e5       	ldi	r24, 0x55	; 85
    2a64:	0e 94 4a 14 	call	0x2894	; 0x2894 <APP_sendStatusToHMI_ECU>
				break;
			}
		}
	}
}
    2a68:	0f 90       	pop	r0
    2a6a:	0f 90       	pop	r0
    2a6c:	0f 90       	pop	r0
    2a6e:	0f 90       	pop	r0
    2a70:	cf 91       	pop	r28
    2a72:	df 91       	pop	r29
    2a74:	08 95       	ret

00002a76 <APP_handleTimer>:
 * 					a global variable which increases Every ISR Execution by 1sec.
 * [Args]  : void
 * [Return]: void
 */
void APP_handleTimer(void)
{
    2a76:	df 93       	push	r29
    2a78:	cf 93       	push	r28
    2a7a:	cd b7       	in	r28, 0x3d	; 61
    2a7c:	de b7       	in	r29, 0x3e	; 62
	seconds_tick++;
    2a7e:	80 91 76 01 	lds	r24, 0x0176
    2a82:	8f 5f       	subi	r24, 0xFF	; 255
    2a84:	80 93 76 01 	sts	0x0176, r24
}
    2a88:	cf 91       	pop	r28
    2a8a:	df 91       	pop	r29
    2a8c:	08 95       	ret

00002a8e <main>:
/*******************************************************************************
 *                                Main Function
 *******************************************************************************/

int main(void)
{
    2a8e:	df 93       	push	r29
    2a90:	cf 93       	push	r28
    2a92:	cd b7       	in	r28, 0x3d	; 61
    2a94:	de b7       	in	r29, 0x3e	; 62
	APP_init();
    2a96:	0e 94 1f 13 	call	0x263e	; 0x263e <APP_init>

	APP_start();
    2a9a:	0e 94 34 13 	call	0x2668	; 0x2668 <APP_start>
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
}
    2aa2:	cf 91       	pop	r28
    2aa4:	df 91       	pop	r29
    2aa6:	08 95       	ret

00002aa8 <__prologue_saves__>:
    2aa8:	2f 92       	push	r2
    2aaa:	3f 92       	push	r3
    2aac:	4f 92       	push	r4
    2aae:	5f 92       	push	r5
    2ab0:	6f 92       	push	r6
    2ab2:	7f 92       	push	r7
    2ab4:	8f 92       	push	r8
    2ab6:	9f 92       	push	r9
    2ab8:	af 92       	push	r10
    2aba:	bf 92       	push	r11
    2abc:	cf 92       	push	r12
    2abe:	df 92       	push	r13
    2ac0:	ef 92       	push	r14
    2ac2:	ff 92       	push	r15
    2ac4:	0f 93       	push	r16
    2ac6:	1f 93       	push	r17
    2ac8:	cf 93       	push	r28
    2aca:	df 93       	push	r29
    2acc:	cd b7       	in	r28, 0x3d	; 61
    2ace:	de b7       	in	r29, 0x3e	; 62
    2ad0:	ca 1b       	sub	r28, r26
    2ad2:	db 0b       	sbc	r29, r27
    2ad4:	0f b6       	in	r0, 0x3f	; 63
    2ad6:	f8 94       	cli
    2ad8:	de bf       	out	0x3e, r29	; 62
    2ada:	0f be       	out	0x3f, r0	; 63
    2adc:	cd bf       	out	0x3d, r28	; 61
    2ade:	09 94       	ijmp

00002ae0 <__epilogue_restores__>:
    2ae0:	2a 88       	ldd	r2, Y+18	; 0x12
    2ae2:	39 88       	ldd	r3, Y+17	; 0x11
    2ae4:	48 88       	ldd	r4, Y+16	; 0x10
    2ae6:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ae8:	6e 84       	ldd	r6, Y+14	; 0x0e
    2aea:	7d 84       	ldd	r7, Y+13	; 0x0d
    2aec:	8c 84       	ldd	r8, Y+12	; 0x0c
    2aee:	9b 84       	ldd	r9, Y+11	; 0x0b
    2af0:	aa 84       	ldd	r10, Y+10	; 0x0a
    2af2:	b9 84       	ldd	r11, Y+9	; 0x09
    2af4:	c8 84       	ldd	r12, Y+8	; 0x08
    2af6:	df 80       	ldd	r13, Y+7	; 0x07
    2af8:	ee 80       	ldd	r14, Y+6	; 0x06
    2afa:	fd 80       	ldd	r15, Y+5	; 0x05
    2afc:	0c 81       	ldd	r16, Y+4	; 0x04
    2afe:	1b 81       	ldd	r17, Y+3	; 0x03
    2b00:	aa 81       	ldd	r26, Y+2	; 0x02
    2b02:	b9 81       	ldd	r27, Y+1	; 0x01
    2b04:	ce 0f       	add	r28, r30
    2b06:	d1 1d       	adc	r29, r1
    2b08:	0f b6       	in	r0, 0x3f	; 63
    2b0a:	f8 94       	cli
    2b0c:	de bf       	out	0x3e, r29	; 62
    2b0e:	0f be       	out	0x3f, r0	; 63
    2b10:	cd bf       	out	0x3d, r28	; 61
    2b12:	ed 01       	movw	r28, r26
    2b14:	08 95       	ret

00002b16 <_exit>:
    2b16:	f8 94       	cli

00002b18 <__stop_program>:
    2b18:	ff cf       	rjmp	.-2      	; 0x2b18 <__stop_program>
